/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Reactor Desk Guard
        Location: Gecko
        Description: Generic reactor guard.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: May 5, 1998
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "gcrdesk"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"

#define NAME                    SCRIPT_GCRDESK
//NOTE: need GCYGUARD for yellow door guard
//this is for red door...
#define TOWN_REP_VAR            (GVAR_TOWN_REP_GECKO)

#define REACTORAREA         18000
#define SUPPLYAREA          19000

#include "../headers/command.h"
#include "../headers/gecko.h"
#include "../headers/geckpwpl.h"
#include "../headers/modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;

procedure Node001;
procedure Node002;
procedure Node02a; // Commented out by Seraph
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Hostile                    (4)
#define LVAR_Personal_Enemy             (5)
#define LVAR_Herebefore                 (6)
#define LVAR_07_before                  (7)

/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable pick;
variable drink_round;

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_GECKO);
   set_self_ai(AI_TOUGH_GUARD);
end

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

   if (self_can_see_dude) then begin
      if ( (global_var(GVAR_GECKO_MELTDOWN) == 1) or (global_var(GVAR_ENEMY_GECKO)) ) then begin //edit by killap - added (global_var(GVAR_ENEMY_GECKO))
         set_local_var(LVAR_Hostile,1);
         attack(dude_obj);
      end
      else if (((local_var(LVAR_Hostile) == 2)or(local_var(LVAR_Personal_Enemy) == 1))) then begin
         set_local_var(LVAR_Hostile,1);
         attack(dude_obj);
      end
      //else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_DESTROYED) then begin
      //   attack(dude_obj);
      //end
      //else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_TURNED_OFF) then begin
      //   attack(dude_obj);
      //end
   end //can see dude

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Personal_Enemy,1);
      set_global_var(GVAR_ENEMY_GECKO,1);
   end
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   //GetReaction;
   if ((REP_ENEMY_GECKO) or (local_var(LVAR_Personal_Enemy) == 1)) then begin
       call Node998;
   end
   else if (local_var(LVAR_Herebefore) == 0) then begin
      set_local_var(LVAR_Herebefore, 1);
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node001;
       gSay_End;
       end_dialogue;
   end
   else begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node002;
       gSay_End;
       end_dialogue;
   end
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin
/* Increment the aligned critter counter*/
   inc_good_critter
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
   //if (action_being_used == SKILL_STEAL) then begin
      //if (is_success(roll_vs_skill(dude_obj,action_being_used,0))) then begin
      //end
   //end
end

procedure Node001 begin
   if town_rep_worse_than(5) then
      Reply(110);
   else
      Reply(111);

      NLowOption(112,Node999);
      NOption(113,Node003,004);
      NOption(114,Node999,004);
end

procedure Node002 begin
   Reply(120);
   NLowOption(121,Node999);
   NOption(122,Node003,004);
   if (local_var(LVAR_07_before) == 0) then
      NOption(123,Node007,004);
   NOption(124,Node999,004);
end


procedure Node02a begin
   Reply(300);
   NOption(301,Node003,004);
   if (local_var(LVAR_07_before) == 0) then
      NOption(123,Node007,004);
   NOption(194,Node999,004);
end


procedure Node003 begin
   Reply(130);
   NOption(131,Node008,004);
   NOption(132,Node006,004);
   NOption(133,Node009,004);
   NOption(134,Node005,004);
   NOption(135,Node999,004);
end

procedure Node004 begin
   Reply(140);
   NOption(141,Node002,004);
   NOption(142,Node999,004);
end

procedure Node005 begin
   Reply(150);
   NOption(151,Node008,004); //edit by killap - was 009
   NOption(152,Node002,004);
   NOption(153,Node004,004);
   NOption(154,Node999,004);
end

procedure Node006 begin
   Reply(160);
   NOption(161,Node003,004);
   NOption(162,Node999,004);
end

procedure Node007 begin
   set_local_var(LVAR_07_before,1);
   Reply(170);
   NOption(171,Node002,004);
   NOption(172,Node010,006);
   NOption(173,Node999,004);
end

procedure Node008 begin
   Reply(180);
   NOption(181,Node02a,004); // Seraph's Fix: replaced 'Node02a' with 'Node003' - REMOVED THIS - killap
   /*// Begin Seraph's Code
   if (local_var(LVAR_07_before) == 0) then
      NOption(123,Node007,004);
   // End Seraph's Code* -COMMENTED OUT BY KILAP*/
   NOption(182,Node004,004);
   NOption(183,Node999,004);
end

procedure Node009 begin
   Reply(190);
   NOption(191,Node008,004); // Seraph's Fix: replaced "Node009" with "Node008"
   NOption(192,Node002,004);
   NOption(193,Node004,004);
   NOption(194,Node999,004);
end

procedure Node010 begin
   Reply(200);
   NOption(201,Node02a,004); //was 009 - killap
   NOption(202,Node999,004); //was 002 - killap
end

procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end
/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end
