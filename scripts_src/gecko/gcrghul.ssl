/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Ghoul Reactor Worker
        Location: Gecko
        Description: Generic worker in Gecko.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: May 5, 1998
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "gcrghul"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"

#define NAME                    SCRIPT_GCRGHOUL
#define TOWN_REP_VAR            (GVAR_TOWN_REP_GECKO)

#define SUPPLYAREA               13904
#define WORKAREA1                23478
#define WORKAREA2                25276
#define WORKAREA3                25282
#define WORKAREA4                25088

#include "../headers/command.h"
#include "../headers/gecko.h"
#include "../headers/modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure push_p_proc;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure goarea;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Hostile                    (4)
#define LVAR_Personal_Enemy             (5)
#define LVAR_Said_Sneak                 (6)

/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable pick;
variable seq;

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   //CHANGE THESE -nbk
   set_self_team(TEAM_GECKO);
   set_self_ai(AI_TOUGH_CITIZEN);
end

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin
   seq := 1 - seq;
   if (seq) then begin
      if ( ( (local_var(LVAR_Hostile) == 2) or (local_var(LVAR_Personal_Enemy) == 1) ) and (self_can_see_dude)) then begin
         ndebug("LVAR_Hostile " + local_var(LVAR_Hostile) + " LVAR_Personal_Enemy " + local_var(LVAR_Personal_Enemy));
         set_local_var(LVAR_Hostile,1);
         ndebug("attacking from hostile or personal");
         attack(dude_obj);
      end
      else if (local_var(LVAR_Said_Sneak) == 0) then begin
         if (self_can_see_dude and (dude_is_sneaking) ) then begin
            call Node006;
         end
      end
      else if ( (global_var(GVAR_GECKO_MELTDOWN) == 1) and (self_can_see_dude)) then begin
         set_local_var(LVAR_Hostile,1);
         attack(dude_obj);
         ndebug("attacking from meltdown");
      end
   end
   //else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_DESTROYED) then begin
   //    attack(dude_obj);
   //end
   //else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_TURNED_OFF) then begin
   //    attack(dude_obj);
   //end
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Personal_Enemy,1);
      //CHANGE -nbk
      set_global_var(GVAR_ENEMY_GECKO,1);
   end
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      ndebug("from pickup");
      set_local_var(LVAR_Hostile,2);
   end
end

procedure push_p_proc begin
//this critter can be pushed
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   GetReaction;

   ndebug("uhh REP_ENEMY_GECKO: " + REP_ENEMY_GECKO + " LVAR_Personal_Enemy: " + local_var(LVAR_Personal_Enemy) );

   if ((REP_ENEMY_GECKO) or (local_var(LVAR_Personal_Enemy) == 1)) then begin
       call Node998;
   end
   else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_REPAIRED) then begin
      if (random(0,1)) then
         call Node004;
      else
         call goarea;
   end
   else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_OPTIMIZED) then begin
      call Node005;
   end
   else
      call goarea;
 end

procedure goarea begin
   if (tile_distance(self_tile, SUPPLYAREA) < 9) then begin
      call Node001;
   end
   else if (tile_distance(self_tile, WORKAREA1) < 6) then begin
      call Node002;
   end
   else if (tile_distance(self_tile, WORKAREA2) < 6) then begin
      call Node002;
   end
   else if (tile_distance(self_tile, WORKAREA3) < 6) then begin
      call Node002;
   end
   else if (tile_distance(self_tile, WORKAREA4) < 6) then begin
      call Node002;
   end
   else begin //any other area
      call Node003;
   end
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin
/* Increment the aligned critter counter*/
   inc_good_critter
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
   //if (action_being_used == SKILL_STEAL) then begin
      //if (is_success(roll_vs_skill(dude_obj,action_being_used,0))) then begin
      //end
   //end
end

procedure Node001 begin
   floater(random(110,116));
end
procedure Node002 begin
   floater(random(120,131));
end
procedure Node003 begin
   floater(random(140,149));
end
procedure Node004 begin
   floater(random(150,154));
end
procedure Node005 begin
   floater(random(160,164));
end
procedure Node006 begin
   set_local_var(LVAR_Said_Sneak,1);
   floater(random(170,178));
end

procedure Node998 begin
   ndebug("hostile from 998");
   set_local_var(LVAR_Hostile,2);
end
/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end
