/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Gordon
        Location: Gecko
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: January 14, 1998

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "gcgordon"
#include "../headers/define.h"
#include "../headers/gecko.h"

#define NAME                    SCRIPT_GCGORDON
#define TOWN_REP_VAR            (GVAR_TOWN_REP_GECKO)
#define floater(x)		float_msg(self_obj, mstr(x),FLOAT_MSG_RED)
#define PID_ECON_DISK           PID_GECKO_DATA_DISK
//#define RECEIVED                1
//#define GIVEN                   2
#define PLANT_UNTOUCHED         0 //need to add plant_untouched to global.h

#include "../headers/command.h"
#include "../headers/modreact.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure combat;

/* Script Specific Procedure Calls */
procedure Node910;
//procedure Node920;
procedure Node995;
procedure Node996;
procedure Node997;
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node028;
procedure Node029;
procedure Node030;
procedure Node031;
procedure Node032;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Give                       (7)
#define LVAR_02_before                  (8)
#define LVAR_22_before                  (9)
#define LVAR_hey_i_gave_disk_already    (10)
#define LVAR_04_before                  (11)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable stuff;
variable k;

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_GECKO);
   set_self_ai(AI_TOUGH_CITIZEN);
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ( ((global_var(GVAR_GECKO_MELTDOWN) == 1) or (global_var(GVAR_ENEMY_GECKO)) ) and (self_can_see_dude)) then begin //edit by killap - added (global_var(GVAR_ENEMY_GECKO))
      set_local_var(LVAR_Hostile,1);
      attack(dude_obj);
   end
   else if ( (local_var(LVAR_Hostile) == 2)  and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
       set_global_var(GVAR_ENEMY_GECKO,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   GetReaction;

   // CHANGE -nbk (Aldo doesn't care if your an enemy of the either side in Klamath)
   //             -he just wants a drink
   if (local_var(LVAR_Personal_Enemy) == 1) then begin
      ndebug("local_var(LVAR_Personal_Enemy) == 1");
       call Node998;
   end

   else if (global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_DESTROYED) then begin
      ndebug("global_var(GVAR_VAULT_PLANT_STATUS) == PLANT_DESTROYED");
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node022;
       gSay_End;
       end_dialogue;
   end

   else if ((dude_is_stupid)) then begin
      ndebug("(dude_is_stupid)");
      call Node001;
   end

   else if (global_var(GVAR_GECKO_ECON_DISK) >= ECON_DISK_RECEIVED) then begin //killap's fix: was 'GIVEN'
      ndebug("global_var(GVAR_GECKO_ECON_DISK) >= GIVEN");
      if (global_var(GVAR_VAULT_PLANT_STATUS) >= PLANT_OPTIMIZED) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
             call Node023; //killap's fix: was 021
         gSay_End;
         end_dialogue;
      end
      else if (global_var(GVAR_VAULT_PLANT_STATUS) >= PLANT_REPAIRED) then begin
         ndebug("global_var(GVAR_VAULT_PLANT_STATUS) >= PLANT_REPAIRED");
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
             call Node021; //killap's fix: was 020
         gSay_End;
         end_dialogue;
      end
      else if (global_var(GVAR_VAULT_PLANT_STATUS) >= PLANT_UNTOUCHED) then begin
         ndebug("global_var(GVAR_VAULT_PLANT_STATUS) >= PLANT_UNTOUCHED");
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
             call Node020; //killap's fix: was 023
         gSay_End;
         end_dialogue;
      end
   end

   else if ( (global_var(GVAR_GECKO_ANKH) == ANKH_GIVEN) or (global_var(GVAR_GECKO_ANKH) == ANKH_TAKEN) ) then begin
      ndebug(" (global_var(GVAR_GECKO_ANKH) == ANKH_GIVEN) or (global_var(GVAR_GECKO_ANKH) == ANKH_TAKEN) ");
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
             call Node024;
       gSay_End;
       end_dialogue;
   end

   else begin
      ndebug("else");
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
             call Node002;
       gSay_End;
       end_dialogue;
   end

end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

procedure combat begin
end

procedure Node910 begin
   if (global_var(GVAR_VAULT_PLANT_STATUS) >= PLANT_REPAIRED) then
      call Node008;
   else
      call Node007;
end

procedure Node912 begin
  set_local_var(LVAR_hey_i_gave_disk_already,1);
  if ( (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_DECLINED_QUEST) or (global_var(GVAR_VAULT_GECKO_PLANT) == 0) ) then
     set_global_var(GVAR_GECKO_ASSIGNED,1);
   if (global_var(GVAR_VAULT_GECKO_PLANT) < PLANT_NEED_PART) then begin
      ndebug("set part needed");
      set_global_var(GVAR_VAULT_GECKO_PLANT, PLANT_NEED_PART);
   end else begin
      ndebug("DIDN'T SET PART NEEDED");
   end
  stuff:=create_object(PID_ECON_DISK,0,0);
  add_obj_to_inven(dude_obj,stuff);
  set_global_var(GVAR_GECKO_ECON_DISK, ECON_DISK_RECEIVED);
end

procedure Node915 begin
   if ( (global_var(GVAR_GECKO_ECON_DISK) == ECON_DISK_RECEIVED) or (global_var(GVAR_GECKO_ECON_DISK) == ECON_DISK_GIVEN) ) then begin
      call Node014;
   end
   else begin
      call Node003;
   end
end

// Unused - killap
procedure Node917 begin
   set_global_var(GVAR_GECKO_ECON_DISK, ECON_DISK_GIVEN);
end

/*
procedure Node910 begin
//if player money < 5 goto 13 and set nogive
//else goto 5 subtract 5 coins and set give
   if (dude_caps > 4) then begin
      dude_caps_adjust(-5); //subtract 5 coins
      set_local_var(LVAR_Give, 1);
      call Node005;
   end
   else begin
      //set_local_var(LVAR_Nogive,1);
      call Node013;
   end
end
*/
procedure Node920 begin
   UpReactTiny;
   call Node008;
end

procedure Node922 begin
   UpReactMinor;
   call Node009;
end

procedure Node924 begin
   UpReactMinor;
   call Node010;
end

procedure Node926 begin
   UpReactMinor;
   call Node011;
end

procedure Node928 begin
   UpReactMinor;
   call Node012;
end

procedure Node930 begin
   UpReactModerate;
   call Node013;
end

procedure Node932 begin
   UpReactTiny;
   call Node999;
end

procedure Node934 begin
   UpReactModerate;
   call Node999;
end

procedure Node936 begin
   set_local_var(LVAR_hey_i_gave_disk_already,1); //added by killap
   if (global_var(GVAR_VAULT_GECKO_PLANT) < PLANT_NEED_PART) then begin
      ndebug("set part needed");
      set_global_var(GVAR_VAULT_GECKO_PLANT, PLANT_NEED_PART);
   end else begin
      ndebug("DIDN'T SET PART NEEDED");
   end
   stuff:=create_object(PID_ECON_DISK,0,0);
   add_obj_to_inven(dude_obj,stuff);
   set_global_var(GVAR_GECKO_ECON_DISK, ECON_DISK_RECEIVED); // Seraph's Fix: changed 'GIVEN' to 'RECEIVED'
   call Node999;
end

procedure Node948 begin
end

procedure Node952 begin
//take part from festus inventory and put it back
//in PC inventory
end

procedure Node958 begin
   if (local_var(LVAR_reaction) > 74) then begin
      call Node025;
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
         call Node025;
      else
         call Node026;
   end
end

procedure Node960 begin
//set take part from PC inventory and add it to festus inventory, set festus = convince
   call Node017;
end

procedure Node962 begin
//move parts requisition form from festus to PC
   call Node999;
end

procedure Node995 begin
   if (dude_charisma >= 7) then begin
       TopReact;
   end
   else begin
       BottomReact;
   end
end

procedure Node996 begin
   BottomReact;
end

procedure Node997 begin
   if (dude_charisma >= 8) then
       call Node004;
   else
       call Node005;
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end

// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   floater(random(110,114));
end

procedure Node002 begin
   if (local_var(LVAR_02_before) == 0) then begin
      set_local_var(LVAR_02_before,1);
      Reply(120);
      NOption(mstr(122) + dude_name + mstr(500),Node915,004);
      NOption(mstr(123) + dude_name + mstr(501),Node999,004);
   end
   else begin
      Reply(mstr(121) + dude_name + mstr(502));
      NOption(124,Node915,004);
      NOption(125,Node999,004);
   end
end

procedure Node003 begin
   Reply(130);
   NOption(131,Node004,004);
end

procedure Node004 begin
   set_local_var(LVAR_04_before,1);
   Reply(135);
   NOption(136,Node005,004);
end

procedure Node005 begin
   Reply(140);
   NOption(141,Node006,004);
end

procedure Node006 begin
   Reply(150);
   NOption(151,Node910,004);
end

procedure Node007 begin
   Reply(160);
   NOption(161,Node009,004);
end

procedure Node008 begin
   Reply(170);
   if (local_var(LVAR_04_before) == 0) then
      NOption(171,Node004,004);
   else if (local_var(LVAR_hey_i_gave_disk_already) == 0) then //added by killap - expansion
      NOption(172,Node007,004);
   NOption(600,Node999,004);
end

procedure Node009 begin
   Reply(180);
   NOption(181,Node010,004);
   NOption(182,Node015,004);
end

procedure Node010 begin
   Reply(190);
   NOption(191,Node011,004);
end

procedure Node011 begin
   Reply(200);
   NOption(201,Node012,004);
end

procedure Node012 begin
   Reply(210);
   NOption(211,Node013,004);
end

procedure Node013 begin
   Reply(220);
   NOption(221,Node017,004);
   if (local_var(LVAR_hey_i_gave_disk_already) == 0) then begin
      if (global_var(GVAR_MCCLURE_KNOWN) == MCCLURE_UNKNOWN) then
         NOption(222,Node018,004);
      else
         NOption(223,Node018,004);
   end

   NOption(224,Node999,004);
end

procedure Node014 begin
   Reply(230);
   NOption(231,Node016,004);
   NOption(232,Node999,004);
end

procedure Node015 begin
   Reply(240);
   NOption(241,Node010,004);
end

procedure Node016 begin
   Reply(250);
   NOption(251,Node005,004);
end

procedure Node017 begin
   Reply(270);
   NOption(271,Node999,004);
   NOption(272,Node019,004);
end

procedure Node018 begin
   Reply(280);
   NOption(281,Node999,004);
   NOption(282,Node912,004); //add econ disk to pc inven & set econ_disk = recieved
end

procedure Node019 begin
   Reply(290);
   NOption(291,Node999,004);
end

procedure Node020 begin
   //if (global_var(GVAR_GECKO_ECON_DISK) >= ECON_DISK_GIVEN) then begin
      Reply(303);
      NOption(304,Node999,004);
      NOption(305,Node999,004);
   //end else begin
   //   Reply(300);
   //   NOption(301,Node032,004);
   //   NOption(302,Node999,004);
   //end
end

procedure Node021 begin
   Reply(310);
   NOption(311,Node999,004);
end

procedure Node022 begin
if (local_var(LVAR_22_before) == 0) then begin
   set_local_var(LVAR_22_before,1);
   Reply(320);
end
else begin
   Reply(321);
end
   NOption(322,Node999,004);
end

procedure Node023 begin
   Reply(330);
   NOption(331,Node999,004);
   NOption(332,Node999,004);
end

procedure Node024 begin
   Reply(340);
   NOption(341,Node025,004);
   NOption(342,Node026,004);
   NOption(343,Node028,004);
   NOption(344,Node999,004);
end

procedure Node025 begin
   Reply(350);
   NOption(351,Node026,004);
   NOption(352,Node030,004);
   NOption(353,Node031,004); //killap's fix: changed from 352
end

procedure Node026 begin
   Reply(360);
   NOption(361,Node028,004);
   NOption(362,Node029,004);
end

procedure Node027 begin
   Reply(370);
   NOption(371,Node029,004);
   NOption(372,Node999,004);
end

procedure Node028 begin
   Reply(380);
   NOption(381,Node936,004); //set econ_disk given
   NOption(382,Node999,004);
end

procedure Node029 begin
   Reply(390);
   NOption(391,Node028,004);
   NOption(392,Node999,004);
end

procedure Node030 begin
   Reply(400);
   NOption(401,Node028,004);
   NOption(402,Node029,004);
   NOption(403,Node999,004);
end

procedure Node031 begin
   Reply(410);
   NOption(411,Node027,004);
   NOption(412,Node027,004);
   NOption(413,combat,004);
   NOption(414,Node027,006);
end

procedure Node032 begin
   Reply(420);
   NOption(421,Node999,004);
   NOption(422,Node999,004);//killap's fix: changed from 004
end
//xxxxxxxxxxxxxxxxxxxx
