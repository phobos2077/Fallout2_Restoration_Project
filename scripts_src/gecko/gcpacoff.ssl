/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Gecko Power Armor Com Officer
        Location: Gecko

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: May 5, 1998
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "gcpacoff"
#include "../headers/define.h"

#define NAME                    SCRIPT_GCPACOFF
#define TOWN_REPUTATION         global_var(GVAR_TOWN_REP_GECKO)

#include "../headers/command.h"
#include "../headers/gecko.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;


procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;

/* Script Specific Procedure Calls */
procedure Node920;
procedure Node930;
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_03_before                  (0)
#define LVAR_04_before                  (1)

/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_invisible; //should never see this critter
   //CHANGE THESE -nbk
   //critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_TEAM_NUM,TEAM_GECKO);
   //critter_add_trait(self_obj,TRAIT_OBJECT,OBJECT_AI_PACKET,AI_TOUGH_CITIZEN);
end

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin
   if (global_var(GVAR_ENCLAVE_COM_LINE) == 0) then begin
      if ((tile_distance(self_tile, dude_tile)) < 9) then begin
         dialogue_system_enter;
      end
   end
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin
   script_overrides;
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   script_overrides;
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   //start_gdialog(NAME,self_obj,4,HEAD_COM_OFFICER,BACKGROUND_ENCLAVE);
   start_gdialog(NAME,self_obj,4,HEAD_COM_OFFICER,BACKGROUND_ENCLAVE);
   gSay_Start;
      call Node001;
   gSay_End;
   end_dialogue;
   destroy_object(self_obj);
end


/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin
   script_overrides;
/* Increment the aligned critter counter*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   //display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   //display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
   script_overrides;
   //if (action_being_used == SKILL_STEAL) then begin
      //if (is_success(roll_vs_skill(dude_obj,action_being_used,0))) then begin
      //end
   //end
end

procedure Node001 begin
   Reply(103);
   NOption(104,Node002,004);
   NOption(105,Node002,004);
   GOption(106,Node003,007);
   NOption(107,Node999,004);
end

procedure Node002 begin
   Reply(108);
   NOption(109,Node004,004);
   NOption(110,Node005,004);
   NOption(111,Node006,004);
   NOption(112,Node007,004);
end

procedure Node003 begin
   if (local_var(LVAR_03_before) == 1) then begin
      Reply(114);
   end
   else begin
      set_local_var(LVAR_03_before,1);
      Reply(113);
      NOption(115,Node005,004);
   end
   NOption(116,Node920,004);
   BOption(117,Node006,004);
   NOption(118,Node930,004);
   BOption(119,Node999,004);
end


procedure Node004 begin
   if (local_var(LVAR_04_before) == 1) then begin
      Reply(127);
      NOption(131,Node999,004);
   end
   else begin
      set_local_var(LVAR_04_before,1);
      Reply(126);
      NOption(128,Node014,004);
      BOption(129,Node014,004);
      BOption(130,Node014,004);
   end
   NOption(132,Node999,004);
end

procedure Node005 begin
   Reply(133);
   NOption(134,Node003,004);
   NOption(135,Node003,004);
   NOption(136,Node999,004);
end

procedure Node006 begin
   Reply(137);
   BOption(138,Node004,004);
   BOption(139,Node004,004);
   NOption(140,Node008,004);
   BOption(141,Node999,004);
end

procedure Node007 begin
   Reply(142);
   NOption(143,Node004,004);
   NOption(144,Node019,004);
   NOption(145,Node999,004);
end

procedure Node008 begin
   Reply(146);
   NOption(147,Node010,004);
   NOption(148,Node011,004);
   NOption(149,Node999,004);
end

procedure Node009 begin
   Reply(150);
   NOption(151,Node013,004);
   NOption(152,Node020,004);
end

procedure Node010 begin
   Reply(153);
   NOption(154,Node012,004);
   NOption(155,Node004,004);
   NOption(156,Node999,004);
end

procedure Node011 begin
   Reply(157);
   NOption(158,Node013,004);
   NOption(159,Node999,004);
end

procedure Node012 begin
   Reply(160);
   BOption(164,Node004,004);
   NOption(165,Node999,004);
end

procedure Node013 begin
   Reply(166);
   BOption(167,Node004,004);
   BOption(168,Node006,004);
   NOption(169,Node999,004);
end

procedure Node014 begin
   set_global_var(GVAR_ENCLAVE_SENT,1); //added by killap - expansion pack
   Reply(170);
   BOption(171,Node015,004);
   BOption(172,Node016,004);
   BOption(173,Node015,004);
end

procedure Node015 begin
   Reply(174);
   NOption(175,Node016,004);
   NOption(176,Node016,004);
   NOption(177,Node999,004);
end

procedure Node016 begin
   Reply(178);
   NOption(180,Node017,004);
   NOption(181,Node999,004);
end

procedure Node017 begin
   Reply(182);
   NOption(183,Node018,004);
   NOption(184,Node018,004);
   BOption(185,Node018,004);
   BOption(186,Node999,004);
end

procedure Node018 begin
   Reply(187);
   NOption(189,Node999,004);
   NOption(190,Node999,004);
end

procedure Node019 begin
   Reply(191);
   BOption(192,Node004,004);
   NOption(193,Node004,004);
   BOption(194,Node999,004);
end

procedure Node020 begin
   Reply(195);
   NOption(196,Node012,004);
   NOption(197,Node013,004);
   NOption(198,Node999,004);
end

procedure Node920 begin
//Roll Speech if successful goto 22 else goto 23
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, -20))) then
       call Node008;
   else
       call Node004;
end

procedure Node930 begin
//Roll Speech if successful goto 22 else goto 23
   if (is_success(roll_vs_skill(dude_obj, SKILL_SPEECH, 0))) then
       call Node008;
   else
       call Node004;
end

procedure Node998 begin
end
/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end
