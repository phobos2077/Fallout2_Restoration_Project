/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Festus
        Location: Gecko
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: January 14, 1998

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "gcfestus"
#include "../headers/define.h"
#include "../headers/gecko.h"

#define NAME                    SCRIPT_GCFESTUS
#define TOWN_REP_VAR            (GVAR_TOWN_REP_GECKO)
#define floater(x)		float_msg(self_obj, mstr(x),FLOAT_MSG_RED)
//these are values for festus...will need to be put in map or global defines
#define FESTUS_INSTALLED 0
#define CONVINCE         1
#define MORE_CONVINCE    2
#define USE_PART         3
#define CHICKEN          4
#define REFUSED          5

#include "../headers/command.h"
#include "../headers/modreact.h"

#define Vault_Known             (1)     // Temp Until get command from Jesse
#define Visited_City            (1)     // Temp Until get command from Jesse

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure aconvinced;
procedure bconvinced;
procedure cconvinced;

/* Script Specific Procedure Calls */
//procedure Node910;
//procedure Node920;
procedure Node910;
procedure Node912;
procedure Node922;
procedure Node924;
procedure Node926;
procedure Node928;
procedure Node930;
procedure Node932;
procedure Node934;
procedure Node942;
procedure Node944;
procedure Node950;
procedure Node952;
procedure Node954;
procedure Node956;
procedure Node958;
procedure Node960;
procedure Node962;
procedure Node946;
procedure Node980;
procedure Node992;
procedure Node995;
procedure Node996;
procedure Node997;
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node029;
procedure Node030;
procedure Node30a;
procedure Node031;
procedure Node032;
procedure Node033;
procedure Node034;
procedure Node035;
procedure Node036;
procedure Node037;
procedure Node038;
procedure Node039;
procedure Node040;
procedure Node041;
procedure Node042;
procedure Node043;
procedure Node044;
procedure Node045;
procedure Node046;
procedure Node047;
procedure Node050;
procedure Node060;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Give                       (7)
#define LVAR_Festus                     (8)
#define LVAR_02_before                  (9)
//#define LVAR_30_before                  (10)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable k;
variable times_at_04:=0;
variable times_at_05:=0;
variable times_at_06:=0;
variable item;

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_GECKO);
   set_self_ai(AI_TOUGH_CITIZEN);
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */
   if (self_can_see_dude) then begin
      if ((global_var(GVAR_GECKO_MELTDOWN) == 1) or (global_var(GVAR_ENEMY_GECKO))) then begin //edit by killap - added (global_var(GVAR_ENEMY_GECKO))
         set_local_var(LVAR_Hostile,1);
         attack(dude_obj);
      end
      else if (local_var(LVAR_Hostile) == 2) then begin
          set_local_var(LVAR_Hostile,1);
          attack(dude_obj);
      end
   end
/*
   if ( (global_var(GVAR_GECKO_MELTDOWN) == 1) and (self_can_see_dude)) then begin
      set_local_var(LVAR_Hostile,1);
      attack(dude_obj);
   end
   else if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end
*/
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
       set_global_var(GVAR_ENEMY_GECKO,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   GetReaction;

   if (local_var(LVAR_Personal_Enemy) == 1) then begin
       call Node998;
   end

   else if (global_var(GVAR_GECKO_WORKING_ON_PLANT) > 0) then begin
      //floater(400);
      float_msg(self_obj, mstr(400),FLOAT_MSG_NORMAL); //edit by killap
   end

   else if ((dude_is_stupid)) then begin
      call Node001;
   end

   else if (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_OPTIMIZED) then begin
       call Node047;
   end

   else if ( (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_REACTOR_DATA_ANALYZED) and
             (dude_item_count(PID_REACTOR_DATA_DISK)) ) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node046;
       gSay_End;
       end_dialogue;
   end

   else if ( (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_REACTOR_DATA_RECEIVED) and
             (global_var(GVAR_GECKO_ECON_DISK) == ECON_DISK_RECEIVED) ) then begin //received //fixed by killap
      call Node045;
   end

   else if (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_REACTOR_DATA_RECEIVED) then begin
      call Node044;
   end

   else if (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_REPAIRED) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node003;
       gSay_End;
       end_dialogue;
   end

   else if (local_var(LVAR_Festus) == CHICKEN) then begin
      call Node027;
   end

   else if (local_var(LVAR_Festus) == USE_PART) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node017;
       gSay_End;
       end_dialogue;
   end

   else if (local_var(LVAR_Festus) == MORE_CONVINCE) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node016;
       gSay_End;
       end_dialogue;
   end

   else if (local_var(LVAR_Festus) == CONVINCE) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node015;
       gSay_End;
       end_dialogue;
   end

   else if ((local_var(LVAR_Festus) < CHICKEN) and (dude_item_count(PID_HY_MAG_PART)) ) then begin
//else if PC has part to repair the reactor
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node014;
       gSay_End;
       end_dialogue;
   end

   else if (global_var(GVAR_GECKO_SKEETER_PART) == SKEETER_ASKED) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node031;
       gSay_End;
       end_dialogue;
   end

   else begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node002;
       gSay_End;
       end_dialogue;
   end

end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

procedure Node910 begin
   ndebug("Node910");
   gfade_out(600);
   game_time_advance(game_ticks(k*360)); //6 minutes
   gfade_in(600);
   display_msg(mstr(500));
end

procedure Node912 begin
   ndebug("Node912");
   gfade_out(600);
   game_time_advance(game_ticks(k*1080)); //18 minutes
   gfade_in(600);
   display_msg(mstr(530));
end

/*
procedure Node910 begin
//if player money < 5 goto 13 and set nogive
//else goto 5 subtract 5 coins and set give
   if (dude_caps > 4) then begin
      dude_caps_adjust(-5); //subtract 5 coins
      set_local_var(LVAR_Give, 1);
      call Node005;
   end
   else begin
      //set_local_var(LVAR_Nogive,1);
      call Node013;
   end
end
*/

procedure Node920 begin
   UpReactTiny;
   call Node008;
end

procedure Node922 begin
   UpReactMinor;
   call Node009;
end

procedure Node924 begin
   UpReactMinor;
   call Node010;
end

procedure Node926 begin
   UpReactMinor;
   call Node011;
end

procedure Node928 begin
   UpReactMinor;
   call Node012;
end

procedure Node930 begin
   UpReactModerate;
   call Node013;
end

procedure Node932 begin
   UpReactTiny;
   call Node999;
end

procedure Node934 begin
   UpReactModerate;
   call Node999;
end

procedure Node940 begin
   ndebug("Node940");
   if (local_var(LVAR_reaction) > 74) then begin
      call Node033;
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
         call Node033;
      else
         call Node034;
   end
end

procedure Node942 begin
   ndebug("Node942");
   if (local_var(LVAR_reaction) > 94) then begin
      call Node033;
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
         call Node033;
      else
         call Node034;
   end
end

procedure Node944 begin
   ndebug("Node944");
   if (local_var(LVAR_reaction) < 74) then begin
      call Node033;
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
         call Node033;
      else
         call Node034;
   end
end

procedure Node946 begin
   ndebug("Node946");
   if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
      call Node033;
   else
      call Node035;
end

procedure Node948 begin
end

procedure aconvinced begin
   ndebug("NodeACON");
//move festus 1/3 of the way into the reactor core
call Node910;
set_local_var(LVAR_Festus, MORE_CONVINCE);
call Node028;
end

procedure bconvinced begin
   ndebug("NodeBCON");
//move festus 2/3 of the way into the reactor core
call Node910;
set_local_var(LVAR_Festus, USE_PART);
call Node029;
end

procedure cconvinced begin
   ndebug("NodeCCON");
//move festus all the way into the reactor core
call Node912;
set_local_var(LVAR_Festus, CONVINCE);
call Node030;
end

procedure Node950 begin
   ndebug("Node950");
   if (local_var(LVAR_reaction) > 74) then begin
      call aconvinced;
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
         call aconvinced;
      else
         call Node026;
   end
end

procedure Node952 begin
   ndebug("Node952");
   display_msg(mstr(520));
//JUST DONT TAKE PART UNLESS FESTUS ACTUALLY FIXES REACTOR -NBK
//take part from festus inventory and put it back
//in PC inventory
end

procedure Node954 begin
   ndebug("Node954");
   if (local_var(LVAR_reaction) > 84) then begin
      call bconvinced;
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
         call bconvinced;
      else
         call Node026;
   end
end

procedure Node956 begin
   ndebug("Node956");
   if (local_var(LVAR_reaction) > 94) then begin
      call cconvinced;
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
         call cconvinced;
      else
         call Node026;
   end
end

procedure Node958 begin
   ndebug("Node958");
   if (local_var(LVAR_reaction) > 74) then begin
      call Node025;
   end
   else begin
      if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0))) then
         call Node025;
      else
         call Node026;
   end
end

procedure Node960 begin
   ndebug("Node960");
   call Node910;
   set_local_var(LVAR_Festus,CONVINCE);
//JUST DONT TAKE PART UNLESS FESTUS ACTUALLY FIXES REACTOR -NBK
//set take part from PC inventory and add it to festus inventory, set festus = convince
   call Node017;
end

procedure Node962 begin
   ndebug("Node962");
//if (obj_is_carrying_obj_pid(self_obj, PID_PART_REQUISITION_FORM)) then begin
   //item:=create_object(PID_PART_REQUISITION_FORM,0,0);
   item:=self_item(PID_PART_REQUISITION_FORM);
   rm_obj_from_inven(self_obj,item);
   add_obj_to_inven(dude_obj,item);
//end
//move parts requisition form from festus to PC
   call Node999;
end

procedure Node980 begin
   ndebug("Node980");
   set_local_var(LVAR_Festus,CHICKEN);
   call Node999;
end

//procedure Node990 begin
//   inc_general_rep(-5);
//end

procedure Node992 begin
   ndebug("Node992");
  item:=create_object(PID_REACTOR_DATA_DISK,0,0);
  add_obj_to_inven(dude_obj,item);
  set_global_var(GVAR_VAULT_GECKO_PLANT, PLANT_REACTOR_DATA_RECEIVED);
end

procedure Node995 begin
   if (dude_charisma >= 7) then begin
       TopReact;
   end
   else begin
       BottomReact;
   end
end

procedure Node996 begin
   BottomReact;
end

procedure Node997 begin
   if (dude_charisma >= 8) then
       call Node004;
   else
       call Node005;
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end

// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   ndebug("Node001");
   /*k := random(1,5);
   if (k == 1) then floater(110);
   else if (k == 2) then floater(111);
   else if (k == 3) then floater(112);
   else if (k == 4) then floater(113);
   else if (k == 5) then floater(114);*/

   floater(random(110,114)); //edit by killap

end

procedure Node002 begin
   ndebug("Node002");
   if (local_var(LVAR_02_before) == 0) then begin
       set_local_var(LVAR_02_before,1);
       Reply(120);
   end
   else
      Reply(121);

   //Reply(mstr(300) + dude_name + mstr(301));
   NOption(122,Node004,004);
   if (dude_item_count(PID_REACTOR_DATA_DISK)) then begin
      NOption(600,Node050,004);
   end

   if (global_var(GVAR_VAULT_GECKO_PLANT) != PLANT_REPAIRED) then
      NOption(123,Node018,004);
   NOption(124,Node036,004);
   NOption(125,Node999,004);
end

procedure Node003 begin
   ndebug("Node003");
   Reply(131);
   NOption(132,Node038,004);
   NOption(133,Node999,004);
end

procedure Node004 begin
   ndebug("Node004");
   if (times_at_04 == 0) then begin
      times_at_04 := times_at_04 + 1;
      Reply(141);
   end
   else begin
      Reply(142);
   end
   if (times_at_05 == 0) then
      NOption(143,Node005,004);
   if (times_at_06 == 0) then
      NOption(144,Node006,004);
   NOption(145,Node007,004);
end

procedure Node005 begin
   ndebug("Node005");
   times_at_05 := 1; //mark that we've been here
   Reply(150);
   NOption(151,Node004,004);
   NOption(152,Node007,004);
end

procedure Node006 begin
   ndebug("Node006");
   times_at_06 := 1; //mark that we've been here
   Reply(160);
   NOption(161,Node004,004);
   NOption(162,Node007,004);
end

procedure Node007 begin
   ndebug("Node007");
   Reply(170);
   GOption(171,Node920,004);
   NOption(172,Node999,004);
end

procedure Node008 begin
   ndebug("Node008");
   Reply(180);
   GOption(181,Node922,004);
   NOption(182,Node999,004);
end

procedure Node009 begin
   ndebug("Node009");
   Reply(190);
   GOption(191,Node924,004);
   NOption(192,Node999,004);
end

procedure Node010 begin
   ndebug("Node010");
   Reply(200);
   GOption(201,Node926,004);
   NOption(202,Node999,004);
end

procedure Node011 begin
   ndebug("Node011");
   Reply(210);
   GOption(211,Node928,004);
   NOption(212,Node999,004);
end

procedure Node012 begin
   ndebug("Node012");
   Reply(220);
   GOption(221,Node930,004);
   NOption(222,Node999,004);
end

procedure Node013 begin
   ndebug("Node013");
   Reply(230);
   GOption(231,Node934,004);
   NOption(232,Node999,004);
end

procedure Node014 begin
   ndebug("Node014");
   Reply(240);
   GOption(241,Node022,004);
   NOption(242,Node999,004);
end

procedure Node015 begin
   ndebug("Node015");
   Reply(250);
   GOption(251,Node950,004);
   NOption(252,Node952,004);
end

procedure Node016 begin
   ndebug("Node016");
   Reply(260);
   NOption(261,Node954,004);
   NOption(262,Node952,004);
end

procedure Node017 begin
   ndebug("Node017");
   Reply(270);
   NOption(271,Node956,004);
   NOption(272,Node952,004);
end

procedure Node018 begin
   ndebug("Node018");
   Reply(300);
   NOption(301,Node019,004);
   NOption(302,Node004,004);
end

procedure Node019 begin
   ndebug("Node019");
   Reply(310);
   NOption(311,Node020,004);
   NOption(312,Node999,004);
end

procedure Node020 begin
   ndebug("Node020");
   Reply(320);
   NOption(321,Node021,004);
end

procedure Node021 begin
   ndebug("Node021");
   Reply(330);
   GOption(331,Node932,004);
   NOption(332,Node999,004);
end

procedure Node022 begin
   ndebug("Node022");
   Reply(340);
   NOption(341,Node023,004);
   NOption(342,Node958,004);
end

procedure Node023 begin
   ndebug("Node023");
   Reply(350);
   NOption(351,Node024,004);
   NOption(352,Node999,004);
end

procedure Node024 begin
   ndebug("Node024");
   Reply(360);
   NOption(361,Node958,004);
end

procedure Node025 begin
   ndebug("Node025");
   Reply(370);
   NOption(371,Node960,004);
   NOption(372,Node999,004);
end

procedure Node026 begin
   ndebug("Node026");
   Reply(380);
   NOption(381,Node980,001);
end

procedure Node027 begin
   ndebug("Node027");
   set_local_var(LVAR_Festus, REFUSED);
   /*k := random(1,5);
   if (k == 1) then floater(390);
   else if (k == 2) then floater(391);
   else if (k == 3) then floater(392);
   else if (k == 4) then floater(393);
   else if (k == 5) then floater(394);*/

   float_msg(self_obj, mstr(random(390,394)),FLOAT_MSG_NORMAL); //edit by killap


//floats
end

procedure Node028 begin
   ndebug("Node028");
   Reply(400);
   NOption(401,Node999,004);
end

procedure Node029 begin
   ndebug("Node029");
   Reply(410);
   NOption(411,Node999,004);
end

procedure Node030 begin
   ndebug("Node030");
   Reply(random(420,425));
   NOption(510,Node30a,001);
end

procedure Node30a begin
   ndebug("Node30a");
   //if (local_var(LVAR_30_before) == 0) then begin
   //   set_local_var(LVAR_30_before, 1);
      item:=dude_item(PID_HY_MAG_PART);
      rm_obj_from_inven(dude_obj,item);
      destroy_object(item);
      set_local_var(LVAR_Festus, FESTUS_INSTALLED);
      set_global_var(GVAR_VAULT_GECKO_PLANT, PLANT_REPAIRED);
      set_global_var(GVAR_VAULT_PLANT_STATUS, PLANT_REPAIRED);
      display(mstr(700));
      k:=EXP_FESTUS_REPAIR_BONUS + EXP_REPAIR_REACTOR;
      give_xp(k);
      GC_REP_ADJUST(40)
      inc_general_rep(REP_BONUS_GC_PLANT_REPAIRED);
   //end
end

procedure Node031 begin
   ndebug("Node031");
   Reply(430);
   NOption(431,Node032,004);
   NOption(432,Node004,004);
end

procedure Node032 begin
   ndebug("Node032");
   Reply(440);
   NOption(441,Node940,004);
   NOption(442,Node942,004);
   BOption(443,Node944,004);
   NOption(444,Node946,007);
end

procedure Node033 begin
   ndebug("Node033");
   if (self_item_count(PID_PART_REQUISITION_FORM)) then begin
      Reply(450);
      NOption(452,Node962,004);
   end
   else begin
      Reply(451);
      NOption(453,Node999,007);
   end
end

procedure Node034 begin
   ndebug("Node034");
   Reply(460);
   NOption(461,Node999,004);
   BOption(462,Node999,004);
end

procedure Node035 begin
   ndebug("Node036");
   Reply(470);
   NOption(471,Node031,004);
   BOption(472,Node999,004);
end

procedure Node036 begin
   ndebug("Node036");
   Reply(480);
   NOption(481,Node037,004);
end

procedure Node037 begin
   ndebug("Node037");
   Reply(490);
   NOption(491,Node002,004);
end

procedure Node038 begin
   ndebug("Node038");
   set_global_var(GVAR_QUEST_OPTIMIZE_POWER_PLANT, OPTIMIZE_POWER_PLANT_ACCEPT);
   Reply(800);
   NOption(801,Node039,004);
end

procedure Node039 begin
   ndebug("Node039");
   Reply(802);
   NOption(803,Node040,004);
   if (global_var(GVAR_VAULT_GECKO_PLANT) == PLANT_REACTOR_DATA_RECEIVED) then
      GOption(804,Node041,004);
   BOption(805,Node999,004);
end

procedure Node040 begin
   ndebug("Node040");
   Reply(806);
   GOption(807,Node042,004);
   BOption(808,Node999,004);
end

procedure Node041 begin
   ndebug("Node041");
   Reply(809);
   GOption(810,Node042,004);
   BOption(811,Node999,004);
end

procedure Node042 begin
   ndebug("Node042");
   Reply(812);
   GOption(813,Node043,004);
   BOption(814,Node999,004);
end

procedure Node043 begin
   ndebug("Node043");
   Reply(815);
   GOption(816,Node992,004);
end

procedure Node044 begin
   ndebug("Node044");
   //floater(random(817,820));

   float_msg(self_obj, mstr(random(817,820)),FLOAT_MSG_NORMAL); //edit by killap

end

procedure Node045 begin
   ndebug("Node045");
   //floater(random(821,824));

   float_msg(self_obj, mstr(random(821,824)),FLOAT_MSG_NORMAL); //edit by killap

end

procedure Node046 begin
   ndebug("Node046");
   Reply(825);
   GOption(826,Node999,004);
   NOption(827,Node999,004);
end

procedure Node047 begin
   ndebug("Node047");
   //floater(random(828,831));
   float_msg(self_obj, mstr(random(828,831)),FLOAT_MSG_NORMAL); //edit by killap
end

procedure Node050 begin
   ndebug("Node050");
   Reply(610);
   NOption(620,Node060,004);
   NOption(630,Node999,004);
end

procedure Node060 begin
   ndebug("Node060");
   gfade_out(600);
   game_time_advance(game_ticks(k*360)); //6 minutes
   gfade_in(600);
   Reply(640);
   NOption(650,Node999,004);
end
//xxxxxxxxxxxxxxxxxxxx
