/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location:
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "qipzltrm"
#include "../headers/define.h"
#include "../headers/enctrp.h"

#define NAME                    SCRIPT_QIPZLTRM

#include "../headers/command.h"

#define In_Trap_Room(who)       tile_in_tile_rect(17520,17490,23520,23490,tile_num(who))
#define DMG_HIGH                (40)
#define DMG_LOW                 (20)

procedure start;
procedure use_skill_on_p_proc;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;

procedure Term1;
procedure Term2;
procedure Term3;

procedure Term4;
procedure Term5;
procedure Term6;

procedure Term7;
procedure Term8;
procedure Term9;

procedure Zark_Party;

procedure Egg_Science;
procedure Egg_Repair;
procedure Egg_Outdoorsman;
procedure Egg_Gambling;
procedure Egg_Throwing;
procedure Egg_First_Aid;
procedure Egg_Doctor;
procedure Egg_Traps;
procedure Egg_Conversant;

#define LVAR_Term_Num           (0)
#define LVAR_Special_Num        (1)             // Easter Egg Item Number

procedure start begin
end

procedure map_enter_p_proc begin
   if (local_var(LVAR_Term_Num) == 0) then begin
       set_local_var(LVAR_Term_Num,self_tile);
   end

   if (local_var(LVAR_Special_Num) == 0) then begin
       inc_map_var(MVAR_Egg_Counter);
       set_local_var(LVAR_Special_Num,map_var(MVAR_Egg_Counter));

       if (map_var(MVAR_Egg_Counter) == 9) then begin
           set_map_var(MVAR_Egg_Counter,random(1,9));
           ndebug("MVAR_Egg_Counter == "+map_var(MVAR_Egg_Counter));
       end
   end

   if ((self_tile == TERM_1) and (map_var(MVAR_Electric_Floor) == FLOOR_ACTIVE) and (not(is_loading_game))) then begin
/*       display_msg(mstr(120));
       if (In_Trap_Room(dude_obj)) then begin
           critter_dmg(dude_obj,random(DMG_LOW,DMG_HIGH),DMG_electrical);
       end

       call Zark_Party;
*/
       add_timer_event(self_obj,game_ticks(10),1);
   end
end

procedure timed_event_p_proc begin
   if (map_var(MVAR_Electric_Floor) == FLOOR_ACTIVE) then begin
       display_msg(mstr(120));
       if (In_Trap_Room(dude_obj)) then begin
           critter_dmg(dude_obj,random(DMG_LOW,DMG_HIGH),DMG_electrical);
       end

       call Zark_Party;

       add_timer_event(self_obj,game_ticks(10),1);
   end
end

procedure use_skill_on_p_proc begin
   ndebug("Action_being_used == "+action_being_used+". Skill_Repair == "+SKILL_REPAIR);
   ndebug("map_var(MVAR_Found_Easter_Egg) == "+map_var(MVAR_Found_Easter_Egg)+". EGG_HIDDEN == "+EGG_HIDDEN);
   ndebug("local_var(LVAR_Special_Num) == "+local_var(LVAR_Special_Num)+". map_var(MVAR_Egg_Counter) == "+map_var(MVAR_Egg_Counter));

   if ((action_being_used == SKILL_REPAIR) and (map_var(MVAR_Found_Easter_Egg) == EGG_HIDDEN) and (local_var(LVAR_Special_Num) == map_var(MVAR_Egg_Counter))) then begin
       set_map_var(MVAR_Found_Easter_Egg,EGG_FOUND);

       if (is_success(roll_vs_skill(dude_obj,SKILL_SCIENCE,-20))) then begin


           if ((has_skill(dude_obj,SKILL_SCIENCE) > 99) and (is_skill_tagged(SKILL_SCIENCE))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_Science;
           end

           else if ((has_skill(dude_obj,SKILL_REPAIR) > 99) and (is_skill_tagged(SKILL_REPAIR))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_Repair;
           end

           else if ((has_skill(dude_obj,SKILL_OUTDOORSMAN) > 99) and (is_skill_tagged(SKILL_OUTDOORSMAN))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_Outdoorsman;
           end

           else if ((has_skill(dude_obj,SKILL_GAMBLING) > 99) and (is_skill_tagged(SKILL_GAMBLING))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_Gambling;
           end

           else if ((has_skill(dude_obj,SKILL_THROWING) > 99) and (is_skill_tagged(SKILL_THROWING))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_Throwing;
           end

           else if ((has_skill(dude_obj,SKILL_FIRST_AID) > 99) and (is_skill_tagged(SKILL_FIRST_AID))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_First_Aid;
           end

           else if ((has_skill(dude_obj,SKILL_DOCTOR) > 99) and (is_skill_tagged(SKILL_DOCTOR))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_Doctor;
           end

           else if ((has_skill(dude_obj,SKILL_TRAPS) > 99) and (is_skill_tagged(SKILL_TRAPS))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_Traps;
           end

           else if ((has_skill(dude_obj,SKILL_SPEECH) > 99) and (is_skill_tagged(SKILL_SPEECH))) then begin
               script_overrides;
               display_msg(mstr(110));
               call Egg_Conversant;
           end

       end      // end of if (is_success(roll_vs_skill(dude_obj,SKILL_SCIENCE,-20))) then begin
   end
end

procedure use_p_proc begin
   script_overrides;

   display_msg(mstr(102));

   if (self_tile == TERM_1) then
       call Term1;
   else if (self_tile == TERM_2) then
       call Term2;
   else if (self_tile == TERM_3) then
       call Term3;
   else if (self_tile == TERM_4) then
       call Term4;
   else if (self_tile == TERM_5) then
       call Term5;
   else if (self_tile == TERM_6) then
       call Term6;
   else if (self_tile == TERM_7) then
       call Term7;
   else if (self_tile == TERM_8) then
       call Term8;
   else if (self_tile == TERM_9) then
       call Term9;
end

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end


procedure Term1 begin
   variable Door_Ptr;

   ndebug("Terminal 1 Used");

   if (tile_contains_obj_pid(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 1s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 2s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 3s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 7e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_1E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 1e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_1E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 2e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

end

procedure Term2 begin
   variable Door_Ptr;

   ndebug("Terminal 2 Used");

   if (tile_contains_obj_pid(DOOR_1E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 1e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_1E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 7e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 2e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2N,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 2n");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2N,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 4w");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 6e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_8S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 8s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_8S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end
end

procedure Term3 begin
   variable Door_Ptr;

   ndebug("Terminal 3 Used");


   if (tile_contains_obj_pid(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 3s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 4s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 3s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 4w");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 6e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 4e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end
end

procedure Term4 begin
   variable Door_Ptr;

   ndebug("Terminal 4 Used");

   if (tile_contains_obj_pid(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4w");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 5e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 6e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 3s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 2s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 1s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 4s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 5s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 6s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end
end

procedure Term5 begin
   variable Door_Ptr;

   ndebug("Terminal 5 Used");

   if (tile_contains_obj_pid(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4w");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 3s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 5e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 2s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 1s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 4e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end
end

procedure Term6 begin
   variable Door_Ptr;

   ndebug("Terminal 6 Used");

   if (tile_contains_obj_pid(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4w");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 5e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 2s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 6e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 3s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 4e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end


   if (tile_contains_obj_pid(DOOR_4S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 4s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 5s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 6s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end
end

procedure Term7 begin
   variable Door_Ptr;

   ndebug("Terminal 7 Used");

   if (tile_contains_obj_pid(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4w");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 5s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 7e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 2s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 1s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 5e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end
end

procedure Term8 begin
   variable Door_Ptr;

   ndebug("Terminal 8 Used");

   if (tile_contains_obj_pid(DOOR_8E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 8e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_8E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 6s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 6e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 3s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Close Door 5s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 5e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Close Door 7e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_close(Door_Ptr);
       obj_lock(Door_Ptr);
   end
end

procedure Term9 begin
   variable Door_Ptr;

   ndebug("Terminal 9 Used");

   if (tile_contains_obj_pid(DOOR_2N,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 2n");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2N,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4w");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_8S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 8s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_8S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 6e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

end


procedure Egg_Science begin
   variable Door_Ptr;

   ndebug("Launched Science Easter Egg!");

   if (tile_contains_obj_pid(DOOR_1E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 1e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_1E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 1s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_1S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2N,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 2n");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2N,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 2e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 2s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_2S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 3s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_3S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 4s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 4w");
       Door_Ptr:=tile_contains_pid_obj(DOOR_4W,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 5e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 5s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_5S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 6e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_6S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 6s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_6S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 7e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_7E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_8E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS)) then begin
       ndebug("Open Door 8e");
       Door_Ptr:=tile_contains_pid_obj(DOOR_8E,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_NS);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end

   if (tile_contains_obj_pid(DOOR_8S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW)) then begin
       ndebug("Open Door 8s");
       Door_Ptr:=tile_contains_pid_obj(DOOR_8S,self_elevation,PID_ENCLAVE_PUZZLE_DOOR_EW);
       obj_unlock(Door_Ptr);
       obj_open(Door_Ptr);
   end
end

procedure Egg_Repair begin
   variable item;

   ndebug("Launched Repair Easter Egg!");

   set_map_var(MVAR_Electric_Floor,FLOOR_ACTIVE);

   item:=create_object(PID_MAGIC_8_BALL,0,0);
   add_obj_to_inven(dude_obj,item);
end

procedure Egg_Outdoorsman begin
   variable item;

   ndebug("Launched Outdoorsman Easter Egg!");

   item:=create_object(PID_YK42B_PULSE_RIFLE,0,0);
   add_obj_to_inven(dude_obj,item);
end

procedure Egg_Gambling begin
   variable item;

   ndebug("Launched Gambling Easter Egg!");

   item:=create_object(PID_MARKED_DECK_OF_CARDS,0,0);
   add_obj_to_inven(dude_obj,item);

   item:=create_object(PID_LOADED_DICE,0,0);
   add_obj_to_inven(dude_obj,item);

   dude_caps_adjust(random(2000,5000));
end

procedure Egg_Throwing begin
   variable item;

   ndebug("Launched Throwing Easter Egg!");

   item:=create_object(PID_PLASMA_GRENADE,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(10,20));
end

procedure Egg_First_Aid begin
   variable item;

   ndebug("Launched First Aid Easter Egg!");

   item:=create_object(PID_STIMPAK,0,0);
   add_obj_to_inven(dude_obj,item);

   item:=create_object(PID_MENTATS,0,0);
   add_obj_to_inven(dude_obj,item);

   item:=create_object(PID_FIRST_AID_KIT,0,0);
   add_obj_to_inven(dude_obj,item);

   item:=create_object(PID_BUFFOUT,0,0);
   add_obj_to_inven(dude_obj,item);

   item:=create_object(PID_PSYCHO,0,0);
   add_obj_to_inven(dude_obj,item);
end

procedure Egg_Doctor begin
   variable item;

   ndebug("Launched Doctor Easter Egg!");

   item:=create_object(PID_STIMPAK,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(2,4));

   item:=create_object(PID_DOCTORS_BAG,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(1,2));

   item:=create_object(PID_PSYCHO,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(2,4));

   item:=create_object(PID_SUPER_STIMPAK,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(2,4));

   item:=create_object(PID_JET,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(2,4));

   item:=create_object(PID_HYPO_POISON,0,0);
   add_mult_objs_to_inven(dude_obj,item,1);

   item:=create_object(PID_MEDICAL_SUPPLIES,0,0);
   add_mult_objs_to_inven(dude_obj,item,1);

   item:=create_object(PID_BUFFOUT,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(2,4));
end

procedure Egg_Traps begin
   variable item;

   ndebug("Launched Traps Easter Egg!");

   item:=create_object(PID_MOTION_SENSOR,0,0);
   add_mult_objs_to_inven(dude_obj,item,1);

   item:=create_object(PID_ELEC_LOCKPICK_MKII,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(2,4));

   item:=create_object(PID_DYNAMITE,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(2,4));

   item:=create_object(PID_PLASTIC_EXPLOSIVES,0,0);
   add_mult_objs_to_inven(dude_obj,item,random(2,4));
end

procedure Egg_Conversant begin
   variable item;

   ndebug("Launched Speech Easter Egg!");

   item:=create_object(PID_ALIEN_LASER_PISTOL,0,0);
   add_obj_to_inven(dude_obj,item);
end

procedure Zark_Party begin
    variable who;
    foreach who in party_member_list_critters begin
        if In_Trap_Room(who) and who != dude_obj then critter_dmg(who, random(DMG_LOW,DMG_HIGH),DMG_electrical);
    end
end
