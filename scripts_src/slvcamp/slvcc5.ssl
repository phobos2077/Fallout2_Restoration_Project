/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "slvcc5"
#include "../headers/define.h"

#define NAME                    SCRIPT_SLVCC5

#include "../headers/den.h"
#include "../headers/slvcamp.h"
#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;

procedure Node900;
procedure Node901;

procedure Node999;
procedure Node998;
procedure Node092;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Flags                      (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Can_Check_Slaves           (7)
#define LVAR_Force_Talk                 (8)
#define LVAR_Home_Tile                  (9)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/
import variable GUARD_obj;


procedure start begin
   GUARD_obj := self_obj;
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end

procedure timed_event_p_proc begin
   if (not(combat_is_initialized)) then begin
      if (fixed_param == 1) then begin
         if (random(1,3) == 1) then begin
            anim_move_to_point_rate(13857, 2)
         end else if (random(1,3) == 2) then begin
            anim_move_to_point_rate(12268, 2)
         end else begin
            anim_move_to_point_rate(14672, 2)
         end
      end else if (fixed_param == 2) then begin
         if (self_can_see_dude) then begin
            set_local_var(LVAR_Force_Talk,1);
            start_dialog_at_node(Node003);
         end
      end
      add_timer_event(self_obj,random(200,300),1);
   end
end



/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
      set_map_var(MVAR_Attack_Slavers,1);
   end
end

procedure destroy_p_proc begin
   inc_evil_critter
   set_map_var(MVAR_Slaver_Count, ((map_var(MVAR_Slaver_Count)) - 1));

   if (map_var(MVAR_Slaver_Count) == 0) then begin
      set_global_var(GVAR_WIPED_OUT_SLAVER_CAMP,1);
      display_msg(message_str(SCRIPT_SLVCM1, 200));
   end

   GUARD_obj := 0;
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   GUARD_obj := self_obj;

   if (map_first_run) then begin
      set_local_var(LVAR_Home_Tile, self_tile);
   end

   add_timer_event(self_obj,15,1);

end


procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if ( (metzger_dead) or (hostile) or (local_var(LVAR_Hostile) == 2) or (map_var(MVAR_Attack_Slavers) == 1) or ( (global_var(GVAR_NCR_PLAYER_RANGER)) ) ) then begin
         set_local_var(LVAR_Hostile,1);
         call Node001;
         self_attack_dude;
      //end else if ( (local_var(LVAR_Force_Talk) == 0) ) then begin
      //    if ( (tile_distance_objs(self_obj, dude_obj)) < 5 ) then begin
      //       set_local_var(LVAR_Force_Talk,1);
      //       start_dialog_at_node(Node003);
      //    end
      end
   end
end

/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
   GUARD_obj := self_obj;
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if ( (hostile) or (map_var(MVAR_Attack_Slavers) == 1) ) then begin
      call Node001;
      self_attack_dude;
   end else begin
      call Node002;
   end
end


procedure Node001 begin
   if (global_var(GVAR_NCR_PLAYER_RANGER)) then
      floater(202);
   else
      floater_rand(200,201);
end

procedure Node002 begin
   if (has_rep_slaver) then begin
      floater_rand(304 - dude_is_female, 312 + dude_is_male);
   end else begin
      floater_rand(300, 302);
   end
end

procedure Node003 begin
   Reply(500);
   if ((map_var(MVAR_Take_Slaves) == 1) or (has_rep_slaver)) then begin
      NOption(501,Node004,004);
   end else begin
      NOption(501,Node900,004);
      BOption(505,Node998,004);
   end
end

procedure Node004 begin
   Reply(502);
   NOption(503,Node092,004);
end

procedure Node005 begin
   Reply(506);
   BOption(507,Node007,004);
   NOption(508,Node901,004);
end

procedure Node006 begin
   Reply(509);
   NOption(503,Node092,004);
end

procedure Node007 begin
   Reply(510);
   BOption(800,Node998,004);
end

procedure Node008 begin
   Reply(504);
   BOption(800,Node998,004);
end

procedure Node900 begin
   if ( (has_skill(dude_obj, SKILL_SPEECH) > 60) ) then
      call Node005;
   else
      call Node008;
end

procedure Node901 begin
   if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,-5))) then
      call Node006;
   else
      call Node008;
end

procedure Node092 begin
   set_map_var(MVAR_Can_Check_Slaves,1);
end

procedure Node998 begin
   set_hostile;
   set_map_var(MVAR_Attack_Slavers,1);
end

procedure Node999 begin

end
