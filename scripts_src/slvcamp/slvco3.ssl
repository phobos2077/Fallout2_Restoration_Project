/*        Script from item templete*          /

/*
        Name:
        Location:
        Description:

        Log:


           Created:

           Updated:
*/

/* Include Files */

#define SCRIPT_REALNAME "slvco3"
#include "../headers/define.h"

#define NAME                    SCRIPT_SLVCO3

#include "../headers/slvcamp.h"
#include "../headers/command.h"


/* Door States */
#define STATE_ACTIVE                    (0)
#define STATE_INACTIVE                  (1)
#define STATE_WOOD                      (0)
#define STATE_METAL                     (1)
#define STATE_NON_DESTROY               (2)
#define STATE_STANDARD_LOCK             (0)
#define STATE_ELECTRIC_LOCK             (1)

/* Sets whether the door is locked or trapped */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_WOOD
#define LOCK_STATUS                     STATE_STANDARD_LOCK

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-100)
#define Lockpick_Bonus                  (Lock_Bonus + 20)
#define Exd_Lockpick_Bonus              (Lock_Bonus + 40)

#define Lockpick_Exp                    EXP_LOCKPICK_NORMAL

procedure start;
procedure use_p_proc;
procedure destroy_p_proc;
procedure Unlock_Lock;
procedure Lockpick_Lock;
procedure Lockpick_Door;
procedure Lock_Door;
procedure Set_Lock;
procedure Set_Lockpick_Lock;
procedure Super_Lockpick_Lock;
procedure Super_Set_Lockpick_Lock;
procedure map_enter_p_proc;
procedure description_p_proc;
procedure look_at_p_proc;


#define door_mstr(x)              message_str(SCRIPT_DOOR,x)
#define LVAR_Locked                     (0)
#define LVAR_Gave_Locks_XP              (1)
#define LVAR_Slaves_Flee                (2)

#define UNLOCK_DOOR                     (2)
#define OPEN_DOOR                       (3)

variable Locks_Roll;
import variable CELLDOOR2_obj;
import variable PENGUARD_obj;
import variable PENGUARD2_obj;

procedure start begin
   CELLDOOR2_obj := self_obj;
end


procedure timed_event_p_proc begin
end


procedure destroy_p_proc
begin

end


procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end


procedure use_p_proc
begin
   if ((is_visible(PENGUARD_obj))) then begin
      if (obj_can_see_obj(PENGUARD_obj,dude_obj)) then begin
            script_overrides;
            add_timer_event(PENGUARD_obj,5,2);
      end
   end else if ((is_visible(PENGUARD2_obj))) then begin
      if (obj_can_see_obj(PENGUARD2_obj,dude_obj)) then begin
            script_overrides;
            add_timer_event(PENGUARD2_obj,5,2);
      end
   end else if (obj_is_locked(self_obj)) then begin
       script_overrides;
       display_msg(door_mstr(203));
   end else begin
      if (local_var(LVAR_Slaves_Flee) == 0) then begin
         inc_general_rep(15);
         give_xp(200);
         set_map_var(MVAR_Slaves_Flee,2);
         set_local_var(LVAR_Slaves_Flee,1);
      end
   end
end

procedure map_enter_p_proc begin
   CELLDOOR2_obj := self_obj;

   if (map_first_run) then
      set_local_var(LVAR_Locked,STATE_ACTIVE);

   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       obj_lock(self_obj);
   end

   else begin
       obj_unlock(self_obj);
   end

end

procedure map_update_p_proc begin
   CELLDOOR2_obj := self_obj;
end

procedure use_skill_on_p_proc begin
   variable Skill_Used;

   Skill_Used:=action_being_used;

   if (Skill_Used == SKILL_LOCKPICK) then begin
       script_overrides;
       if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
           call Unlock_Lock;
       end
       else begin
           call Set_Lock;
       end
   end
end



procedure use_obj_on_p_proc begin
   variable Tool;

   Tool:=obj_pid(obj_being_used_with);


   if (LOCK_STATUS == STATE_STANDARD_LOCK) then begin
       if (Tool == PID_KEYS) then begin
           if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
            script_overrides;
            set_local_var(LVAR_Locked, STATE_INACTIVE);              // Door is unlocked
            obj_unlock(self_obj);                                      // engine unlock door
            display_msg(mstr(102));
           end else begin
            script_overrides;
            set_local_var(LVAR_Locked, STATE_ACTIVE);
            obj_lock(self_obj);
            display_msg(mstr(103));
           end
       end
       else if (Tool == PID_LOCKPICKS) then begin
           script_overrides;
           if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
               call Lockpick_Lock;
           end
           else begin
               call Set_Lockpick_Lock;
           end
       end
       //added by killap
       else if (Tool == PID_EXP_LOCKPICK_SET) then begin
            script_overrides;
            if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
               call Super_Lockpick_Lock;
            end
            else begin
               call Super_Set_Lockpick_Lock;
            end
       end
       //end added by killap
   end

end



procedure Unlock_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Lock_Bonus);

   call Lockpick_Door;
end


procedure Lockpick_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */
   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Lockpick_Bonus);

   call Lockpick_Door;
end

procedure Super_Lockpick_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */
   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Exd_Lockpick_Bonus);

   call Lockpick_Door;
end
/***************************************************************************
   This procedure will check against the roll_vs_lockpick to see if the
   source_object will unlock the door and display the appropriate messages
***************************************************************************/

procedure Lockpick_Door begin
   if (is_success(Locks_Roll)) then begin
       set_local_var(LVAR_Locked, STATE_INACTIVE);              // Door is unlocked
       obj_unlock(self_obj);                                    // engine unlock door

       if (source_obj == dude_obj) then begin
           display_msg(door_mstr(170));
       end

       else begin
           display_msg(obj_name(source_obj)+door_mstr(173));
       end

       if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
           set_local_var(LVAR_Gave_Locks_XP,1);
           give_xp(Lockpick_Exp);
       end
   end

   else if (is_critical(Locks_Roll)) then begin
       jam_lock(self_obj);

       if (source_obj == dude_obj) then begin
           display_msg(door_mstr(171));
       end

       else begin
           display_msg(obj_name(source_obj)+door_mstr(174));
       end
   end

   else begin
       if (source_obj == dude_obj) then begin
           display_msg(door_mstr(172));
       end

       else begin
           display_msg(obj_name(source_obj)+door_mstr(175));
       end
   end
end

/***************************************************************************
   This procedure will allow the source_obj to lock the door that he had
   just unlocked.
***************************************************************************/

procedure Set_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Lock_Bonus);

   call Lock_Door;
end


/***************************************************************************
   This procedure will allow the source_obj to lock the door that he had
   just unlocked using its lockpicks to accomplish this deed.
***************************************************************************/

procedure Set_Lockpick_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Lockpick_Bonus);

   call Lock_Door;
end

procedure Super_Set_Lockpick_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Exd_Lockpick_Bonus);

   call Lock_Door;
end

/***************************************************************************
   This procedure will actively set the lock on the door and set all of
   the coresponding varaibles for it.
***************************************************************************/

procedure Lock_Door begin
   if (is_success(Locks_Roll)) then begin
       set_local_var(LVAR_Locked, STATE_ACTIVE);                // Door is unlocked
       obj_lock(self_obj);                                      // engine unlock door

       if (source_obj == dude_obj) then begin
           display_msg(door_mstr(189));
       end

       else begin
           display_msg(obj_name(source_obj)+door_mstr(191));
       end

       if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
           set_local_var(LVAR_Gave_Locks_XP,1);
           give_xp(Lockpick_Exp);
       end
   end

   else begin
       if (source_obj == dude_obj) then begin
           display_msg(door_mstr(190));
       end

       else begin
           display_msg(obj_name(source_obj)+door_mstr(192));
       end
   end
end
