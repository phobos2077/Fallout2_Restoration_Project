/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "slvcc4"
#include "../headers/define.h"

#define NAME                    SCRIPT_SLVCC4

#include "../headers/slvcamp.h"
#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;


procedure Node001;
procedure Node002;
/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)

#define  LARGE_PEN_ESCAPE_TILE          (15335)
#define  SMALL_PEN_ESCAPE_TILE          (10265)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/
#define slave_is_primitive ((self_pid == PID_PRIMITIVE_VILLAGER_MALE) or (self_pid == PID_PRIMITIVE_VILLAGER_FEMALE) or (self_pid == PID_GENERIC_SLAVE_FEMALE) or (self_pid == PID_GENERIC_SLAVE_MALE))

import variable CELLDOOR_obj;
import variable CELLDOOR2_obj;

procedure start begin
end


/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));

end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
end

procedure destroy_p_proc begin
   inc_neutral_critter

end

procedure critter_p_proc begin
   if ( (self_tile == LARGE_PEN_ESCAPE_TILE) or (self_tile == SMALL_PEN_ESCAPE_TILE) ) then begin
      destroy_object(self_obj);
   end

   if (map_var(MVAR_Slaves_Flee) == 2) then begin
      add_timer_event(self_obj,5,2);
   end else if (map_var(MVAR_Slaves_Flee) == 1) then begin
      add_timer_event(self_obj,5,3);
   end else if (map_var(MVAR_Slaves_Flee) == 3) then begin
      if ( not anim_busy(self_obj) and (not combat_is_initialized) ) then begin
         if (self_tile != LARGE_PEN_ESCAPE_TILE) then begin
            reg_anim_clear(self_obj);
            reg_anim_begin();
            self_run_to_tile(LARGE_PEN_ESCAPE_TILE);
            reg_anim_end();
         end
      end
   end else if (map_var(MVAR_Slaves_Flee) == 4) then begin
      if ( not anim_busy(self_obj) and (not combat_is_initialized) ) then begin
         if (self_tile != SMALL_PEN_ESCAPE_TILE) then begin
            reg_anim_clear(self_obj);
            reg_anim_begin();
            self_run_to_tile(SMALL_PEN_ESCAPE_TILE);
            reg_anim_end();
         end
      end
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   if (map_var(MVAR_Slaves_Flee) == 1) then begin
      if (slaves_in_small_pen(self_tile)) then begin
         destroy_object(self_obj);
      end
   end else if (map_var(MVAR_Slaves_Flee) == 2) then begin
      if (slaves_in_big_pen(self_tile)) then begin
         destroy_object(self_obj);
      end
   end

   flush_add_timer_event_sec(self_obj, random(15, 90), 1);
   set_self_team(TEAM_SLAVER_CAMP_SLAVES);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if (has_rep_slaver) then begin
      call Node001;
   end else begin
      call Node002;
   end
end

procedure Node001 begin
   if (slave_is_primitive) then begin
      floater_rand(320, 325);
   end else begin
      floater_rand(327 - dude_is_male, 331 + (2 * dude_is_female));
   end
end
procedure Node002 begin
   if (slave_is_primitive) then begin
      floater_rand(350, 354);
   end else begin
      floater_rand(355, 360);
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
      floater(random(400,402));
      add_timer_event(self_obj,(random(150,200)),1);
   end else if (fixed_param == 2) then begin
      if (slaves_in_big_pen(self_tile)) then begin
         self_run_to_tile(LARGE_PEN_ESCAPE_TILE);
         set_map_var(MVAR_Slaves_Flee,3);
      end
   end else if (fixed_param == 3) then begin
      ndebug("slaves in small pen free");
      if (slaves_in_small_pen(self_tile)) then begin
         self_run_to_tile(SMALL_PEN_ESCAPE_TILE);
         set_map_var(MVAR_Slaves_Flee,4);
      end
   end
end
