/*
	Name: Hologram
   Location: EPA Main
   Description: Script to the broken hologram on the first level of EPAMain
*/




/* Include Files */
#define SCRIPT_REALNAME "epac22"
#include "../headers/define.h"

#define NAME                    SCRIPT_EPAC22

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node990;
procedure Node991;
procedure Node999;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
   script_overrides;
   /*if (action_being_used == SKILL_REPAIR) then begin
      script_overrides;
      if (local_var(LVAR_Hologram_Repaired) == 0) then begin
         if( is_success( roll_vs_skill( dude_obj, SKILL_REPAIR, -10 ) ) ) then begin
            display_msg(mstr(500));
            give_xp(350);
            set_local_var(LVAR_Hologram_Repaired,1);
         end else begin
            display_msg(mstr(501));
         end
      end else begin
         display_msg(mstr(502));
      end
   end*/
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_emp) then begin
      script_overrides;
      critter_damage(self_obj, 99999);
   end else begin
      script_overrides;
   end
end

procedure combat_p_proc
begin
  script_overrides;
end

procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if (global_var(GVAR_KILL_HOLOGRAMS)==1) then begin
       destroy_object(self_obj);
   end

end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
    if (global_var(GVAR_FIX_STATICINGHOLOGRAM) == 2) then begin
      start_gdialog(NAME, self_obj, 4, -1, -1);
      gsay_start;
         if (local_var(LVAR_Herebefore) == 0) then begin
            call Node003;
            set_local_var(LVAR_Herebefore,1);
         end else begin
            call Node019;
         end
      gsay_end;
      end_dialogue;
   end else begin
      start_gdialog(NAME, self_obj, 4, -1, -1);
      gsay_start;
         call Node001;
      gsay_end;
      end_dialogue;
   end
end

procedure Node001 begin
   Reply(200);
   NOption(201,Node002,004);
   NOption(202,Node999,004);
end

procedure Node002 begin
   Reply(203);
   if (dude_iq >= 5) then
      NOption(204,Node991,004);
   NOption(205,Node999,004);
end

procedure Node003 begin
   Reply(300);
   NOption(301,Node004,004);
end

procedure Node004 begin
   Reply(302);
   NOption(303,Node005,004);
end

procedure Node005 begin
   Reply(304);
   NOption(305,Node006,004);
end

procedure Node006 begin
   Reply(310);
   if (global_var(GVAR_PASSWORD_KNOWN) == 0) then
      NOption(311,Node009,004);
   //else if (global_var(GVAR_EPA_SERVICE_ELEVATOR) == 1) then
   //   NOption(312,Node009,004);
   NOption(313,Node010,004);
   NOption(314,Node999,004);
end

procedure Node007 begin
   Reply(320);
   NOption(321,Node008,004);
end

procedure Node008 begin
   Reply(322);
   NOption(323,Node990,004);
end

procedure Node009 begin
   Reply(324);
   NOption(323,Node990,004);
end

procedure Node010 begin
   Reply(330);
   //if (obj_is_carrying_obj_pid(dude_obj,PID_DOG_FOOD)) then
   //   NOption(331,Node011,004);
   //if (obj_is_carrying_obj_pid(dude_obj,PID_RACK)) then
   //   NOption(333,Node012,004);
   if (dude_item_count(PID_EPA_SYRINGE)) then
      NOption(332,Node013,004);
   if (dude_item_count(PID_DRUGS)) then
      NOption(334,Node015,004);
   if (dude_item_count(PID_RANDOM_CHEMICALS)) then
      NOption(335,Node016,004);
   //if (obj_is_carrying_obj_pid(dude_obj,PID_RADIO_DYNAMITE)) then
   //   NOption(336,Node018,004);

   NOption(337,Node006,004);

end

procedure Node011 begin
   Reply(340);
   NOption(341,Node010,004);
end

procedure Node012 begin
   Reply(350);
   NOption(351,Node010,004);
end

procedure Node013 begin
   Reply(360);
   NOption(361,Node014,004);
   NOption(362,Node010,004);
end

procedure Node014 begin
   Reply(363);
   NOption(364,Node010,004);
end

procedure Node015 begin
   Reply(370);
   NOption(371,Node010,004);
end

procedure Node016 begin
   Reply(380);
   NOption(381,Node017,004);
   NOption(382,Node010,004);
end

procedure Node017 begin
   Reply(383);
   NOption(384,Node010,004);
end

procedure Node018 begin
   Reply(390);
   NOption(391,Node010,004);
end

procedure Node019 begin
   Reply(400);
   NOption(401,Node006,004);
   NOption(402,Node999,004);
end

procedure Node020 begin
   Reply(500);
   NOption(501,Node991,004);
end

procedure Node991 begin
   set_global_var(GVAR_FIX_STATICINGHOLOGRAM,1);
end


procedure Node999 begin

end

procedure Node990 begin
   set_global_var(GVAR_PASSWORD_KNOWN,1);
   call Node006;
end
