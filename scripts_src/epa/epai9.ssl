/*
  ***   Script conwerted to Interplay format by Fallout Script Edytor (by Jargo)  ***
*/

#define SCRIPT_REALNAME "epai9"
#include "../headers/define.h"
//#include "../headers/<TownMapName.h>"

#define NAME                    SCRIPT_EPAI9          //Script name from scripts.h
#define TOWN_REP_VAR            GVAR_TOWN_REP_           //Global variable name for this Town

#include "../headers/command.h"
#include "../headers/modreact.h"
#include "../headers/partybkg.h"

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Gave_Locks_XP              (6)

#define Lock_Bonus                      (-90)
#define Lockpick_Bonus                  (Lock_Bonus+20)
#define Exd_Lockpick_Bonus              (Lock_Bonus+40)
#define Lockpick_Exp                    EXP_LOCKPICK_NEG_90

procedure start;
procedure use_obj_on_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_p_proc;
procedure destroy_p_proc;
procedure damage_p_proc;
procedure Unlock_Lock;
procedure Lockpick_Lock;
procedure Lockpick_Door;
procedure Super_Lockpick_Lock;
procedure Lock_Door;
procedure Set_Lock;
procedure Set_Lockpick_Lock;
procedure Super_Set_Lockpick_Lock;

variable Locks_Roll;

procedure start begin
   if self_obj then obj_lock(self_obj);
end

procedure use_skill_on_p_proc begin
   variable Skill_Used;
   Skill_Used:=action_being_used;

   if (Skill_Used == SKILL_LOCKPICK) then begin
      script_overrides;
      if (local_var(LVAR_Herebefore) == 0) then begin
         call Unlock_Lock;
      end else begin
         call Set_Lock;
      end
   end
end

procedure use_obj_on_p_proc
begin
   variable Tool := 0;

   Tool := obj_pid(obj_being_used_with);

   if (Tool == PID_LOCKPICKS) then begin
      script_overrides; //added by killap
      if (local_var(LVAR_Herebefore) == 0) then begin
         call Lockpick_Lock;
      end else begin
         call Set_Lockpick_Lock;
      end
   end else if (Tool == PID_EXP_LOCKPICK_SET) then begin
      script_overrides; //added by killap
      if (local_var(LVAR_Herebefore) == 0) then begin
         call Super_Lockpick_Lock;
      end else begin
         call Super_Set_Lockpick_Lock;
      end
   end else if (Tool == PID_EPA_KEYS) then begin
      script_overrides;
      display_msg(mstr(103));
      obj_unlock(self_obj);
      reg_anim_clear( self_obj);
      reg_anim_begin();
      obj_open(self_obj);
      reg_anim_end();
      set_local_var(LVAR_Herebefore, 1);
   end
end

procedure look_at_p_proc
begin
  script_overrides;
  display_msg(mstr(102));
end

procedure description_p_proc
begin
  script_overrides;
  display_msg(mstr(101));
end

procedure use_p_proc
begin
  if (local_var(LVAR_Herebefore) == 0) then begin
    script_overrides;
    display_msg(mstr(100));
  end
end

procedure destroy_p_proc
begin
end

procedure damage_p_proc
begin
end

/***************************************************************************
   This procedure will just do a standard lockpick roll to see if the player
   can lockpick the door
***************************************************************************/

procedure Unlock_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Lock_Bonus);

   call Lockpick_Door;
end


/***************************************************************************
   This procedure will do a lockpick roll if the player or NPC uses lockpick
   on the door. There will be a modifer from the standard roll, because the
   player will have proper tools.
***************************************************************************/

procedure Lockpick_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */
   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Lockpick_Bonus);

   call Lockpick_Door;
end

procedure Super_Lockpick_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */
   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Exd_Lockpick_Bonus);

   call Lockpick_Door;
end


/***************************************************************************
   This procedure will check against the roll_vs_lockpick to see if the
   source_object will unlock the door and display the appropriate messages
***************************************************************************/

procedure Lockpick_Door begin
   if (is_success(Locks_Roll)) then begin
       script_overrides;
       display_msg(mstr(103));
       obj_unlock(self_obj);
       reg_anim_clear( self_obj);
       reg_anim_begin();
       obj_open(self_obj);
       reg_anim_end();
       set_local_var(LVAR_Herebefore, 1);

       if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
           set_local_var(LVAR_Gave_Locks_XP,1);
           give_xp(Lockpick_Exp);
       end
   end

   else if (is_critical(Locks_Roll)) then begin
       jam_lock(self_obj);

       display_msg(mstr(106));
   end

   else begin
       display_msg(mstr(105));
   end
end

/***************************************************************************
   This procedure will allow the source_obj to lock the door that he had
   just unlocked.
***************************************************************************/

procedure Set_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Lock_Bonus);

   call Lock_Door;
end


/***************************************************************************
   This procedure will allow the source_obj to lock the door that he had
   just unlocked using its lockpicks to accomplish this deed.
***************************************************************************/

procedure Set_Lockpick_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Lockpick_Bonus);

   call Lock_Door;
end

procedure Super_Set_Lockpick_Lock begin
/* Locks_Roll is a global variable to this script, defined at the beginning
   of the script. */

   Locks_Roll:=roll_vs_skill(source_obj,SKILL_LOCKPICK,Exd_Lockpick_Bonus);

   call Lock_Door;
end


/***************************************************************************
   This procedure will actively set the lock on the door and set all of
   the coresponding varaibles for it.
***************************************************************************/

procedure Lock_Door begin
   if (is_success(Locks_Roll)) then begin
       script_overrides;
       display_msg(mstr(107));
       reg_anim_clear( self_obj);
       reg_anim_begin();
       obj_close(self_obj);
       reg_anim_end();
       obj_lock(self_obj);
       set_local_var(LVAR_Herebefore, 0);

       if (local_var(LVAR_Gave_Locks_XP) == 0) then begin
           set_local_var(LVAR_Gave_Locks_XP,1);
           give_xp(Lockpick_Exp);
       end
   end

   else begin
       display_msg(mstr(108));
   end
end
