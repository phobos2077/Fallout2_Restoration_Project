/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Chris's Door
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "cicrisdr"
#include "../headers/define.h"

#define NAME                    SCRIPT_CICRISDR
#define CUR_COMP_SCRIPT         SCRIPT_CICRISDR

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure map_enter_p_proc;
procedure damage_p_proc; //added by killap
procedure destroy_p_proc; //added by killap

import variable chris_ptr;

procedure start begin
end

procedure map_enter_p_proc begin
   obj_close( self_obj );
   obj_lock( self_obj );
end

procedure use_p_proc begin
   if( ( dude_tile == 23300) or
       ( dude_tile == 23501) or
       ( dude_tile == 23301) or
       ( dude_tile == 23302) ) then begin
      // If on the inside, just open it.
      obj_unlock( self_obj );
   end
   else if( dude_is_sneaking ) then begin
      // Dude must succeed a sneak before opening the door.
      if( ( not( is_critter_dead(chris_ptr) ) ) and
          ( not( is_success( roll_vs_skill( dude_obj, SKILL_SNEAK, -20 ) ) ) ) ) then begin
         script_overrides;
         add_timer_event( chris_ptr, 1, 3 );
      end
   end
   else if( ( not( is_critter_dead(chris_ptr) ) ) ) then begin
      script_overrides;
      add_timer_event( chris_ptr, 1, 3 );
   end
   else begin
      obj_unlock( self_obj );
   end
end

//added by killap
procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      obj_unlock(self_obj);
      call destroy_p_proc;
      add_timer_event( chris_ptr, 1, 1 );
      destroy_object(self_obj);
   end
end

procedure destroy_p_proc begin
end
//end added
