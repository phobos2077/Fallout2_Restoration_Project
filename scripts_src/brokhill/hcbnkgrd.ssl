/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Broken Hills Guard
        Location: Broken Hills
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: January 14, 1998

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "hcbnkgrd"
#include "../headers/define.h"
#include "../headers/broken.h"
#include "../headers/broken1.h"

#define NAME                    SCRIPT_HCBNKGRD
#define TOWN_REP_VAR            (GVAR_TOWN_REP_BROKEN_HILLS)

#include "../headers/command.h"
#include "../headers/modreact.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;
procedure combat;
procedure dudeleaves;

procedure Node995;
procedure Node996;
procedure Node997;
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Warned                     (7)
#define LVAR_Gun                        (8)
#define LVAR_Troublemaker               (9)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */
import variable Guard_Ptr;

/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;

   Guard_Ptr := self_obj;
   move_to( self_obj, 11689, 0 );
   critter_attempt_placement( self_obj, 11689, 0 );
   add_timer_event( self_obj, game_ticks( random( 15,  30 ) ), 4 );

   if( global_var( GVAR_ENEMY_BROKEN_HILLS ) == 0 ) then
      set_self_team(TEAM_SUPER_MUTANT);
   else
      set_self_team(TEAM_BROKEN_HILLS);
   set_self_ai(AI_TOUGH_CITIZEN);

   if global_var(GVAR_BH_CONSPIRACY) == CONSPIRACY_SUCCESSFUL then
      set_obj_visibility( self_obj, true );
   else
      set_obj_visibility( self_obj, false );
end

procedure map_exit_p_proc begin
   rm_timer_event(self_obj);
   set_local_var(LVAR_Warned, 0);
   set_local_var(LVAR_Gun, 0);
end

procedure map_update_p_proc begin
   Guard_Ptr := self_obj;
end

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

   // Handle rotation to center of room
   if( ( anim_busy( self_obj ) == false ) and ( not( combat_is_initialized ) ) ) then begin
      if( ( self_tile == 11484) and ( self_cur_rot != 3 ) ) then begin
         self_rotate(3);
      end
      else if( ( self_tile == 14884) and ( self_cur_rot != 3 ) ) then begin
         self_rotate(5);
      end
      else if( ( self_tile == 14894) and ( self_cur_rot != 3 ) ) then begin
         self_rotate(0);
      end
      else if( ( self_tile == 11494) and ( self_cur_rot != 3 ) ) then begin
         self_rotate(2);
      end
   end

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ( ( ( global_var( GVAR_ENEMY_BANK_GUARDS ) == 1 ) or
          ( global_var( GVAR_ENEMY_BROKEN_HILLS ) == 1 ) or
          ( local_var(LVAR_Hostile) == 2 ) ) and
        (self_can_see_dude)) then begin
       // If the player is an enemy of Broken Hills, put me on Broken Hills.
       // Otherwise, I'm on the local Super Mutants team for the bank.
       if( global_var( GVAR_ENEMY_BROKEN_HILLS ) == 1 ) then
         set_self_team(TEAM_BROKEN_HILLS);
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

   if (map_var(MVAR_Lockpick_Attempt) == 1) then begin
      set_map_var( MVAR_Lockpick_Attempt, 0 );
      if (local_var(LVAR_Troublemaker) == 0) then begin
         call Node014;
      end
      else begin
         call Node998;
      end
   end
   else if (self_can_see_dude) then begin
      /*if (dude_is_sneaking) then begin
         if (local_var(LVAR_Warned) == 0) then begin
            call Node011;
         end
      end
      else */
      if (critter_is_armed(dude_obj)) then begin
         if (local_var(LVAR_Gun) == 0) then begin
            call Node012;
         end
      end
      else if( night ) then begin
         if (local_var(LVAR_Warned) == 0) then begin
            call Node011;
         end
      end
   end //of can see dude
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin
   if ( ( global_var(GVAR_BH_JAIL) == JAIL_REJECTED ) or
        ( global_var(GVAR_BH_JAIL) == JAIL_ENLISTED ) ) then begin
      set_global_var(GVAR_BH_JAIL, JAIL_FORCE);
   end

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
       set_global_var( GVAR_ENEMY_BANK_GUARDS, 1 );
       // Don't set to Enemy of Broken Hills or else Jailbreak would
       // cause entire city to hate me.
       //set_global_var(GVAR_ENEMY_BROKEN_HILLS,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   GetReaction;

   if (local_var(LVAR_Personal_Enemy) == 1) then begin
       call Node998;
   end
   else if (dude_is_stupid) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node002;
       gSay_End;
       end_dialogue;
   end
   else if (critter_is_armed(dude_obj)) then begin
      call Node012;
   end
   else if ( (global_var(GVAR_BH_JAIL) == JAIL_STEALTH) and (global_var(GVAR_BH_CONSPIRACY) != CONSPIRACY_BROKEN_DOUBLECROSS) ) then //added GVAR_BH_CONSPIRACY - killap
      call Node015;
/*
   else if ( (dude_is_sneaking) and (global_var(GVAR_BH_JAIL) != JAIL_CHARISMA) ) then begin
      call Node011;
   end
*/
   else begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
         if( local_var(LVAR_Herebefore) == 0 ) then
             call Node001;
         else
            call Node013;
       gSay_End;
       end_dialogue;
   end
   set_local_var( LVAR_Herebefore, 1 );
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if( local_var(LVAR_Herebefore) == 0 ) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

procedure timed_event_p_proc begin
   if (fixed_param == 0) then begin //sneaking too long
      set_local_var(LVAR_Warned,0);
      if ( ( self_can_see_dude ) and ( night ) ) then //if still sneaking you are in trouble
         set_local_var(LVAR_Hostile, 2);
   end
   else if (fixed_param == 1) then begin //held weapon too long
      set_local_var(LVAR_Gun,0);
      if ( ( self_can_see_dude ) and ( critter_is_armed(dude_obj) ) ) then //if still armed you are in trouble
         set_local_var(LVAR_Hostile, 2);
   end
   else if (fixed_param == 2) then begin
      set_local_var(LVAR_Troublemaker,1);
   end
   else if (fixed_param == 3) then begin //Stayed inside too long
      // Check to see if Dude is still inside.
      set_local_var(LVAR_Warned,0);
      set_local_var(LVAR_Hostile, 2);
   end
   else if(fixed_param == 4) then begin
      if( not( combat_is_initialized ) ) then begin
         // Update the walking of the guard
         if( self_tile == 11484) then begin
            animate_move_obj_to_tile( self_obj, 14884, -1 );
         end
         else if( self_tile == 14884) then begin
            animate_move_obj_to_tile( self_obj, 14894, -1 );
         end
         else if( self_tile == 14894) then begin
            animate_move_obj_to_tile( self_obj, 11494, -1 );
         end
         else if( self_tile == 11494) then begin
            animate_move_obj_to_tile( self_obj, 11484, -1 );
         end
         else begin
            animate_move_obj_to_tile( self_obj, 11484, -1 );
         end
      end
      add_timer_event( self_obj, game_ticks( random( 15, 30 ) ), 4 );
   end
end

procedure combat begin
end

procedure dudeleaves begin
   set_local_var(LVAR_Warned,1);
   add_timer_event(self_obj,game_ticks(60),3);
end

procedure Node995 begin
   if (dude_charisma >= 7) then begin
       TopReact;
   end
   else begin
       BottomReact;
   end
end

procedure Node996 begin
   BottomReact;
end

procedure Node997 begin
   if (dude_charisma >= 8) then
       call Node004;
   else
       call Node005;
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end

// Not lines are allowed to be added below shere
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   Reply(103);

   if( dude_iq == 1 ) then
      NOption(104, Node002, 001);
   if( ( dude_iq == 2 ) or ( dude_iq == 3 ) ) then
      NOption(105,Node002,002);
   BOption(106,Node003,004);
   BOption(107,Node004,004);
   if( global_var(GVAR_BH_JAIL) == JAIL_ENLISTED ) then
      NOption(108,Node005,004);
   if ( ( global_var(GVAR_BH_JAIL) == JAIL_ENLISTED ) and (dude_charisma >= 7 ) ) then
      NOption(109,Node006,004);
end

procedure Node002 begin
   Reply(110);

   if( dude_iq == 1 ) then
      NOption(111, Node999, 001);
   if( ( dude_iq == 2 ) or ( dude_iq == 3 ) ) then
      NOption(112,Node999,002);
end

procedure Node003 begin
   Reply(113);
   NOption(114,Node999,004);
end

procedure Node004 begin
   Reply(115);
   BOption(116,Node998,004);
   NOption(117,dudeleaves,004); //if dude doesn't leave soon start combat
end

procedure Node005 begin
   Reply(118);
   if (dude_charisma >= 7) then
      GOption(119,Node006,004);
   BOption(120,Node998,004);
   NOption(121,Node999,004);
end

procedure Node006 begin
   Reply(122);
   GOption(123,Node007,004);
   BOption(124,Node998,004);
end

procedure Node007 begin
   Reply(125);
   if (dude_iq >= 7) then
      GOption(126,Node008,004);
   GOption(127,Node009,004);
   NOption(128,Node010,004);
end

procedure Node008 begin
   variable item;
   //variable item2;
   //variable itemCount;
   //variable dummy;

   set_global_var(GVAR_BH_JAIL, JAIL_CHARISMA);

   // Remove jail key from Guard's inventory. If there isn't
   // one there, screw it and create a new one.
   //itemCount := obj_is_carrying_obj_pid( self_obj, PID_CELL_DOOR_KEY );
   //if( itemCount > 0 ) then begin
   //   item := obj_carrying_pid_obj( self_obj, PID_CELL_DOOR_KEY );
   //   dummy := rm_mult_objs_from_inven( self_obj, item, itemCount );
   //   destroy_object(item); //added by killap
   //end

   // Give the key to the player
   //item2:=create_object(PID_CELL_DOOR_KEY,0,0);
   //add_obj_to_inven(dude_obj,item2);

   //changed by killap (expansion) - he no longer always gives you a key even if he is not carrying one
   if ((self_item_count(PID_CELL_DOOR_KEY))) then begin
      item:=self_item(PID_CELL_DOOR_KEY);
      rm_obj_from_inven(self_obj,item);
      add_obj_to_inven(dude_obj,item);

      Reply(129);
      NOption(130,Node999,004);
   end else begin
      Reply(150);
      NOption(151,Node999,004);
      BOption(152,Node998,004);
   end
end

procedure Node009 begin
   Reply(131);
   BOption(132,Node998,004);
   NOption(133,Node999,004);
end

procedure Node010 begin
   Reply(134);
   BOption(135,Node998,004);
   NOption(136,Node999,004);
end

procedure Node011 begin
   floater(137); //if player doesn't comply or attempts to sneak go combat
   set_local_var(LVAR_Warned,1);
   add_timer_event(self_obj,game_ticks(10),0);
end

procedure Node012 begin
   floater(138); //if player doesn't comply with dropping weapons...
   set_local_var(LVAR_Gun,1);
   add_timer_event(self_obj,game_ticks(10),1);
end

procedure Node013 begin
   Reply(139);
   BOption(140,Node003,004);
   BOption(141,Node004,004);
   if( global_var(GVAR_BH_JAIL) == JAIL_ENLISTED ) then
      NOption(142,Node005,004);
   if ( ( global_var(GVAR_BH_JAIL) == JAIL_ENLISTED ) and (dude_charisma >= 7 ) ) then
      GOption(143,Node006,004);
end

procedure Node014 begin
   floater(137); //if player attempts to pick lock after this the guard will attack
   add_timer_event(self_obj,game_ticks(5),2); //set troublemaker after 10 seconds
end

procedure Node015 begin
   floater(145);
end

//xxxxxxxxxxxxxxxxxxxx
