/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location: RAIDERS
        Description:

        Log:

           Created: May 6, 1998

           Updated:
*/

/* Include Files */
#define SCRIPT_REALNAME "icscout"
#include "../headers/define.h"
#define NAME                    SCRIPT_ICSCOUT
#define TOWN_REP_VAR            GVAR_TOWN_REP_RAIDERS
#include "../headers/command.h"
#include "../headers/raiders.h"
#include "../headers/raiders2.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure map_update_p_proc;
procedure combat_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node001;
//added by killap - expansion
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node029;

procedure Node990;
procedure Node991;
procedure Node992;
procedure Node993;
procedure Node994;
procedure Node995;
procedure Node996;
procedure Node997;

procedure Node890;
procedure Node891;
procedure Node892;
//end added

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */

#define LVAR_Flags                    (0)
#define LVAR_Ignore                   (1) //added by killap - expansion
#define LVAR_Run                      (2) //added by killap - expansion

variable wabbits;
variable stare; //added by killap - expansion

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

/* Local variables which do not need to be saved between map changes. */


procedure start begin
end

procedure timed_event_p_proc begin
//   if (combat_is_initialized == false) then begin
//   end
//   raider_add_timer_event_rand(self_obj, 20, 35, float_param);
end

procedure map_enter_p_proc begin
   //added by killap - expansion
   variable stare := 0;

   if (raiders_dead) then
      destroy_object(self_obj);

   if (raiders_scout_left) then
      destroy_object(self_obj);
   //end added
   wabbits := random(30, 50);
   if (is_loading_game == false) then begin
      if (map_first_run) then begin
         inc_raiders_counter;
         set_self_team(TEAM_RAIDERS);
         set_self_ai(AI_SHADOW_WHO_WALKS);
      end
//      raider_add_timer_event_rand(self_obj, 20, 35, float_param);
      check_kill_raider;
   end
end
procedure map_update_p_proc begin
   check_set_raider_party_flags;
end

procedure combat_p_proc begin
   check_set_raider_party_flags;
end

procedure critter_p_proc begin
   // Scout doesn't attack the player unless comabt starts with Raiders.
   //added by killap - expansion
   if (map_var(MVAR_Scout_Left)) then begin
      if (self_tile == 24071) then
         destroy_object(self_obj);
      else if (anim_busy(self_obj) == false) then begin
         if (local_var(LVAR_Run)) then begin
            anim_run_to_point_rate(24071, 5)
         end else begin
            anim_move_to_point_rate(24071, 5)
         end
      end
   end
   //end added
   check_set_raider_party_flags;

   if (self_can_see_dude) then begin
      if (hostile) then begin
         self_attack_dude;
      end
   end

end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
      set_hostile; //added by killap - expansion
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure talk_p_proc begin
   set_herebefore;
   //added by killap - expansion
   if (hostile) then begin
      self_attack_dude;
   end else if (raiders_dead) then begin
      display_msg(mstr(random(200,201)));
   end else   //end added
   if (raiders_scout_left) then begin
      //say nothing
   end else
   if (local_var(LVAR_Ignore)) then begin
      display_msg(mstr(random(200,201)));
   end else if dude_low_iq then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node022;
      gSay_End;
      end_dialogue;
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end
end

procedure destroy_p_proc begin
   dec_raiders_counter;
end

procedure look_at_p_proc begin
   script_overrides;
   if not(herebefore) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
   // display_mstr(100); ***
end

procedure description_p_proc begin
   script_overrides;
   if not(herebefore) then
      display_msg(mstr(150));
   else
      display_msg(mstr(151));
   //display_mstr_rand(150, 150 + examined);
   //set_examined;
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   if (hostile == false) then begin
      set_hostile;
   end
end
procedure Node999 begin
   set_local_var(LVAR_Ignore,1);
end

/*procedure Node001 begin
   wabbits -= 1;
   if (wabbits <= 0) then begin
      wabbits := random(30, 50);
      float_msg(dude_obj, mstr(300), FLOAT_COLOR_WHISPER);
   end
   else begin
      display_mstr_rand(200, 201);
   end
end*/

//added by killap - expansion
procedure Node001 begin
   Reply(400);
   NOption(mstr(401) + dude_name + mstr(402), Node002, 004);
   NOption(403, Node012, 004);
   NOption(404, Node023, 004);
   BOption(405, Node998, 004);
   BOption(406, Node019, 004);
   NOption(407, Node999, 004);
end

procedure Node002 begin
   Reply(410);
   NOption(411, Node003, 004);
   NOption(412, Node012, 004);
   NOption(413, Node999, 004);
   BOption(414, Node998, 004);
end

procedure Node003 begin
   Reply(420);
   NOption(421, Node990, 004); //speech check...
   NOption(422, Node991, 004); //speech check...
   NOption(423, Node012, 004);
   NOption(424, Node999, 004);
   BOption(425, Node998, 004);
end

procedure Node990 begin
   if( is_success(roll_vs_skill( dude_obj, SKILL_SPEECH, -15 )) ) then
      call Node004;
   else
      call Node017;
end

procedure Node991 begin
   if( is_success(roll_vs_skill( dude_obj, SKILL_SPEECH, -25 )) ) then
      call Node004;
   else
      call Node017;
end

procedure Node004 begin
   Reply(430);
   if (has_skill(dude_obj,SKILL_SPEECH) > 100) then
      NOption(431, Node005, 004); //speech check?
   else
      NOption(432, Node017, 004); //failure...
   NOption(433, Node999, 004);
end

procedure Node005 begin
   Reply(440);
   if (dude_iq > 5) then
      NOption(441, Node992, 004); //go to a fadeout
   if (dude_item_count(PID_RANGER_PIN)) then
      NOption(442, Node006, 004);
   if (dude_item_count(PID_BISHOPS_HOLODISK)) then
      NOption(443, Node992, 004); //go to a fadeout
   NOption(444, Node999, 004);
   BOption(445, Node998, 004);
end

procedure Node992 begin
   gfade_out(600);
   call Node006;
end

procedure Node006 begin
   gfade_in(600);
   Reply(450);

   if (dude_iq > 5) then
      NOption(452, Node007, 004);
   NOption(451, Node010, 004);
   BOption(453, Node998, 004);
end

procedure Node007 begin
   Reply(460);
   if (dude_iq > 6) then
      NOption(462, Node008, 004);
   NOption(461, Node010, 004);
   BOption(463, Node998, 004);
end

procedure Node008 begin
   Reply(470);
   NOption(471, Node009, 004);
   BOption(472, Node998, 004);
end

procedure Node009 begin
   Reply(480);
   NOption(481, Node010, 004);
   BOption(482, Node998, 004);
end

procedure Node010 begin
   Reply(490);
   NOption(491, Node011, 004);
end

procedure Node011 begin
   Reply(500);
   NOption(501, Node996, 004); //go to collect xp, set variable to remove raiders, and make shadow run towards ladder to disappear
end

procedure Node996 begin //xp, victory1
   give_xp(3000);
   display_msg(mstr(1000));
   inc_general_rep( 15 );
   set_map_var(MVAR_Scout_Left,1);
   set_raiders_scout_left;
   set_map_var(MVAR_Raiders_Leave_Time,game_time);
   dude_floater(1001);
end

procedure Node997 begin //xp, victory2
   give_xp(2500);
   display_msg(mstr(1000));
   inc_general_rep( 15 );
   set_map_var(MVAR_Scout_Left,1);
   set_raiders_scout_left;
   set_map_var(MVAR_Raiders_Leave_Time,game_time);
   dude_floater(1001);
   set_local_var(LVAR_Run,1);
end

//begin branch 2
procedure Node012 begin
   Reply(600);
   NOption(601, Node993, 004); //speech check
   BOption(602, Node998, 004);
end

procedure Node993 begin
   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -35 ) ) ) then
      call Node013;
   else
      call Node018;
end

procedure Node013 begin
   Reply(610);
   NOption(611, Node014, 004);
   BOption(612, Node998, 004);
end

procedure Node014 begin
   Reply(620);
   NOption(621, Node015, 004);
   BOption(622, Node998, 004);
end

procedure Node015 begin
   Reply(630);
   NOption(631, Node994, 004); //speech check
   BOption(632, Node998, 004);
end

procedure Node994 begin
   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -40 ) ) ) then
      call Node016;
   else
      call Node018;
end

procedure Node016 begin
   Reply(640);
   NOption(641, Node997, 004); //go to collect xp (less than before), set variable to remove raiders, and make shadow run towards ladder to disappear
   BOption(642, Node998, 004);
end

//any faliure goes here...
procedure Node017 begin
   Reply(800);
   NOption(801, Node999, 004);
   BOption(802, Node998, 004);
end

//threaten failure...
procedure Node018 begin
   Reply(810);
   NOption(811, Node999, 004);
   BOption(812, Node998, 004);
end

//begin branch 3 -- not really a full branch
procedure Node019 begin
   Reply(700);
   NOption(701, Node995, 004);
   BOption(702, Node998, 004);
   NOption(mstr(703) + dude_name + mstr(704), Node002, 004);
   NOption(705, Node012, 004);
   //NOption(706, Node023, 004);
   NOption(707, Node999, 004);
   BOption(708, Node998, 004);
end

procedure Node995 begin
   if (stare == 0) then begin
      stare := 1;
      if ( (random(1,4) == 1) or (dude_luck >= 8) ) then
         call Node020;
      else
         call Node998;
   end else if (stare == 1) then begin
      stare := 2;
      if ( (random(1,8) == 1) or (dude_luck >= 8) ) then
         call Node021;
      else
         call Node998;
   end else begin
      call Node998;
   end

end

procedure Node020 begin
   Reply(710);
   NOption(711, Node995, 004);
   BOption(712, Node998, 004);
   NOption(mstr(713) + dude_name + mstr(714), Node002, 004);
   NOption(715, Node012, 004);
   //NOption(716, Node023, 004);
   NOption(717, Node999, 004);
   BOption(718, Node998, 004);
end

procedure Node021 begin
   Reply(720);
   NOption(721, Node995, 004);
   BOption(722, Node998, 004);
   NOption(mstr(723) + dude_name + mstr(724), Node002, 004);
   NOption(725, Node012, 004);
   //NOption(726, Node023, 004);
   NOption(727, Node999, 004);
   BOption(728, Node998, 004);
end

procedure Node022 begin
   Reply(850);
   NOption(851, Node999, 001);
   NOption(852, Node999, 001);
end

//4th branch (more than a branch than the third, but still not a long one
procedure Node023 begin
   Reply(900);
   if (has_skill(dude_obj,SKILL_SPEECH) > 110) then
      NOption(901, Node890, 004); //speech roll
   NOption(902, Node017, 004);
   BOption(903, Node998, 004);
end

procedure Node024 begin
   Reply(910);

   NOption(911, Node025, 004);
   NOption(912, Node990, 004);
   NOption(913, Node991, 004);
end

procedure Node025 begin
   Reply(920);
   if (has_skill(dude_obj,SKILL_SPEECH) > 120) then
      NOption(921, Node891, 004); //speech roll
   NOption(922, Node017, 004);
end

procedure Node026 begin
   Reply(930);

   NOption(931, Node027, 004);
   NOption(932, Node027, 004);
   if (has_skill(dude_obj,SKILL_SPEECH) > 130) then
      NOption(933, Node892, 004); //speech roll
end

procedure Node027 begin
   Reply(940);
   BOption(941, Node998, 004);
end

procedure Node028 begin
   Reply(950);

   BOption(951, Node018, 004);
   NOption(952, Node029, 004);
end

procedure Node029 begin
   Reply(960);

   NOption(961, Node997, 004);
end

procedure Node890 begin
   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -40 ) ) ) then
      call Node024;
   else
      call Node017;
end

procedure Node891 begin
   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -40 ) ) ) then
      call Node026;
   else
      call Node017;
end

procedure Node892 begin
   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -40 ) ) ) then
      call Node028;
   else
      call Node027;
end
//end added
