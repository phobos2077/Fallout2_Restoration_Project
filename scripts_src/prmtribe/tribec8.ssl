/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "tribec8"
#include "../headers/define.h"

#define NAME                    SCRIPT_TRIBEC8
#define TOWN_REP_VAR            GVAR_TOWN_REP_PRIMITIVE_TRIBE

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure combat_p_proc;
procedure destroy_p_proc;
procedure critter_p_proc;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure wield_spear_p_proc;

procedure Node995;
procedure Node996;
procedure Node997;
procedure Node999;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Home_Tile                  (7)
#define LVAR_Bring_Wood                 (8)

#define REFUSED                         (1)
#define WAIT                            (2)
#define AGREED                          (3)
#define FINISHED                        (4)

variable step := 1;
variable STEAL_Once;
variable WIELD_Once;
/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
   if (local_var(LVAR_Home_Tile) == 0) then begin
       set_local_var(LVAR_Home_Tile,self_tile);
   end
end

procedure timed_event_p_proc begin
   if (combat_is_initialized) then begin
      add_timer_event(self_obj,game_ticks(random(5,9)),1);
   end else if (fixed_param == 1) then begin
       if (local_var(LVAR_Home_Tile) == 21902) then begin
           self_walk_to_tile(tile_num_in_direction(self_tile,random(0,5),random(3,7)));
           add_timer_event(self_obj,game_ticks(random(15,25)),1);
       end
       else if (local_var(LVAR_Home_Tile) == 19494) then begin
            if (step == 1) then begin
               step:=2;
               reg_anim_clear( self_obj );
               //reg_anim_begin();
               anim(self_obj, ANIM_magic_hands_ground, 0);
	            //reg_anim_end();
	            rm_fixed_timer_event(self_obj, fixed_param);
               add_timer_event(self_obj,game_ticks(1),1);
            end else if (step == 2) then begin
               step:=1;
               reg_anim_clear( self_obj );
               //reg_anim_begin();
               anim(self_obj, ANIM_stand, 0);
	            //reg_anim_end();
	            add_timer_event(self_obj,game_ticks(random(15,30)),1);
	         end
       end
       else begin
            if(random(1,2) == 1) then
               self_walk_to_tile(24921);

               //animate_move_to_tile(tile_num_in_direction(local_var(LVAR_Home_Tile),24921,random(3,7)));
            else
                self_walk_to_tile(21121);
               //animate_move_to_tile(tile_num_in_direction(local_var(LVAR_Home_Tile),21121,random(3,7)));

            add_timer_event(self_obj,game_ticks(random(15,20)),1);
       end
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   if (self_is_male) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end


procedure description_p_proc begin
   script_overrides;
   if (self_is_male) then
      display_msg(mstr(102));
   else
      display_msg(mstr(103));
end



procedure use_skill_on_p_proc begin
   /*script_overrides;
   if (action_being_used == SKILL_STEAL) then begin
      if (STEAL_Once == 0) then begin
         float_msg(self_obj, mstr(209), FLOAT_MSG_RED );
         //floater_bad(209);
         STEAL_Once:=1;
      end
      else if (STEAL_Once == 1) then begin
         set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
         attack(dude_obj);
      end
   end*/

end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   attack(dude_obj);
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   call wield_spear_p_proc;
   add_timer_event(self_obj,game_ticks(random(5,9)),1);

   set_self_team(TEAM_PRIMITIVE_TRIBE);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   end
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if ((global_var(GVAR_MERCHANT_MEETING) > 1) or (global_var(GVAR_TRIBE_WEAPONS) == 2) or (global_var(GVAR_TRIBE_GHOST) == 3) or (global_var(GVAR_SULIK_SISTER) >= 3) ) then begin
      //float_msg(self_obj, message_str(1308, random(204, 208)), FLOAT_MSG_WHITE );
      if ( (self_is_female) and (global_var(GVAR_TRIBE_FIREWOOD) < FINISHED) ) then begin
         if (global_var(GVAR_TRIBE_FIREWOOD) == WAIT) then begin
               start_gdialog(NAME,self_obj,4,-1,-1);
               gSay_Start;
                  call Node006;
               gSay_End;
               end_dialogue;
         end else if (global_var(GVAR_TRIBE_FIREWOOD) == REFUSED) then begin
               call Node007;
         end else if (global_var(GVAR_TRIBE_FIREWOOD) == AGREED) then begin
               start_gdialog(NAME,self_obj,4,-1,-1);
               gSay_Start;
                  call Node008;
               gSay_End;
               end_dialogue;
         end else begin
               start_gdialog(NAME,self_obj,4,-1,-1);
               gSay_Start;
                  call Node001;
               gSay_End;
               end_dialogue;
         end
      end else
            float_msg(self_obj, mstr(random(204, 208)), FLOAT_MSG_WHITE);
   end
   else begin
   	float_msg(self_obj, mstr(random(200, 203)), FLOAT_MSG_RED );
   	//floater_bad(random(200,203));
   end
end

procedure critter_p_proc
begin

   if (self_can_see_dude) then begin
      if (has_rep_slaver) then begin
         floater(500);
         attack(dude_obj);
      end else if (REP_ENEMY_PRIMITIVE_TRIBE) then begin
         attack(dude_obj);
      end
   end

end

procedure destroy_p_proc
begin
   inc_good_critter
   set_global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE, global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE) - 10);
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
end

procedure combat_p_proc
begin
   if (global_var(GVAR_ENEMY_PRIMITIVE_TRIBE) == 1) then begin
      attack(dude_obj);
   end
end

procedure wield_spear_p_proc
begin
   if ( (WIELD_Once == 0) and (self_is_male) ) then begin
      wield_obj(self_item(PID_SHARPENED_POLE));
      WIELD_Once:=1;
   end
end


procedure Node001 begin
   Reply(300);

   NLowOption(400,Node002);
   NLowOption(401,Node002);

   NOption(301,Node002,004);
   NOption(302,Node996,004);
   BOption(303,Node997,004);
end

procedure Node002 begin
   Reply(304);
   if (dude_item_count(PID_FIREWOOD) >= 3) then begin
      NOption(306,Node004,004);
      NLowOption(411,Node004);
   end else begin
      NOption(305,Node003,004);
      NLowOption(410,Node003);
   end
end

procedure Node003 begin
   set_global_var(GVAR_TRIBE_FIREWOOD,AGREED);
   Reply(307);
   NOption(313,Node999,001);
end

procedure Node004 begin
   variable wood;
   variable remove;

   set_global_var(GVAR_TRIBE_FIREWOOD,FINISHED);
   wood:=dude_item(PID_FIREWOOD);
   remove := rm_mult_objs_from_inven(dude_obj, wood, 3 );
   destroy_object(wood);

   Reply(308);
   NLowOption(420,Node995);
   NOption(309,Node995,004);
   BOption(310,Node005,004);
end

procedure Node005 begin
   set_global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE, global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE) + 1);
   dude_caps_adjust(75);
   give_xp(125);
   Reply(311);
   BOption(312,Node999,004);
   BOption(330,Node999,004);
end

procedure Node006 begin
   Reply(318);
   BOption(319,Node002,004);
   BOption(320,Node999,004);
   BOption(321,Node997,004);
end

procedure Node007 begin
   float_msg(self_obj, mstr(314), FLOAT_MSG_RED );
end

procedure Node008 begin
   Reply(315);
   if (dude_item_count(PID_FIREWOOD) >= 3) then begin
      NLowOption(411,Node004);
      NOption(316,Node004,004);
   end else begin
      NLowOption(410,Node999);
      NOption(317,Node999,004);
   end
end

procedure Node995 begin
   give_xp(200);
   set_global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE, global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE) + 5);
end

procedure Node996 begin
   set_global_var(GVAR_TRIBE_FIREWOOD, WAIT);
end

procedure Node997 begin
   set_global_var(GVAR_TRIBE_FIREWOOD, REFUSED);
   set_global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE, global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE) - 5);
end

procedure Node999 begin

end
