/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "tribec3"
#include "../headers/define.h"

#define NAME                    SCRIPT_TRIBEC3
#define TOWN_REP_VAR            GVAR_TOWN_REP_PRIMITIVE_TRIBE

#include "../headers/command.h"

#define STEAL_Skill           (has_skill(dude_obj,SKILL_STEAL))
#define MAX_TRAVEL              (10)

/* Standard Script Procedures */
procedure start;
procedure combat_p_proc;
procedure destroy_p_proc;
procedure critter_p_proc;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure wield_spear_p_proc;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Home_Tile                  (7)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/
variable In_Timed_Event;
variable STEAL_Once;
variable WIELD_Once;
/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
   if (local_var(LVAR_Home_Tile) == 0) then begin
       set_local_var(LVAR_Home_Tile,self_tile);
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
       if (tile_distance(self_tile,local_var(LVAR_Home_Tile)) < MAX_TRAVEL) then begin
           self_walk_to_tile(tile_num_in_direction(self_tile,random(0,5),random(3,7)));
       end
       else begin
           self_walk_to_tile(tile_num_in_direction(local_var(LVAR_Home_Tile),random(0,5),random(3,7)));
       end
       In_Timed_Event:=0;
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
       //display_msg(message_str(1308, 100));
      display_msg(mstr(100));
   else
      //display_msg(message_str(1308, 101));
      display_msg(mstr(101));
end


procedure description_p_proc begin
   script_overrides;
   //display_msg(message_str(1308, 102));
   display_msg(mstr(102));
end



procedure use_skill_on_p_proc begin
   /*script_overrides;
   if (action_being_used == SKILL_STEAL) then begin
      if (STEAL_Once == 0) then begin
         float_msg(self_obj, mstr(209), FLOAT_MSG_RED );
         //floater_bad(209);
         STEAL_Once:=1;
      end
      else if (STEAL_Once == 1) then begin
         set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
         attack(dude_obj);
      end
   end*/

end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   attack(dude_obj);
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   set_self_team(TEAM_PRIMITIVE_TRIBE);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin


end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   end
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin

   if(local_var(LVAR_Herebefore) == 0) then
      set_local_var(LVAR_Herebefore,1);

   if (Fallout2_enclave_destroyed) then begin
	     floater(random(300,301));
   end else if ((global_var(GVAR_MERCHANT_MEETING) > 1) or (global_var(GVAR_TRIBE_WEAPONS) == 2) or (global_var(GVAR_TRIBE_GHOST) == 3) or (global_var(GVAR_SULIK_SISTER) >= 3) ) then begin
      //float_msg(self_obj, message_str(1308, random(204, 208)), FLOAT_MSG_WHITE );
      float_msg(self_obj, mstr(random(204, 208)), FLOAT_MSG_WHITE);
   end
   else begin
   	float_msg(self_obj, mstr(random(200, 203)), FLOAT_MSG_RED );
   	//floater_bad(random(200,203));
   end
end

procedure critter_p_proc
begin

  if ( (self_can_see_dude) and (has_rep_slaver) ) then begin
      floater(210);
      attack(dude_obj);
  end
  if ((random(0,100) == 1) and (In_Timed_Event == 0) and (not combat_is_initialized) ) then begin
       In_Timed_Event:=1;
       add_timer_event(self_obj,game_ticks(random(5,9)),1);
  end
  if ( (REP_ENEMY_PRIMITIVE_TRIBE) and (self_can_see_dude) ) then begin
       attack(dude_obj);
  end
  if (global_var(GVAR_TRIBE_WEAPONS)==2) then begin
      call wield_spear_p_proc;
  end
end

procedure destroy_p_proc
begin
   inc_good_critter
   set_global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE, global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE) - 10);
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
end

procedure combat_p_proc
begin
   if (global_var(GVAR_ENEMY_PRIMITIVE_TRIBE) == 1) then begin
      attack(dude_obj);
   end
end

procedure wield_spear_p_proc
begin
   if (WIELD_Once == 0) then begin
      wield_obj(self_item(PID_SPEAR));
      WIELD_Once:=1;
   end
end
