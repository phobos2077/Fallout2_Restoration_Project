/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "tribec6"
#include "../headers/define.h"

#define NAME                    SCRIPT_TRIBEC6

#define TOWN_REP_VAR            GVAR_TOWN_REP_PRIMITIVE_TRIBE

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure destroy_p_proc;
procedure combat_p_proc;
procedure critter_p_proc;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure talk_two_p_proc;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node999;
procedure Node998;
procedure Node005;


/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Finished                   (7)
#define LVAR_Was_Rude                   (8)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/


procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      //display_msg(message_str(1311, 300));
      display_msg(mstr(300));
   else
      //display_msg(message_str(1311, 301));
      display_msg(mstr(301));
end


procedure description_p_proc begin
   script_overrides;
   //display_msg(message_str(1311, 302));
   display_msg(mstr(302));
end


procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   attack(dude_obj);
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   set_self_team(TEAM_PRIMITIVE_TRIBE);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   end
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/
procedure talk_p_proc
begin
   if (local_var(LVAR_Finished)==1) then begin
      if (Fallout2_enclave_destroyed) then begin
         floater(500);
      end else begin
         floater(random(140, 144));
      end
   end
   else begin
      call talk_two_p_proc;
   end
end

procedure talk_two_p_proc begin
   if (local_var(LVAR_Herebefore) == 2) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node003;
      gSay_End;
      end_dialogue;
   end
   else if (local_var(LVAR_Herebefore) == 3) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node004;
      gSay_End;
      end_dialogue;
   end
   else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end
end


procedure combat_p_proc
begin
   if (global_var(GVAR_ENEMY_PRIMITIVE_TRIBE)==1) then begin
      attack(dude_obj);
   end
end

procedure destroy_p_proc
begin
   inc_good_critter
   set_global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE, global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE) - 10);
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
end

procedure critter_p_proc
begin

   if (self_can_see_dude) then begin
      if (has_rep_slaver) then begin
         floater(260);
         attack(dude_obj);
      end else if (REP_ENEMY_PRIMITIVE_TRIBE) then begin
         attack(dude_obj);
      end
   end

   if ( ((global_var(GVAR_MERCHANT_MEETING) > 1) or (global_var(GVAR_TRIBE_WEAPONS) == 2) or (global_var(GVAR_TRIBE_GHOST) == 3) or (global_var(GVAR_SULIK_SISTER) >= 3) ) and (local_var(LVAR_Herebefore) != 3) ) then begin
      set_local_var(LVAR_Herebefore,3);
   end

end

procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
   ndebug("LVAR_Herebefore == "+local_var(LVAR_Herebefore));
   if (local_var(LVAR_Herebefore) == 0) then
   begin
      set_local_var(LVAR_Herebefore,1);
   end
end

procedure Node001
begin
	//gsay_reply(1311, 100);
	Reply(100);
   //giq_option (4, 1311, 101, Node002, 50);
   NOption(101,Node002,004);
	//giq_option(4, 1311, 102, Node999, 50);
	NOption(102,Node999,004);

	NLowOption(103,Node002);
	NLowOption(104,Node999);
end

procedure Node002
begin
	//gsay_reply(1311, 110);
	Reply(110);
   //giq_option (4, 1311, 111, Node999, 50);
   NOption(111,Node999,001);
   set_local_var(LVAR_Herebefore,2);
   set_local_var(LVAR_Was_Rude,1);
end

procedure Node003
begin
	//gsay_reply(1311, 120);
	Reply(120);
   //giq_option (4, 1311, 121, Node999, 50);
   NOption(121,Node999,001);

end

procedure Node004
begin
	//gsay_reply(1311, 130);
	if (local_var(LVAR_Was_Rude) == 1) then
      Reply(130);
   else
      Reply(131);
   //giq_option (4, 1311, 131, Node005, 50);
   NOption(132,Node005,004);
   NLowOption(133,Node005);
end

procedure Node005
begin
   self_walk_to_tile(21103);
   set_local_var(LVAR_Finished,1);
end
