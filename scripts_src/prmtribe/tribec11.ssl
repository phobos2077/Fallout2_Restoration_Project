/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "tribec11"
#include "../headers/define.h"

#define NAME                    SCRIPT_TRIBEC11

#define TOWN_REP_VAR            GVAR_TOWN_REP_PRIMITIVE_TRIBE

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;


procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure wield_spear_p_proc;
procedure Node009;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Said_Once                  (7)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/
variable WIELD_Once;
import variable WARRIOR_obj;

procedure start begin
end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));

end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   attack(dude_obj);
end

procedure destroy_p_proc begin

   remove_blocking_hex(17311, 0);
   remove_blocking_hex(17110, 0);
   remove_blocking_hex(17309, 0);
   remove_blocking_hex(17308, 0);
   remove_blocking_hex(17507, 0);

   inc_good_critter
   set_global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE, global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE) - 10);
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);

end


/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   call wield_spear_p_proc;
   set_self_team(TEAM_PRIMITIVE_TRIBE);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure critter_p_proc
begin
   if (self_can_see_dude) then begin
      if (has_rep_slaver) then begin
         attack(dude_obj);
      end else if (REP_ENEMY_PRIMITIVE_TRIBE) then begin
         attack(dude_obj);
      end
   end

   if ( (global_var(GVAR_MISSING_WARRIOR) == 3) and (self_can_see_dude) )then begin
      start_dialog_at_node(Node006);
   end

end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   end
end

procedure talk_p_proc begin

   if ( (global_var(GVAR_MISSING_WARRIOR) > 4) and (global_var(GVAR_MISSING_WARRIOR) < 8) ) then begin
      if (Fallout2_enclave_destroyed) then begin
         floater(random(500,501));
      end else begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node009;
         gSay_End;
         end_dialogue;
      end
   end else if (global_var(GVAR_MISSING_WARRIOR) == 0) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end else if (global_var(GVAR_MISSING_WARRIOR) < 5) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node004;
      gSay_End;
      end_dialogue;
   end else begin
       start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end

   if (local_var(LVAR_Herebefore) == 0) then
      set_local_var(LVAR_Herebefore,1);
end

procedure Node999 begin
end

procedure Node990 begin
   remove_blocking_hex(17311, 0);
   remove_blocking_hex(17110, 0);
   remove_blocking_hex(17309, 0);
   remove_blocking_hex(17308, 0);
   remove_blocking_hex(17507, 0);
end

procedure Node001 begin
   if (local_var(LVAR_Herebefore) == 0) then begin
      Reply(200);
      NOption(201,Node002,004);
   end else begin
      Reply(206);
      NOption(207,Node999,004);
   end
end

procedure Node002 begin
   Reply(202);
   NOption(203,Node003,004);
end

procedure Node003 begin
   Reply(204);
   NOption(205,Node999,004);
end

procedure Node004 begin
   if (local_var(LVAR_Herebefore) == 0) then
      Reply(200);
   else
      Reply(206);

   if (global_var(GVAR_MISSING_WARRIOR) == 1) then
      NOption(208,Node005,004);
   else
      NOption(207,Node999,004);

end

procedure Node005 begin
   Reply(209);
   NOption(210,Node990,004);
end

procedure Node006 begin
   Reply(300);
   NOption(301,Node007,004);
end

procedure Node007 begin
   Reply(302);
   NOption(303,Node008,004);
end

procedure Node008 begin
   set_global_var(GVAR_MISSING_WARRIOR,4);
   move_to(WARRIOR_obj, 18517, 1);
   load_map(MAP_PRIMITIVE_TRIBE1,0);
end

procedure wield_spear_p_proc
begin
   if ((WIELD_Once == 0)) then begin
      wield_obj(self_item(PID_SHARP_SPEAR));
      WIELD_Once:=1;
   end
end

procedure Node009 begin
   if (local_var(LVAR_Said_Once) == 0 ) then begin
      set_local_var(LVAR_Said_Once,1);
      Reply(400);
      NOption(401,Node999,004);
   end else begin
      Reply(402);
      NOption(403,Node999,004);
   end
end
