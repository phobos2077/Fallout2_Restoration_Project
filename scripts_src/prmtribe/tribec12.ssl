/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "tribec12"
#include "../headers/define.h"

#define NAME                    SCRIPT_TRIBEC12
#define TOWN_REP_VAR            GVAR_TOWN_REP_PRIMITIVE_TRIBE

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;


procedure Node999;
procedure Node998;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node090;
/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Sulik_Sis                  (7)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/
variable More_Questions := 0;
variable kill_leader := 0;

procedure start begin
end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));

end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   attack(dude_obj);
end

procedure destroy_p_proc
begin
   inc_good_critter
   set_global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE, global_var(GVAR_TOWN_REP_PRIMITIVE_TRIBE) - 10);
   set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   set_self_team(TEAM_PRIMITIVE_TRIBE);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if (has_rep_slaver) then begin
         floater(200);
         attack(dude_obj);
      end else if (REP_ENEMY_PRIMITIVE_TRIBE) then begin
         attack(dude_obj);
      end
   end
end

procedure combat_p_proc
begin
   if ( (global_var(GVAR_ENEMY_PRIMITIVE_TRIBE)==1) ) then begin
      attack(dude_obj);
   end
end


procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin

end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_global_var(GVAR_ENEMY_PRIMITIVE_TRIBE,1);
   end
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
      More_Questions := 0;
      kill_leader := 0;

      if (Fallout2_enclave_destroyed) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node007;
         gSay_End;
         end_dialogue;
      end else begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
         gSay_End;
         end_dialogue;
      end
      set_local_var(LVAR_Herebefore,1);
      if (kill_leader) then
         critter_dmg(self_obj,10000,DMG_fire);
end

procedure Node001 begin
   if (More_Questions == 1) then
      Reply(105);
   else if (local_var(LVAR_Herebefore) == 1) then
      Reply(104);
   else if (global_var(GVAR_SULIK_SISTER) >= 4) then
      Reply(102);
   else
      Reply(103);

   if( not( dude_found_geck ) ) then
      NOption(106,Node002,004);

   if ( (global_var(GVAR_SULIK_SISTER) == 1) and (local_var(LVAR_Sulik_Sis) == 0) ) then
      NOption(107,Node003,004);
   NOption(108,Node006,004);
   NOption(109,Node999,004);

   if ( (global_var(GVAR_SULIK_SISTER) == 1) and (local_var(LVAR_Sulik_Sis) == 0) ) then
      NLowOption(141,Node003);

   if( not( dude_found_geck ) ) then
      NLowOption(140,Node002);

   NLowOption(142,Node999);
   More_Questions := 0;
end

procedure Node002 begin
   Reply(110);
   NOption(111,Node090,004);

   NLowOption(150,Node090);
   NLowOption(142,Node999);

   NOption(112,Node999,004);
end

procedure Node003 begin
   Reply(120);
   if (Sulik_In_Party) then begin
      NOption(121,Node004,004);
      NLowOption(160,Node004);
   end else if (global_var(GVAR_SULIK_DEAD) == 1) then begin
      NOption(123,Node004,004);
      NLowOption(162,Node004);
   end else begin
      NOption(122,Node004,004);
      NLowOption(161,Node004);
   end
end

procedure Node004 begin
   if (Sulik_In_Party) then
      Reply(124);
   else if (global_var(GVAR_SULIK_DEAD) == 1) then
      Reply(126);
   else
      Reply(125);

   NOption(127,Node005,004);
   NLowOption(170,Node005);
end

procedure Node005 begin
   Reply(128);
   NOption(129,Node090,004);
   NOption(112,Node999,004);

   NLowOption(150,Node090);
   NLowOption(142,Node999);

   set_local_var(LVAR_Sulik_Sis,1);
end

procedure Node006 begin
   Reply(130);
   NOption(129,Node090,004);
   NOption(112,Node999,004);
end

procedure Node007 begin
   Reply(300);
   NOption(301,Node008,004);
   NOption(302,Node999,004);
end

procedure Node008 begin
   Reply(310);
   NOption(311,Node009,004);
   if (global_var(GVAR_EASTER_EGG_ENCOUNTER) == 1) then
      NOption(312,Node009,004);
end

procedure Node009 begin
   Reply(320);
   NOption(321,Node010,004);
end

procedure Node010 begin
   float_msg(dude_obj, mstr(321), FLOAT_MSG_RED);
   kill_leader := 1;
end

procedure Node090 begin
   More_Questions := 1;
   call Node001;
end
