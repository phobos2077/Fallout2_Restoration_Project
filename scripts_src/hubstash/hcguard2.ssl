/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "hcguard2"
#include "../headers/define.h"

#define NAME                    SCRIPT_HCGUARD2

#include "../headers/command.h"
#include "../headers/sanfran.h"
#include "../headers/hubstash.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure destroy_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;

procedure Node999;
procedure Node998;
procedure Node990;
procedure Node991;
procedure Node992;
procedure Node800;
procedure Node801;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Guard_Leave                (7)
#define LVAR_Guard_Leave2               (8)
#define LVAR_Force_Talk                 (9)
#define LVAR_Warned_Tamper              (10)

variable From_Node;

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/
import variable object_tamper;
import variable guard2_obj;
/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
   guard2_obj := self_obj;
end

procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */
   if ( ((san_fran_flag(SF_ELRON_ENEMY)) or (map_var(MVAR_Attack_Player) == 1)) and (self_can_see_dude) ) then begin
       attack(dude_obj);
   end

   if (map_var(MVAR_Attack_Player) != 1) then begin


      if ( (local_var(LVAR_Force_Talk) == 1) and (self_can_see_dude) ) then begin
         force_dialog_start(@Node008);
      end

      else if (local_var(LVAR_Guard_Leave) == 1) then begin
         if ( (game_time - (map_var(MVAR_Guard_Time)))  >= ONE_GAME_MINUTE * 10) then begin
            set_local_var(LVAR_Guard_Leave,0);
            if (dude_elevation == 1) then begin
               move_to(self_obj, 22328, 1);
               set_obj_visibility(self_obj, false);
               if (self_can_see_dude) then begin
                  force_dialog_start(@Node008);
               end
               add_timer_event(self_obj,10,3);
            end else begin
               set_obj_visibility(self_obj, false);
               if (self_can_see_dude) then begin
                  force_dialog_start(@Node008);
               end
               set_map_var(MVAR_Room_Empty,0);
            end
         end
      end
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == 2) then begin
      set_obj_visibility(self_obj, true);
   end else if (fixed_param == 3) then begin
      if (map_var(MVAR_Attack_Player) != 1) then begin
         set_obj_visibility(self_obj, true);
         move_to(self_obj, 22326, 2);
         set_local_var(LVAR_Force_Talk,1);
         set_obj_visibility(self_obj, false);
      end
   end else if (fixed_param == 4) then begin
      attack(dude_obj);
   end else if (fixed_param == 5) then begin
      if (object_tamper == 1) then begin
         object_tamper := 0;
         force_dialog_start(@Node009);
      end else if (object_tamper == 2) then begin
         if (local_var(LVAR_Warned_Tamper) == 0) then begin
            object_tamper := 0;
            set_local_var(LVAR_Warned_Tamper,1);
            force_dialog_start(@Node010);
         end else begin
            object_tamper := 0;
            force_dialog_start(@Node011);
         end
      end else begin
         object_tamper := 0;
      end
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (local_var(LVAR_Hostile) == 0 ) then begin
      set_map_var(MVAR_Attack_Player,1);
      set_local_var(LVAR_Hostile,1);
   end
end

procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_evil_critter
   guard2_obj := 0;

/* Set global_variable for Enemy status*/
end


/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   guard2_obj := self_obj;
   set_self_team(TEAM_HUBOLOGIST_STASH);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
   guard2_obj := self_obj;
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_map_var(MVAR_Attack_Player,1);
   end
end


/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
      check_forced_dialog else begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
            set_local_var(LVAR_Herebefore,1);
         gSay_End;
         end_dialogue;
      end
end


procedure Node999 begin

end

procedure Node998 begin
   set_map_var(MVAR_Attack_Player,1);
   set_local_var(LVAR_Hostile,1);
end

procedure Node996 begin
   set_map_var(MVAR_Attack_Player,1);
   set_local_var(LVAR_Hostile,1);
   add_timer_event(self_obj,5,4);
   //attack(dude_obj);
end

procedure Node001 begin
   Reply(200);
   if (has_skill(dude_obj, SKILL_SPEECH) > 100) then
      NOption(201, Node990, 4);
   NOption(202, Node991, 4);
end

procedure Node002 begin
   Reply(210);
   NOption(211, Node992, 4);
   BOption(212, Node998, 4);
end

procedure Node003 begin
   Reply(220);
   NOption(221, Node004, 4);
end

procedure Node990 begin
   From_Node := 990;

   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -30 ) ) ) then
      call Node005;
   else
      call Node002;
end

procedure Node991 begin
   From_Node := 991;

   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -30 ) ) ) then
      call Node003;
   else
      call Node002;
end

procedure Node004 begin
   Reply(230);
   NOption(231, Node800, 4);
end

procedure Node005 begin
   Reply(250);
   NOption(251, Node801, 4);
end

procedure Node006 begin
   Reply(240);
   if (From_Node == 991) then
      NOption(241, Node003, 4);
   else if (From_Node == 990) then
      NOption(242, Node005, 4);
   BOption(212, Node998, 4);
end

procedure Node007 begin
   Reply(260);
   NOption(g_mstr(350), Node998, 4);
end

procedure Node008 begin
   set_local_var(LVAR_Force_Talk,0);
   Reply(300);
   NOption(g_mstr(350), Node998, 4);
end

procedure Node992 begin
   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -20 ) ) ) then
      call Node006;
   else
      call Node007;
end

procedure Node800 begin
   add_timer_event(self_obj,15,2);
   set_map_var(MVAR_Guard_Time,game_time);
   set_local_var(LVAR_Guard_Leave,1);
   set_map_var(MVAR_Room_Empty,1);
   ndebug("guard time: " + MVAR_Guard_Time);
end

procedure Node801 begin
   add_timer_event(self_obj,15,2);
   set_local_var(LVAR_Guard_Leave2,1);
   set_map_var(MVAR_Room_Empty,1);
end

procedure Node009 begin
   Reply(400);
   NOption(g_mstr(350), Node996, 4);
end

procedure Node010 begin
   Reply(401);
   NOption(g_mstr(350), Node999, 4);
end

procedure Node011 begin
   Reply(402);
   NOption(g_mstr(350), Node996, 4);
end
