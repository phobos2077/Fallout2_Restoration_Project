/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "himndor"
#include "../headers/define.h"

#define NAME                    SCRIPT_HIMNDOR

#include "../headers/command.h"
#include "../headers/hubstash.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Times_Damaged              (5)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/
import variable stashdoor_obj;

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
   stashdoor_obj := self_obj;
end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
   if (obj_is_locked(self_obj)) then begin
      script_overrides;
      //do nothing
   end
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end


procedure description_p_proc begin
   script_overrides;
   if (obj_is_locked(self_obj)) then
      display_msg(mstr(101));
   else
      display_msg(mstr(102));
end

procedure use_skill_on_p_proc begin
   if (action_being_used == SKILL_LOCKPICK) then
      display_msg(g_mstr(20100)); // no lock in this door
   else
      display_msg(g_mstr(20000)); // that does nothing
end

procedure use_obj_on_p_proc begin
   if is_lockpick(obj_being_used_with) then
      display_msg(g_mstr(20100)); // no lock in this door
   else
      display_msg(g_mstr(20000)); // that does nothing
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin //added by killap
      if (local_var(LVAR_Times_Damaged) == 1) then begin
         display_msg(mstr(110));
      end else begin
         display_msg(mstr(111));
         destroy_object(self_obj);
      end
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/


procedure map_enter_p_proc begin
   stashdoor_obj := self_obj;
   if ( (map_var(MVAR_Stash_Enter) != 1) ) then begin
      obj_lock(self_obj);
   end
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
   stashdoor_obj := self_obj;
end
