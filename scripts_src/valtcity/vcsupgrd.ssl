/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location:
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "vcsupgrd"
#include "../headers/define.h"
#include "../headers/vctyvlt.h"

#define NAME                    SCRIPT_VCSUPGRD
#define TOWN_REP_VAR            (GVAR_TOWN_REP_VAULT_CITY)

#include "../headers/command.h"
#include "../headers/modreact.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node016a;
procedure Node016b;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Sing                       (7)
#define LVAR_Warned_About_Door          (8)
#define LVAR_Commented_On_Singing       (9) //added by killap

#define SING_NOTHING                   (0)
#define SING_ALLOWED                   (1)
#define SING_NOT_ALLOWED               (2)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
import variable vault_city_martin_obj; // Seraph's Code
variable Only_Once:=0;
variable Sing_State := 0;

procedure start begin
   vault_city_martin_obj := self_obj; // Seraph's Code
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   vault_city_martin_obj := self_obj; // Seraph's Code
   Only_Once:=0;
   Sing_State := 0;

   set_self_team(TEAM_VAULT_CITIZENS);
   set_self_ai(AI_COWARD);

   if( not( is_loading_game ) ) then begin
      if( ( game_time_hour > 200 ) and ( game_time_hour < 700 ) ) then begin
         // I'm SLEEPING!!!!
         move_to( self_obj, 24886, 1 );
         critter_attempt_placement( self_obj, 24886, 1 );
         set_map_var( MVAR_Martin_In_Area, 0 );
         self_rotate(3);
         rm_timer_event( self_obj );
         add_timer_event( self_obj, 1, 1 );
         add_timer_event( self_obj, 1, 2 );
      end
      else begin
         // I'm WORKING!!!!
         move_to( self_obj, 23488, 2 );
         critter_attempt_placement( self_obj, 23488, 2 );
         set_map_var( MVAR_Martin_In_Area, 1 );
         self_rotate(2);
         rm_timer_event( self_obj );
         add_timer_event( self_obj, 1, 1 );
         add_timer_event( self_obj, 1, 2 );
      end
   end
end

procedure timed_event_p_proc begin
   variable singTimer;

   singTimer := 0;
   if( fixed_param == 1 ) then begin
      if( not( combat_is_initialized ) ) then begin
         if( ( self_elevation == 1) and
             ( game_time_hour > 200 ) and
             ( game_time_hour < 700 ) ) then
            call Node022;
         else if( Fallout2_enclave_destroyed ) then
            call Node001;
         else if( global_var( GVAR_VAULT_CITIZEN ) == CITIZEN_CAPTAIN_GUARD ) then
            call Node005;
         else if( global_var( GVAR_VAULT_CITIZEN ) == CITIZEN_KICKED_OUT ) then
            call Node002;
         else if( Marcus_Ptr != 0 ) then
            call Node003;
         else if( Lenny_Ptr != 0 ) then
            call Node004;
         else if( local_var( LVAR_Sing ) != SING_NOT_ALLOWED ) then begin
            call Node005;
            singTimer := 1;
         end
         else
            call Node006;
      end
      // If Martin is singing, timer is only 2 seconds.
      if( singTimer == 1 ) then begin
         add_timer_event( self_obj, game_ticks(4), 1 );
      end
      else
         add_timer_event( self_obj, game_ticks( random( 15, 30 ) ), 1 );
   end
   else if( fixed_param == 2 ) then begin
      if( ( map_var( MVAR_Martin_In_Area ) == 1 ) and ( not( combat_is_initialized ) ) ) then begin
         if( self_tile == 23488) then
            animate_move_obj_to_tile( self_obj, 24884, -1 );
         else if( self_tile == 24884) then
            animate_move_obj_to_tile( self_obj, 26077, -1 );
         else if( self_tile == 26077) then
            animate_move_obj_to_tile( self_obj, 21891, -1 );
         else if( self_tile == 21891) then
            animate_move_obj_to_tile( self_obj, 23488, -1 );
         else begin
            // If for some reason Martin gets off track, just put him
            // at the beginning tile.
            animate_move_obj_to_tile( self_obj, 23488, -1 );
         end
         add_timer_event( self_obj, game_ticks( 40 ), 2 );
      end
   end
end

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ( ( (local_var(LVAR_Hostile) == 2) or ( global_var( GVAR_ENEMY_VAULT_CITY ) == 1 ) ) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

   if( map_var( MVAR_Martin_Sees_Lockpick ) == 1 ) then begin
      set_map_var( MVAR_Martin_Sees_Lockpick, 0 );
      if( local_var( LVAR_Warned_About_Door ) == 0 ) then begin
         set_local_var( LVAR_Warned_About_Door, 1 );

         // Turn off random floaters for a few seconds so the player
         // can read his warning
         rm_timer_event( self_obj );
         add_timer_event( self_obj, game_ticks(7), 1 );
         add_timer_event( self_obj, 1, 2 );

         floater(188);
      end
      else
         call Node002;
   end
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Personal_Enemy,1);
      set_global_var( GVAR_ENEMY_VAULT_CITY, 1 );
      set_global_var( GVAR_VAULT_CITIZEN, CITIZEN_KICKED_OUT );
      set_global_var( GVAR_TOWN_REP_VAULT_CITY, (global_var(GVAR_TOWN_REP_VAULT_CITY) + REP_TOWN_KICKED_OUT ) );
      set_global_var( GVAR_VAULT_CITIZENSHIP, 0 );
   end
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=0;
   Slavery_Tolerant:=SLAVE_TOLERANT;
   Karma_Perception:=KARMA_PERCEPTION1;

   CheckKarma;

   GetReaction;

   if( ( self_elevation == 1) and
       ( game_time_hour > 200 ) and
       ( game_time_hour < 700 ) ) then
      call Node022;
   else if( Fallout2_enclave_destroyed ) then
      call Node001;
   else if( global_var( GVAR_VAULT_CITIZEN ) == CITIZEN_CAPTAIN_GUARD ) then begin
      if( local_var( LVAR_Herebefore ) == 0 ) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node007;
         gSay_End;
         end_dialogue;
      end
      else begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node016;
         gSay_End;
         end_dialogue;
      end
   end
   else if( global_var( GVAR_VAULT_CITIZEN ) == CITIZEN_KICKED_OUT ) then
      call Node002;
   else if( Marcus_Ptr != 0 ) then
      call Node003;
   else if( Lenny_Ptr != 0 ) then
      call Node004;
   else if( local_var( LVAR_Herebefore ) == 0 ) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node007;
      gSay_End;
      end_dialogue;
   end
   else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node016;
      gSay_End;
      end_dialogue;
   end

   set_local_var( LVAR_Herebefore, 1 );
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

    vault_city_martin_obj := 0; // Seraph's Code

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if( local_var( LVAR_Herebefore ) == 0 ) then
      display_msg(mstr(101));
   else
      display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(103));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
   attack(dude_obj);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   floater(104);
end

procedure Node002 begin
   floater(105);
   call Node998;
end

procedure Node003 begin
   floater(106);
   call Node998;
end

procedure Node004 begin
   floater(107);
   call Node998;
end

procedure Node005 begin
   floater( 108 + (2 * Sing_State) );
   if( Sing_State == 8 ) then
      Sing_State := 0;
   else
      Sing_State += 1;
end

procedure Node006 begin
   floater(125);
end

procedure Node007 begin
   Reply(126);

   NLowOption(127, Node008);
   if( check_general_rep >= 0 ) then
      NOption(128, Node008, 004);
   else
      NOption(129, Node008, 004);
end

procedure Node008 begin
   Reply(130);

   NLowOption(131, Node019);
   if( check_general_rep >= 0 ) then
      NOption(132, Node009, 004);
   else
      NOption(133, Node009, 004);
end

procedure Node009 begin
   if( check_general_rep >= 0 ) then begin
      if( dude_perception <= 6 ) then
         Reply( mstr(134) + " " + mstr(136) );
      else
         Reply( mstr(134) + " " + mstr(136) + " " + mstr(137) );
   end
   else begin
      if( dude_perception <= 6 ) then
         Reply( mstr(135) + " " + mstr(136) );
      else
         Reply( mstr(135) + " " + mstr(136) + " " + mstr(138) );
   end

   NOption(139, Node011, 004);
   NOption(140, Node010, 004);
   NOption(141, Node999, 004);
end

procedure Node010 begin
   if( dude_perception <= 6 ) then
      Reply(142);
   else
      Reply( mstr(142) + " " + mstr(143) );

   NOption(144, Node011, 004);
   NOption(145, Node999, 004);
end

procedure Node011 begin
   if( dude_perception <= 6 ) then
      Reply(146);
   else
      Reply( mstr(146) + " " + mstr(147) );

   NOption(148, Node012, 004);
   NOption(149, Node013, 004);
   NOption(150, Node999, 004);
end

procedure Node012 begin
   if( dude_perception <= 6 ) then
      Reply(151);
   else
      Reply( mstr(151) + " " + mstr(152) );

   NOption(153, Node013, 004);
   NOption(154, Node999, 004);
end

procedure Node013 begin
   if( dude_perception <= 6 ) then
      Reply(155);
   else
      Reply( mstr(155) + " " + mstr(156) );

   if( global_var( GVAR_VAULT_REDDING_PROBLEM ) < REDDING_PROBLEM_DELIVERED_ANTIDOTE ) then
      NOption(157, Node014, 004);
   NOption(158, Node999, 004);
end

procedure Node014 begin
   if( dude_perception <= 6 ) then
      Reply(159);
   else
      Reply( mstr(159) + " " + mstr(160) );

   NOption(161, Node015, 004);
   NOption(162, Node999, 004);
end

procedure Node015 begin
   if( dude_perception <= 6 ) then
      Reply(163);
   else
      Reply( mstr(163) + " " + mstr(164) );

   NOption(165, Node010, 004);
   NOption(166, Node999, 004);
end

procedure Node016 begin
   if( ( dude_perception <= 6 ) or ( dude_iq < 4 ) ) then
      Reply(167);
   else
      Reply( mstr(167) + " " + mstr(168) );

   NLowOption(169, Node021);
   if ( local_var( LVAR_Sing ) != SING_NOT_ALLOWED ) then begin
      BOption(170, Node016a, 004);
      GOption(171, Node016b, 004);
   end
   NOption(172, Node011, 004);
   NOption(173, Node999, 004);
end

procedure Node016a begin
   if( local_var(LVAR_Commented_On_Singing) == 0 ) then begin  //added by killap
      set_local_var(LVAR_Commented_On_Singing,1);              //added by killap
      inc_general_rep( REP_BONUS_MARTIN_STOP_SINGING );
      set_local_var( LVAR_Sing, SING_NOT_ALLOWED );
    end

	call Node018;

end

procedure Node016b begin
   if( local_var(LVAR_Commented_On_Singing) == 0 ) then begin  //added by killap
      set_local_var(LVAR_Commented_On_Singing,1);              //added by killap
      inc_general_rep( REP_BONUS_MARTIN_KEEP_SINGING );
      set_local_var( LVAR_Sing, SING_ALLOWED );
   end

	call Node017;

end

procedure Node017 begin
   Reply(174);

   NOption(175, Node011, 004);
   NOption(176, Node999, 004);
end

procedure Node018 begin
   if( dude_perception <= 6 ) then
      Reply(177);
   else
      Reply( mstr(177) + " " + mstr(178) );

   NOption(179, Node011, 004);
   NOption(180, Node999, 004);
end

procedure Node019 begin
   Reply(181);

   NLowOption(182, Node020);
end

procedure Node020 begin
   Reply(183);

   NLowOption(184, Node021);
end

procedure Node021 begin
   Reply(185);

   NLowOption(186, Node999);
end

procedure Node022 begin
   floater(187);
end


//xxxxxxxxxxxxxxxxxxxx
