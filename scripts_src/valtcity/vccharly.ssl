/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Puking Charlie
        Location: Vault City Courtyard
        Description: Radiation-Infected Peasant

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "vccharly"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"

#define NAME                    SCRIPT_VCCHARLY
#define TOWN_REP_VAR            (GVAR_TOWN_REP_VAULT_CITY)

#include "../headers/command.h"
#include "../headers/modreact.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node007a;
procedure Node008;
procedure Node009;
procedure Node010;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Cured_Charlie              (7)
#define LVAR_Cured_Response             (8)
#define LVAR_Diagnosed_Charlie          (9)
#define LVAR_Charlie_Cure_State         (10)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable Cured_Charlie := 0;
procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_VAULT_CITIZENS);
   set_self_ai(AI_COWARD);

   // Make sure Charly is knocked down if sick.
   if( local_var( LVAR_Cured_Charlie ) == 0 ) then begin
      reg_anim_clear( self_obj );
      reg_anim_begin();
      reg_anim_animate( self_obj,ANIM_fall_back_sf,-1);
      reg_anim_end();
      critter_injure( self_obj,DAM_KNOCKED_DOWN);
   end
   add_timer_event( self_obj, game_ticks(random(10, 20)), 1 );
end

procedure timed_event_p_proc begin
   if( fixed_param == 1 ) then begin
      if( not( combat_is_initialized ) ) then begin
         if( local_var(LVAR_Cured_Charlie) == 0 ) then begin
            call Node008;
         end
         else begin
            call Node009;
         end
      end
      add_timer_event( self_obj, game_ticks(random(20, 30)), 1 );
   end
   else if( fixed_param == 2 ) then begin
      rm_timer_event( self_obj );
      call Node007a;
   end
end

procedure use_obj_on_p_proc begin
   variable UsedItem;

   if not(Cured_Charlie) then begin
      if( local_var(LVAR_Cured_Charlie) == 0 ) then begin
         UsedItem := obj_being_used_with;
         if( obj_pid(UsedItem) == PID_RADAWAY ) then begin
            Cured_Charlie := 1;
            call Node007;
         end
      end
   end

end

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ( ( (local_var(LVAR_Hostile) == 2) or ( global_var( GVAR_ENEMY_VAULT_COURTYARD ) == 1 ) ) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin
/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Personal_Enemy,1);
      set_global_var( GVAR_ENEMY_VAULT_COURTYARD, 1 );
      set_global_var( GVAR_ENEMY_VAULT_CITY, 1 );
      set_global_var( GVAR_VAULT_CITIZEN, CITIZEN_KICKED_OUT );
      set_global_var( GVAR_TOWN_REP_VAULT_CITY, (global_var(GVAR_TOWN_REP_VAULT_CITY) + REP_TOWN_KICKED_OUT ) );
      set_global_var( GVAR_VAULT_CITIZENSHIP, 0 );
   end
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=0;
   Slavery_Tolerant:=SLAVE_TOLERANT;
   Karma_Perception:=KARMA_PERCEPTION1;

   CheckKarma;

   GetReaction;

   if ( local_var(LVAR_Cured_Charlie) == 0 ) then
      call Node008;
   else
      call Node010;
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;

   if( local_var(LVAR_Cured_Charlie) == 1 ) then
      display_msg( mstr(107) );
   else if( (is_skill_tagged(SKILL_DOCTOR)) or (has_skill(dude_obj, SKILL_DOCTOR) >= 50) or (has_skill(dude_obj, SKILL_FIRST_AID) > 95) ) then
      display_msg(mstr(104));
   else
      display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
   variable Skill_Used;

   if (action_being_used == SKILL_STEAL) then begin
   end
   else begin
      script_overrides;
      if( local_var(LVAR_Cured_Charlie) == 0 ) then begin
         Skill_Used:=action_being_used;
         if( Skill_Used == SKILL_DOCTOR ) then begin
            if( is_success(roll_vs_skill(dude_obj, SKILL_DOCTOR, 0)) ) then
               call Node004;
            else
               call Node005;
         end
         else if( Skill_Used == SKILL_FIRST_AID ) then begin
            call Node005;
         end
         else if( Skill_Used == SKILL_REPAIR ) then begin
            display_msg( mstr( random(134, 138) ) );
         end
      end
      else begin
         Skill_Used:=action_being_used;
         if( (Skill_Used == SKILL_DOCTOR) or (Skill_Used == SKILL_FIRST_AID) or (Skill_Used == SKILL_REPAIR) ) then begin
            call Node006;
         end
      end
   end
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node004 begin
   display_msg( mstr(110) );
   if( local_var(LVAR_Diagnosed_Charlie) == 0 ) then begin
      set_local_var( LVAR_Diagnosed_Charlie, 1 );
      give_xp(EXP_DIAGNOSED_CHARLIE);
   end
end

procedure Node005 begin
   display_msg( mstr(111) );
end

procedure Node006 begin
   floater(112);
end

procedure Node007 begin
   display_msg( mstr(113) );
   if( local_var(LVAR_Cured_Charlie) == 0 ) then begin
      give_xp(EXP_CURED_CHARLIE);
      inc_general_rep(REP_BONUS_CURED_CHARLIE);
      set_global_var( GVAR_TOWN_REP_VAULT_CITY, (global_var(GVAR_TOWN_REP_VAULT_CITY) + REP_TOWN_CURED_CHARLIE ) );
   end
   add_timer_event( self_obj, game_ticks(3), 2 );
end

procedure Node007a begin
   if( local_var(LVAR_Charlie_Cure_State) == 3) then begin
      // Animate Charly standing up
      reg_anim_clear( self_obj );
      reg_anim_begin();
      reg_anim_animate( self_obj,ANIM_back_to_standing,-1);
      reg_anim_end();
      floater(120);
      display_msg( mstr(121) );
      give_xp( EXP_CURED_CHARLIE );
      set_local_var( LVAR_Cured_Charlie, 1 );

      // Restart float messages
      add_timer_event( self_obj, game_ticks(random(30, 40)), 1 );
   end
   else begin
      floater(114 + 2*local_var(LVAR_Charlie_Cure_State) );
      inc_local_var(LVAR_Charlie_Cure_State);
      add_timer_event( self_obj, game_ticks(3), 2 );
   end
end

procedure Node008 begin
   floater( random(122, 125) );
end

procedure Node009 begin
   floater( random(126, 128) );
end

procedure Node010 begin
   floater( 129 + local_var(LVAR_Cured_Response) );

   if( local_var(LVAR_Cured_Response) >= 4 ) then
      set_local_var(LVAR_Cured_Response, 0);
   else
      inc_local_var(LVAR_Cured_Response);
end

//xxxxxxxxxxxxxxxxxxxx
