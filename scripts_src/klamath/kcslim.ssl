/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Slim Picket
        Location: Klamath
        Description:

        Note: Currently this script cannot be loaded by the scripting tool.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: January 20, 1998

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "kcslim"
#include "../headers/define.h"
#include "../headers/kladwtn.h"

#define NAME                    SCRIPT_KCSLIM
#define TOWN_REP_VAR            (GVAR_TOWN_REP_KLAMATH)

#include "../headers/command.h"
#include "../headers/modreact.h"

#define Vault_Known             (1)     // Temp Until get command from Jesse
#define Visited_City            (1)     // Temp Until get command from Jesse

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure push_p_proc;

/* Script Specific Procedure Calls */
procedure slimbarter;
procedure Node900;                                       //added by killap
procedure Node920;
procedure Node950;
procedure Node960;
procedure Node970;
procedure Node980;
procedure Node990;
procedure Node995;
procedure Node996;
procedure Node997;
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node06a;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node11a;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node24a;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node050;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_08_before                  (7)
#define LVAR_10_before                  (8)
#define LVAR_26_before                  (9)
#define LVAR_attempted_barter           (10)
#define LVAR_tried_talk                 (11)
#define RAT_KEY                      PID_TRAPPER_TOWN_KEY

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable item;
variable learn;
variable from_25:=0;
variable hadkey:=0;
variable mykey;

#define MIN_TOWN_REP_KEY 5
#define MIN_TOWN_REP_SKILL 7

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_KLAMATH);
   set_self_ai(AI_TOUGH_CITIZEN);
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
       set_global_var(GVAR_ENEMY_KLAMATH,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   GetReaction;

   // CHANGE -nbk
   if ((REP_ENEMY_KLAMATH) or (local_var(LVAR_Personal_Enemy) == 1)) then begin
       call Node998;
   end

   else if (global_var(GVAR_QUEST_RAT_GOD) == RAT_GOD_SUCCESS) then begin
      call Node050;
   end

   else if dude_low_iq then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node006;
       gSay_End;
       end_dialogue;
   end

   else if (map_var(MVAR_Rat_Key_Given) == 1) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
          call Node001;
       gSay_End;
       end_dialogue;
   end


   else begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
       if (local_var(LVAR_Herebefore) == 0) then begin
          set_local_var(LVAR_Herebefore,1);
          call Node004;
       end
       else begin
          call Node007;
       end

      gSay_End;
      end_dialogue;
   end

end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

procedure push_p_proc begin
   script_overrides;
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end



/*
procedure garl18 begin
   tandi_pid_ptr := create_object(PID_BARTER_TANDI,0,0); //TANDI_ITEM=212
   add_obj_to_inven(self_obj,tandi_pid_ptr);
   gSay_Message(SCRIPT_GARL,147,NEUTRAL_REACTION);
   call garlbarter;
   //goto BARTER >=$1000 goto 19 else 20
end

procedure garlbarter begin
  gdialog_mod_barter(0);
  gSay_Message(SCRIPT_GARL,"",NEUTRAL_REACTION);
end
*/

procedure slimbarter begin
   if dude_item(RAT_KEY) then
      hadkey:=1;

   set_local_var(LVAR_attempted_barter,1);

   gdialog_mod_barter(0);

   //NBK - NEED TO CHANGE NEXT LINE TO CHECK FOR RAT KEY
   //CURRENTLY IT IS CHECKING FOR TANDI ITEM
   if ( (dude_item(RAT_KEY)) and (hadkey == 0) ) then begin
      //This should only be true right after player gets key thru barter
      //unfortuanately it could be true if player steals it successfully
      //or gets the same key from yellow dog.
      //so i added hadkey
      set_map_var(MVAR_Rat_Key_Given, 1);
      call Node013;
   end
   else begin
      call Node014;
   end

end

procedure Node920 begin
   if town_rep_better_or_equal(MIN_TOWN_REP_KEY) then
      call Node011;
   else begin
      if (is_success(roll_vs_skill(self_obj,SKILL_SPEECH,0))) then
         call Node011;
      else
         call Node012;
   end
end

procedure Node950 begin
   if (local_var(LVAR_tried_talk) == 1) then begin
      call Node011;     //killap's fix: changed from Node012
   end
   else begin
      set_local_var(LVAR_tried_talk, 1);
      if (is_success(roll_vs_skill(self_obj,SKILL_SPEECH,0))) then
         call Node011;  //killap's fix: changed from Node012
      else
         call Node900;  //killap's fix: changed from Node011
   end
end

procedure Node960 begin
   if (has_skill(dude_obj, SKILL_OUTDOORSMAN) > 28) then
      call Node018;
   else if (local_var(LVAR_26_before) == 1) then
      call Node018;
   else
      call Node017;
end

procedure Node970 begin
   if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,0)) and (local_var(LVAR_26_before) == false)) then
      call Node026;
   else
      call Node027;
end

procedure Node980 begin
   from_25:=1;   //killap's fix: moved from Node025
   gfade_out(ONE_GAME_MINUTE);
   up_sex_status; //added by killap
   game_time_advance(4*ONE_GAME_HOUR);//4 hours
   gfade_in(ONE_GAME_MINUTE);
   call Node011;
end

procedure Node990 begin
   set_local_var(LVAR_26_before, 1); //moved from 026

   if town_rep_worse_than(MIN_TOWN_REP_SKILL) then
      dude_caps_adjust(-100); // Seraph's Fix: changed from '50' to '-100'
   else
      dude_caps_adjust(-50);  // Seraph's Fix: changed from '50' to '-50'
   learn:= 2*(dude_iq);
   if (learn < 7) then learn:=7;
   critter_mod_skill(dude_obj,SKILL_OUTDOORSMAN,learn);
   gfade_out(ONE_GAME_MINUTE);
   game_time_advance(8*ONE_GAME_HOUR);//8 hours
   gfade_in(ONE_GAME_MINUTE);
   call Node028;
end

procedure Node995 begin
   if (dude_charisma >= 7) then begin
       TopReact;
   end
   else begin
       BottomReact;
   end
end

procedure Node996 begin
   BottomReact;
end

procedure Node997 begin
   if (dude_charisma >= 8) then
       call Node004;
   else
       call Node005;
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end

// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   if (dude_is_male) then begin
      Reply(110);
   end
   else begin
      Reply(111);
   end
   if (global_var(GVAR_QUEST_RAT_GOD) == 0) then begin
      NOption(390,Node023,004);
   end
   NOption(112,Node003,004);
   NOption(113,Node002,004);
   NOption(114,Node999,004);
end

procedure Node002 begin
   NMessage(120);
end

procedure Node003 begin
   NMessage(130);
end

procedure Node004 begin
   if town_rep_worse_than(MIN_TOWN_REP_KEY) then
      Reply(140);
   else
      Reply(141);

   NOption(mstr(142) + dude_name + mstr(143),Node008,004);
   NOption(144,Node009,004);
   NOption(145,Node999,004);
end

procedure Node005 begin
   Reply(150);
   NLowOption(151,Node006);
   NLowOption(152,Node006);
   NOption(mstr(153) + dude_name + mstr(154),Node006,003);
end

procedure Node006 begin
   if (global_var(GVAR_QUEST_RAT_GOD) == RAT_GOD_SUCCESS) then
      Reply(161);
   else
      Reply(160);

      NLowOption(162,Node06a);
      NLowOption(163,Node999);
end

procedure Node06a begin
   if (global_var(GVAR_QUEST_RAT_GOD) == 0) then begin
      set_global_var(GVAR_QUEST_RAT_GOD, RAT_GOD_ACCEPT);
      call Node11a;
   end
end

procedure Node007 begin
   if town_rep_worse_than(MIN_TOWN_REP_KEY) then
      Reply(170);
   else
      Reply(171);

   if (dude_item_count(RAT_KEY)) then begin
    //do nothing
   end
   else begin
      NOption(172,Node010,004); //only if player doesn't have rat key
   end
   NOption(173,Node008,004);
   NOption(174,Node999,004);
end


procedure Node008 begin
   if (local_var(LVAR_08_before) < 1) then begin
      set_local_var(LVAR_08_before,1);
      Reply(180);
   end
   else begin
      Reply(181);
   end

   NOption(182,Node015,004);
   NOption(183,Node016,004);
   NOption(184,Node009,004);
   NOption(185,Node022,004);
   NOption(186,Node023,004);
   NOption(187,Node999,004);
end

procedure Node009 begin
   Reply(190);
   NOption(191,Node008,004);
   NOption(192,Node999,004);
end

procedure Node010 begin
   if (local_var(LVAR_10_before) < 1) then begin
      set_local_var(LVAR_10_before,1);
      Reply(200);
   end
   else begin
      Reply(201);
   end

   NOption(202,Node920,004);
   NOption(203,Node920,004);
   NOption(204,Node920,004);
   if (dude_is_female) then
      NOption(205,Node025,004);
   NOption(206,Node999,004);
end

procedure Node011 begin
   call Node11a;
   if (from_25 == 1) then
      Reply(211);
   else
      Reply(210);

   NOption(212,Node008,004);
   NOption(213,Node999,004);
end

procedure Node11a begin
//give player rat key, set rat_key_given
   if (self_item_count(RAT_KEY)) then begin
      mykey:=self_item(RAT_KEY);
      rm_obj_from_inven(self_obj,mykey);
      //destroy_object(mykey); //added by killap
      //item:=create_object(RAT_KEY,0,0); //NEED RAT KEY DEFINED..until then give spear
      add_obj_to_inven(dude_obj,mykey);
   end
   set_map_var(MVAR_Rat_Key_Given, 1);
   //added by killap
   if (global_var(GVAR_QUEST_RAT_GOD) == 0) then begin
      set_global_var(GVAR_QUEST_RAT_GOD, RAT_GOD_ACCEPT);
   end
   //end added
end

procedure Node012 begin
   Reply(220);
   NOption(221,slimbarter,004);
   NOption(222,Node950,004);
   NOption(223,Node950,007);
   NOption(224,Node999,004);
end

procedure Node013 begin
   Reply(230);
   NOption(231,Node999,004);
   NOption(232,Node999,004);
end

procedure Node014 begin
   Reply(240);
   NOption(241,slimbarter,004);
   NOption(242,Node008,004);
   NOption(243,Node999,004);
end

procedure Node015 begin
   Reply(250);
   NOption(251,Node008,004);
   if (dude_item_count(RAT_KEY)) then begin
    //do nothing
   end
   else begin
      NOption(252,Node010,004);
   end
   NOption(253,Node999,004);
end

procedure Node016 begin
   Reply(260);
   NOption(261,Node960,001); //[MORE]
end

procedure Node017 begin
   Reply(270);
   NOption(271,Node008,004);
   NOption(272,Node970,004);
   NOption(273,Node999,004);
end

procedure Node018 begin
   Reply(280);
   NOption(281,Node019,004);
   NOption(282,Node008,004);
   NOption(283,Node999,004);
end

procedure Node019 begin
   Reply(290);
   NOption(291,Node020,004);
end

procedure Node020 begin
   Reply(300);
   NOption(301,Node021,004);
end

procedure Node021 begin
   set_global_var(GVAR_CAN_ASK_ARDIN_ABOUT_SMILEY,1);
   Reply(310);
   NOption(311,Node008,004);
   NOption(312,Node999,004);
end

procedure Node022 begin
   Reply(320);
   NOption(321,Node008,004);
   NOption(322,Node999,004);
end

procedure Node023 begin
   if (global_var(GVAR_QUEST_RAT_GOD) == RAT_GOD_SUCCESS) then begin
      Reply(336);
   end
   else begin
      Reply(335);
   end
   if (global_var(GVAR_QUEST_RAT_GOD) == 0) then
      NOption(337,Node024,004);
   NOption(311,Node008,004);
   NOption(312,Node999,004);
end

procedure Node024 begin
   Reply(340);
   if (dude_item_count(RAT_KEY)) then begin
    //do nothing
   end
   else begin
      NOption(341,Node24a,004);
   end
   NOption(342,Node008,004);
   NOption(343,Node999,004);
end

procedure Node24a begin
   set_global_var(GVAR_QUEST_RAT_GOD, RAT_GOD_ACCEPT);
   call Node010;
end

procedure Node025 begin
   if (dude_charisma > 5) then
      Reply(351);
   else
      Reply(350);

   NOption(352,Node980,004);  //killap's fix: changed from 353; fade out, advance time
   NOption(353,Node010,004);  //killap's fix: changed from 354
   NOption(354,Node999,004);  //killap's fix: changed from 355
end

procedure Node026 begin
   if town_rep_worse_than(MIN_TOWN_REP_SKILL) then begin
      Reply(360);
      if (dude_caps >= 100) then
         NOption(362,Node990,004); //fade out, add to players skill
   end else begin
      Reply(361);
      if (dude_caps >= 50) then
         NOption(362,Node990,004); //fade out, add to players skill
   end

   NOption(363,Node008,004);
   NOption(364,Node999,004);
end

procedure Node027 begin
   Reply(370);
   NOption(371,Node008,004);
   NOption(372,Node999,004);
end

procedure Node028 begin
   Reply(380);
   NOption(381,Node018,004);
   NOption(382,Node008,004);
   NOption(383,Node999,004);
end

procedure Node050 begin
   floater(random(400,405));
end

//begin killap's code
procedure Node900
begin
   Reply(406);
   NOption(221,slimbarter,004);
end
//end killap's code
//xxxxxxxxxxxxxxxxxxxx
