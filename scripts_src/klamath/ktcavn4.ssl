#define SCRIPT_REALNAME "ktcavn4"
#include "../headers/define.h"
#include "../headers/klaratcv.h"
#include "../headers/klamath.h"

#define NAME                    SCRIPT_KTCAVN4

#include "../headers/command.h"

procedure damage_p_proc;
procedure destroy_support;
procedure force_destroy_support;

#define LVAR_Destroyed                     (0)

import variable support_beam_1;
import variable support_beam_2;
import variable support_beam_3;
import variable support_beam_4;

variable rubble;
variable blocker;
variable count := 0;
variable check := 0;
variable obj;


procedure start begin
   support_beam_4 := self_obj;
end

procedure map_enter_p_proc begin
   if ( (map_var(MVAR_CVN1)) or (map_var(MVAR_CVN2)) or (map_var(MVAR_CVN3)) or (map_var(MVAR_CVN4)) ) then begin
      call force_destroy_support;
   end
end

procedure map_update_p_proc begin
   support_beam_4 := self_obj;
end

procedure damage_p_proc begin
 variable rubble;
 variable blocker;
 variable count := 0;
 variable check := 0;
 variable obj;

 if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
   if (local_var(LVAR_Destroyed) == 0) then begin
       set_local_var(LVAR_Destroyed,1);
       rubble:=create_object(PID_CAVE_IN_ROCKS,17700,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,17702,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,18501,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,18702,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,18302,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,17703,self_elevation);

       rubble:=create_object(33554510,19904,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,20103,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,19502,self_elevation);
       rubble:=create_object(33554510,19503,self_elevation);
       rubble:=create_object(33554510,19704,self_elevation);
       rubble:=create_object(33554510,20104,self_elevation);

       destroy_object(tile_contains_pid_obj(20306,dude_elevation,33555404));


       blocker:=create_object(PID_BLOCKING_HEX,17505,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17705,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17694,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17494,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17294,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19103,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,18902,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19101,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19100,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19299,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19098,self_elevation);


       blocker:=create_object(PID_BLOCKING_HEX,19102,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19302,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19502,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19702,self_elevation);

       set_map_var(MVAR_CVN4,1);
       display_msg(message_str(SCRIPT_KLARATCV, 101));
       float_msg(dude_obj, message_str(SCRIPT_KLARATCV,104), FLOAT_COLOR_NORMAL);

       if ( ((map_var(MVAR_CVN1) == 1) and (map_var(MVAR_CVN3) == 1) and (map_var(MVAR_CVN4) == 1)) or ((map_var(MVAR_CVN1) == 1) and (map_var(MVAR_CVN2) == 1) and (map_var(MVAR_CVN3) == 1) and (map_var(MVAR_CVN4) == 1)) ) then begin
         if (global_var(GVAR_QUEST_RAT_GOD) != RAT_GOD_SUCCESS) then begin
            set_global_var(GVAR_QUEST_RAT_GOD, RAT_GOD_SUCCESS);
            display_msg(message_str(SCRIPT_KLARATCV, 103));
            give_xp(EXP_KC_KILL_RAT_GOD*2);
            KC_REP_ADJUST(5)
            inc_general_rep(REP_BONUS_KC_KILL_RAT_GOD);
         end
       end

      while (count < 18) do begin

         if (check == 0) then begin
            obj := Vic_Ptr;
            check := check + 1;
         end else if (check == 1) then begin
            obj := Myron_Ptr;
            check := check + 1;
         end else if (check == 2) then begin
            obj := Marcus_Ptr;
            check := check + 1;
         end else if (check == 3) then begin
            obj := MacRae_Ptr;
            check := check + 1;
         end else if (check == 4) then begin
            obj := Sulik_Ptr;
            check := check + 1;
         end else if (check == 5) then begin
            obj := Lenny_Ptr;
            check := check + 1;
         end else if (check == 6) then begin
            obj := Cyberdog_Ptr;
            check := check + 1;
         end else if (check == 7) then begin
            obj := Goris_Ptr;
            check := check + 1;
         end else if (check == 8) then begin
            obj := Davin_Ptr;
            check := check + 1;
         end else if (check == 9) then begin
            obj := Miria_Ptr;
            check := check + 1;
         end else if (check == 10) then begin
            obj := Robobrain_Ptr;
            check := check + 1;
         end else if (check == 11) then begin
            obj := Dogmeat_Ptr;
            check := check + 1;
         end else if (check == 12) then begin
            obj := Pariah_Dog_Ptr;
            check := check + 1;
         end else if (check == 13) then begin
            obj := K9_Ptr;
            check := check + 1;
         end else if (check == 14) then begin
            obj := Robobrain_Human_Ptr;
            check := check + 1;
         end else if (check == 15) then begin
            obj := Robobrain_Abnormal_Ptr;
            check := check + 1;
         end else if (check == 16) then begin
            obj := Robobrain_Chimp_Ptr ;
            check := check + 1;
         end else if (check == 17) then begin
            obj := dude_obj;
            check := check + 1;
         end
         //ul, ur, ll, lr, x)

         if (tile_in_tile_rect(17104, 17096, 19704, 19296, tile_num(obj))) then begin
            critter_dmg(obj, 9999999, DMG_normal_dam);
         end

         count := count + 1;

       end

       add_timer_event(support_beam_1,game_ticks(3),2);

       //destroy_object(self_obj);
   end
 end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
      display_msg(message_str(SCRIPT_KLARATCV, 105));
      destroy_object(support_beam_3);
      support_beam_3 := 0;
      call destroy_support;
   end else if (fixed_param == 3) then begin
      display_msg(message_str(SCRIPT_KLARATCV, 105));
      destroy_object(support_beam_1);
      support_beam_1 := 0;
      call destroy_support;
   end else if (fixed_param == 4) then begin
      display_msg(message_str(SCRIPT_KLARATCV, 105));
      destroy_object(support_beam_2);
      support_beam_2 := 0;
      call destroy_support;
   end
end

procedure destroy_support begin
   if (local_var(LVAR_Destroyed) == 0) then begin
       set_local_var(LVAR_Destroyed,1);
       rubble:=create_object(PID_CAVE_IN_ROCKS,17700,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,17702,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,18501,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,18702,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,18302,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,17703,self_elevation);

       rubble:=create_object(33554510,19904,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,20103,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,19502,self_elevation);
       rubble:=create_object(33554510,19503,self_elevation);
       rubble:=create_object(33554510,19704,self_elevation);
       rubble:=create_object(33554510,20104,self_elevation);

       destroy_object(tile_contains_pid_obj(20306,dude_elevation,33555404));


       blocker:=create_object(PID_BLOCKING_HEX,17505,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17705,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17694,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17494,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17294,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19103,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,18902,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19101,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19100,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19299,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19098,self_elevation);


       blocker:=create_object(PID_BLOCKING_HEX,19102,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19302,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19502,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19702,self_elevation);

       set_map_var(MVAR_CVN4,1);

       if ( ((map_var(MVAR_CVN1) == 1) and (map_var(MVAR_CVN3) == 1) and (map_var(MVAR_CVN4) == 1)) or ((map_var(MVAR_CVN1) == 1) and (map_var(MVAR_CVN2) == 1) and (map_var(MVAR_CVN3) == 1) and (map_var(MVAR_CVN4) == 1)) ) then begin
         if (global_var(GVAR_QUEST_RAT_GOD) != RAT_GOD_SUCCESS) then begin
            set_global_var(GVAR_QUEST_RAT_GOD, RAT_GOD_SUCCESS);
            display_msg(message_str(SCRIPT_KLARATCV, 103));
            give_xp(EXP_KC_KILL_RAT_GOD*2);
            KC_REP_ADJUST(5)
            inc_general_rep(REP_BONUS_KC_KILL_RAT_GOD);
         end
       end

      while (count < 18) do begin

         if (check == 0) then begin
            obj := Vic_Ptr;
            check := check + 1;
         end else if (check == 1) then begin
            obj := Myron_Ptr;
            check := check + 1;
         end else if (check == 2) then begin
            obj := Marcus_Ptr;
            check := check + 1;
         end else if (check == 3) then begin
            obj := MacRae_Ptr;
            check := check + 1;
         end else if (check == 4) then begin
            obj := Sulik_Ptr;
            check := check + 1;
         end else if (check == 5) then begin
            obj := Lenny_Ptr;
            check := check + 1;
         end else if (check == 6) then begin
            obj := Cyberdog_Ptr;
            check := check + 1;
         end else if (check == 7) then begin
            obj := Goris_Ptr;
            check := check + 1;
         end else if (check == 8) then begin
            obj := Davin_Ptr;
            check := check + 1;
         end else if (check == 9) then begin
            obj := Miria_Ptr;
            check := check + 1;
         end else if (check == 10) then begin
            obj := Robobrain_Ptr;
            check := check + 1;
         end else if (check == 11) then begin
            obj := Dogmeat_Ptr;
            check := check + 1;
         end else if (check == 12) then begin
            obj := Pariah_Dog_Ptr;
            check := check + 1;
         end else if (check == 13) then begin
            obj := K9_Ptr;
            check := check + 1;
         end else if (check == 14) then begin
            obj := Robobrain_Human_Ptr;
            check := check + 1;
         end else if (check == 15) then begin
            obj := Robobrain_Abnormal_Ptr;
            check := check + 1;
         end else if (check == 16) then begin
            obj := Robobrain_Chimp_Ptr ;
            check := check + 1;
         end else if (check == 17) then begin
            obj := dude_obj;
            check := check + 1;
         end
         //ul, ur, ll, lr, x)

         if (tile_in_tile_rect(17104, 17096, 19704, 19296, tile_num(obj))) then begin
            critter_dmg(obj, 9999999, DMG_normal_dam);
         end

         count := count + 1;

       end

       if ( (support_beam_1 == 0) and (support_beam_3 == 0) ) then begin
         add_timer_event(support_beam_2,game_ticks(3),1);
       end /*else if (support_beam_1 == 0) then begin
         add_timer_event(support_beam_2,game_ticks(2),3);
       end*/ else if (support_beam_2 == 0) then begin
         add_timer_event(support_beam_1,game_ticks(3),4);
       end

       //destroy_object(self_obj);
   end
end

procedure force_destroy_support begin
       set_local_var(LVAR_Destroyed,1);
       rubble:=create_object(PID_CAVE_IN_ROCKS,17700,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,17702,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,18501,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,18702,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,18302,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,17703,self_elevation);

       rubble:=create_object(33554510,19904,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,20103,self_elevation);
       rubble:=create_object(PID_LARGE_BLUE_ROCK_PILE,19502,self_elevation);
       rubble:=create_object(33554510,19503,self_elevation);
       rubble:=create_object(33554510,19704,self_elevation);
       rubble:=create_object(33554510,20104,self_elevation);

       destroy_object(tile_contains_pid_obj(20306,dude_elevation,33555404));


       blocker:=create_object(PID_BLOCKING_HEX,17505,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17705,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17694,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17494,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,17294,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19103,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,18902,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19101,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19100,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19299,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19098,self_elevation);


       blocker:=create_object(PID_BLOCKING_HEX,19102,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19302,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19502,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,19702,self_elevation);

       set_map_var(MVAR_CVN4,1);

       destroy_object(self_obj);
end
