#define SCRIPT_REALNAME "ktcavn1"
#include "../headers/define.h"
#include "../headers/klaratcv.h"
#include "../headers/klamath.h"

#define NAME                    SCRIPT_KTCAVN1

#include "../headers/command.h"

procedure damage_p_proc;
procedure destroy_support;
procedure force_destroy_support;

#define LVAR_Destroyed                     (0)

import variable support_beam_1;
import variable support_beam_2;
import variable support_beam_3;
import variable support_beam_4;

variable rubble;
variable blocker;
variable count := 0;
variable check := 0;
variable obj;

procedure start begin
   support_beam_1 := self_obj;
end

procedure map_enter_p_proc begin
   if ( (map_var(MVAR_CVN1)) or (map_var(MVAR_CVN2)) or (map_var(MVAR_CVN3)) or (map_var(MVAR_CVN4)) ) then begin
      call force_destroy_support;
   end
end


procedure map_update_p_proc begin
   support_beam_1 := self_obj;
end

procedure damage_p_proc begin
 if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
   if (local_var(LVAR_Destroyed) == 0) then begin
       set_local_var(LVAR_Destroyed,1);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22700,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22300,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22904,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22702,self_elevation);

       blocker:=create_object(PID_BLOCKING_HEX,21298,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21499,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21500,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21701,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21702,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21903,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,22894,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23094,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23294,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23107,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23307,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23703,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23702,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23701,self_elevation);

       set_map_var(MVAR_CVN1,1);
       display_msg(message_str(SCRIPT_KLARATCV, 101));
       float_msg(dude_obj, message_str(SCRIPT_KLARATCV,104), FLOAT_COLOR_NORMAL);

       if ( ((map_var(MVAR_CVN1) == 1) and (map_var(MVAR_CVN3) == 1) and (map_var(MVAR_CVN4) == 1)) or ((map_var(MVAR_CVN1) == 1) and (map_var(MVAR_CVN2) == 1) and (map_var(MVAR_CVN3) == 1) and (map_var(MVAR_CVN4) == 1)) ) then begin
         if (global_var(GVAR_QUEST_RAT_GOD) != RAT_GOD_SUCCESS) then begin
            set_global_var(GVAR_QUEST_RAT_GOD, RAT_GOD_SUCCESS);
            display_msg(message_str(SCRIPT_KLARATCV, 103));
            give_xp(EXP_KC_KILL_RAT_GOD*2);
            KC_REP_ADJUST(5)
            inc_general_rep(REP_BONUS_KC_KILL_RAT_GOD);
         end
       end
       while (count < 18) do begin

         if (check == 0) then begin
            obj := Vic_Ptr;
            check := check + 1;
         end else if (check == 1) then begin
            obj := Myron_Ptr;
            check := check + 1;
         end else if (check == 2) then begin
            obj := Marcus_Ptr;
            check := check + 1;
         end else if (check == 3) then begin
            obj := MacRae_Ptr;
            check := check + 1;
         end else if (check == 4) then begin
            obj := Sulik_Ptr;
            check := check + 1;
         end else if (check == 5) then begin
            obj := Lenny_Ptr;
            check := check + 1;
         end else if (check == 6) then begin
            obj := Cyberdog_Ptr;
            check := check + 1;
         end else if (check == 7) then begin
            obj := Goris_Ptr;
            check := check + 1;
         end else if (check == 8) then begin
            obj := Davin_Ptr;
            check := check + 1;
         end else if (check == 9) then begin
            obj := Miria_Ptr;
            check := check + 1;
         end else if (check == 10) then begin
            obj := Robobrain_Ptr;
            check := check + 1;
         end else if (check == 11) then begin
            obj := Dogmeat_Ptr;
            check := check + 1;
         end else if (check == 12) then begin
            obj := Pariah_Dog_Ptr;
            check := check + 1;
         end else if (check == 13) then begin
            obj := K9_Ptr;
            check := check + 1;
         end else if (check == 14) then begin
            obj := Robobrain_Human_Ptr;
            check := check + 1;
         end else if (check == 15) then begin
            obj := Robobrain_Abnormal_Ptr;
            check := check + 1;
         end else if (check == 16) then begin
            obj := Robobrain_Chimp_Ptr ;
            check := check + 1;
         end else if (check == 17) then begin
            obj := dude_obj;
            check := check + 1;
         end
         //ul, ur, ll, lr, x)

         if (tile_in_tile_rect(21703, 21296, 23504, 23496, tile_num(obj))) then begin
            critter_dmg(obj, 9999999, DMG_normal_dam);
         end

         count := count + 1;

       end

       add_timer_event(support_beam_3,game_ticks(3),1);
       //destroy_object(self_obj);
   end
 end
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin

   end else if (fixed_param == 2) then begin
      display_msg(message_str(SCRIPT_KLARATCV, 105));
      destroy_object(support_beam_4);
      support_beam_4 := 0;
      call destroy_support;
   end else if (fixed_param == 3) then begin
      display_msg(message_str(SCRIPT_KLARATCV, 105));
      destroy_object(support_beam_3);
      support_beam_3 := 0;
      call destroy_support;
   end else if (fixed_param == 4) then begin
      display_msg(message_str(SCRIPT_KLARATCV, 105));
      destroy_object(support_beam_4);
      support_beam_4 := 0;
      call destroy_support;
   end
end

procedure destroy_support begin
   if (local_var(LVAR_Destroyed) == 0) then begin
       set_local_var(LVAR_Destroyed,1);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22700,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22300,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22904,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22702,self_elevation);

       blocker:=create_object(PID_BLOCKING_HEX,21298,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21499,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21500,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21701,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21702,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21903,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,22894,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23094,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23294,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23107,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23307,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23703,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23702,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23701,self_elevation);

       set_map_var(MVAR_CVN1,1);

       if ( ((map_var(MVAR_CVN1) == 1) and (map_var(MVAR_CVN3) == 1) and (map_var(MVAR_CVN4) == 1)) or ((map_var(MVAR_CVN1) == 1) and (map_var(MVAR_CVN2) == 1) and (map_var(MVAR_CVN3) == 1) and (map_var(MVAR_CVN4) == 1)) ) then begin
         if (global_var(GVAR_QUEST_RAT_GOD) != RAT_GOD_SUCCESS) then begin
            set_global_var(GVAR_QUEST_RAT_GOD, RAT_GOD_SUCCESS);
            display_msg(message_str(SCRIPT_KLARATCV, 103));
            give_xp(EXP_KC_KILL_RAT_GOD*2);
            KC_REP_ADJUST(5)
            inc_general_rep(REP_BONUS_KC_KILL_RAT_GOD);
         end
       end
       while (count < 18) do begin

         if (check == 0) then begin
            obj := Vic_Ptr;
            check := check + 1;
         end else if (check == 1) then begin
            obj := Myron_Ptr;
            check := check + 1;
         end else if (check == 2) then begin
            obj := Marcus_Ptr;
            check := check + 1;
         end else if (check == 3) then begin
            obj := MacRae_Ptr;
            check := check + 1;
         end else if (check == 4) then begin
            obj := Sulik_Ptr;
            check := check + 1;
         end else if (check == 5) then begin
            obj := Lenny_Ptr;
            check := check + 1;
         end else if (check == 6) then begin
            obj := Cyberdog_Ptr;
            check := check + 1;
         end else if (check == 7) then begin
            obj := Goris_Ptr;
            check := check + 1;
         end else if (check == 8) then begin
            obj := Davin_Ptr;
            check := check + 1;
         end else if (check == 9) then begin
            obj := Miria_Ptr;
            check := check + 1;
         end else if (check == 10) then begin
            obj := Robobrain_Ptr;
            check := check + 1;
         end else if (check == 11) then begin
            obj := Dogmeat_Ptr;
            check := check + 1;
         end else if (check == 12) then begin
            obj := Pariah_Dog_Ptr;
            check := check + 1;
         end else if (check == 13) then begin
            obj := K9_Ptr;
            check := check + 1;
         end else if (check == 14) then begin
            obj := Robobrain_Human_Ptr;
            check := check + 1;
         end else if (check == 15) then begin
            obj := Robobrain_Abnormal_Ptr;
            check := check + 1;
         end else if (check == 16) then begin
            obj := Robobrain_Chimp_Ptr ;
            check := check + 1;
         end else if (check == 17) then begin
            obj := dude_obj;
            check := check + 1;
         end
         //ul, ur, ll, lr, x)

         if (tile_in_tile_rect(21703, 21296, 23504, 23496, tile_num(obj))) then begin
            critter_dmg(obj, 9999999, DMG_normal_dam);
         end

         count := count + 1;

       end

       if ( (support_beam_2 == 0) and (support_beam_4 == 0) ) then
         add_timer_event(support_beam_3,game_ticks(3),4);
       else if (support_beam_4 == 0) then
         add_timer_event(support_beam_3,game_ticks(3),2);
       else if (support_beam_3 == 0) then
         add_timer_event(support_beam_4,game_ticks(3),3);
       //destroy_object(self_obj);
   end
end

procedure force_destroy_support begin
       set_local_var(LVAR_Destroyed,1);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22700,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22300,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22904,self_elevation);
       rubble:=create_object(PID_CAVE_IN_ROCKS,22702,self_elevation);

       blocker:=create_object(PID_BLOCKING_HEX,21298,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21499,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21500,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21701,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21702,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,21903,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,22894,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23094,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23294,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23107,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23307,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23703,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23702,self_elevation);
       blocker:=create_object(PID_BLOCKING_HEX,23701,self_elevation);

       set_map_var(MVAR_CVN1,1);

       destroy_object(self_obj);
end
