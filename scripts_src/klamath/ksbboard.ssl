/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Klamath Bulletin Board
        Location: Klamath
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: April 18, 1998

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "ksbboard"
#include "../headers/define.h"

#define NAME                    SCRIPT_KSBBOARD
#define TOWN_REP_VAR            (GVAR_TOWN_REP_KLAMATH)
#define floater(x)		float_msg(self_obj, mstr(x),FLOAT_MSG_RED)

#include "../headers/command.h"
#include "../headers/sanfran.h"

#define Vault_Known             (1)     // Temp Until get command from Jesse
#define Visited_City            (1)     // Temp Until get command from Jesse

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;

/* Script Specific Procedure Calls */
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)

//#define LVAR_Center                     (13) //is Torr at center of map
//#define LVAR_Edge                       (14) //is Torr at edge

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;

procedure Node999 begin
end

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
/*
procedure map_enter_p_proc begin
   Only_Once:=0;
end

procedure map_update_p_proc begin
end

procedure critter_p_proc begin
end

procedure damage_p_proc begin
end

procedure pickup_p_proc begin
end
*/
procedure use_p_proc begin
   script_overrides; //added by killap
   if (not(combat_is_initialized)) then begin //check added by killap
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
      if dude_low_iq then
         call Node009;
      else
         call Node001;
      gSay_End;
      end_dialogue;
   end
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

procedure Node001 begin

   Reply(110);

   NOption(120,Node002,004);
   NOption(130,Node003,004);
   NOption(140,Node007,004);
   NOption(150,Node005,004);
   if (global_var(GVAR_QUEST_RAT_GOD) != RAT_GOD_SUCCESS) then //added check by killap
      NOption(160,Node006,004);
   NOption(170,Node008,004);
   if ((global_var(GVAR_SMILEY_STATUS) <= SMILEY_QUEST_ACCEPTED) or (global_var(GVAR_SMILEY_STATUS) == SMILEY_DEAD)) then //added check by killap
      NOption(180,Node004,004);
   NOption(190,Node999,004);
end

procedure Node002 begin
   Reply(210);

   NOption(220,Node001,004);
   NOption(230,Node999,004);
end


procedure Node003 begin
   Reply(240);

   NOption(250,Node001,004);
   NOption(260,Node999,004);
end

procedure Node004 begin
   set_global_var(GVAR_CAN_ASK_ARDIN_ABOUT_SMILEY,1);
   Reply(270);

   NOption(280,Node001,004);
   NOption(290,Node999,004);
end

procedure Node005 begin
   Reply(310);

   NOption(320,Node001,004);
   NOption(330,Node999,004);
end

procedure Node006 begin
   //if (global_var(GVAR_QUEST_RAT_GOD) == 0) then
   //   set_global_var(GVAR_QUEST_RAT_GOD, RAT_GOD_ACCEPT);
   Reply(340);

   NOption(350,Node001,004);
   NOption(360,Node999,004);
end

procedure Node007 begin
   Reply(370);

   NOption(380,Node001,004);
   NOption(390,Node999,004);
end

procedure Node008 begin
   Reply(400);

   NOption(410,Node001,004);
   NOption(420,Node999,004);
end

procedure Node009 begin
   Reply(430);

   NLowOption(440,Node010);
   NLowOption(450,Node999);
end

procedure Node010 begin
   Reply(460);

   NLowOption(470,Node999);
end
//xxxxxxxxxxxxxxxxxxxx
