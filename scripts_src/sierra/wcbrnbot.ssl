/*
    Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location:
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "wcbrnbot"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"
#include "../headers/depolvz.h"

#define NAME                    SCRIPT_WCBRNBOT

#include "../headers/command.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_update_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure push_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node001a;
procedure Node001b;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node006a;
procedure Node007;
procedure Node008;
procedure Node008a;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node013a;
procedure Node013b;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node017a;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node020a;
procedure Node020b;
procedure Node020c;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;

procedure Kill_The_Party;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Travel_Distance            (7)
#define LVAR_Wait                       (8)
#define LVAR_Alarm_1                    (9)
#define LVAR_Alarm_2                    (10)
#define LVAR_Alarm_3                    (11)
#define LVAR_In_Party                   (12)
#define LVAR_Freed                      (13)
#define LVAR_Party_Target               (14)
#define LVAR_FOLLOW_DISTANCE            (15)
#define LVAR_WAITING                    (16)

#define Dist_Short                      (0)
#define Dist_Med                        (1)
#define Dist_Long                       (2)

#define EVENT_KILL_THE_PARTY 2

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;

procedure start begin
end

procedure map_enter_p_proc begin
   party_member_map_enter;
   if local_var(LVAR_Party_Target) == 1 then call Kill_The_Party; // continue attacking if party ran away before Skynet reached one of them
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_update_p_proc begin
   if (local_var(LVAR_In_Party == 0)) then
      set_self_team(TEAM_SIERRA_BASE);
   else begin
      if (combat_is_initialized == false) then begin
         if (anim_busy(self_obj) == false) then begin
            if (party_member_obj(self_pid) != 0) then begin
               if (chem_use_level(self_obj) == 1) then begin
                  if ((100 * self_cur_hits / self_max_hits) <= 60) then begin
                     global_temp := 1;
                     obj_heal_no_skill(self_obj)
                  end
               end else if (chem_use_level(self_obj) == 2) then begin
                  if ((100 * self_cur_hits / self_max_hits) <= 30) then begin
                     global_temp := 1;
                     obj_heal_no_skill(self_obj)
                  end
               end else if (chem_use_level(self_obj) == 3) then begin
                  if ((100 * self_cur_hits / self_max_hits) <= 50) then begin
                     global_temp := 1;
                     obj_heal_no_skill(self_obj)
                  end
               end else if (chem_use_level(self_obj) == 4) then begin
                  if ((100 * self_cur_hits / self_max_hits) <= 50) then begin
                     global_temp := 1;
                     obj_heal_no_skill(self_obj)
                  end
               end
            end
         end
      end
      set_self_team(TEAM_PLAYER);
   end
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((cur_map_index == MAP_SIERRA_BATTLE) and (global_var(GVAR_SIERRA_BASE_ENEMY) == 1) and (local_var(LVAR_Hostile) == 0)) then begin
       if (local_var(LVAR_Freed) == 0) then begin
           inc_local_var(LVAR_Freed);
           call Kill_The_Party;
       end
   end

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       floater(173);
       attack(dude_obj);
   end

   else if (local_var(LVAR_Hostile) == 2) then begin
       self_walk_to_tile(tile_num_in_direction(dude_tile,random(0,5),random(1,4)));
   end

   if sierra_cur_level_sec_on then begin
       call Node024;
   end

   if ((local_var(LVAR_In_Party) == 1) and (not(party_no_follow))) then begin
       if (tile_distance_objs(self_obj,dude_obj) > (2*FOLLOW_DISTANCE_MEDIUM)) then
           self_run_to_tile(tile_num_in_direction(dude_tile,random(0,5),FOLLOW_DISTANCE_CLOSE));
       else if (tile_distance_objs(self_obj,dude_obj) > FOLLOW_DISTANCE_MEDIUM) then
           self_run_to_tile(tile_num_in_direction(dude_tile,random(0,5),FOLLOW_DISTANCE_MEDIUM));
   end

end

procedure timed_event_p_proc begin
   if (fixed_param == EVENT_KILL_THE_PARTY) then begin
       call Kill_The_Party;
   end
   //added by killap - expansion
   if (fixed_param == 40893) then begin
      set_local_var(LVAR_In_Party,0);
      set_local_var(LVAR_Wait,1);
      party_remove(self_obj);
      move_to(self_obj, 20687, self_elevation);
      critter_attempt_placement( self_obj, 15698, 0 );
   end
   //end added
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
   end

end

procedure push_p_proc begin
   if ((global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_ABNORMAL) or (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CHIMP)) then begin
       floater(410);
   end

   else if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_HUMAN) then begin
       floater(420);
   end

   else begin
       floater(random(430,432));
   end
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      if not(local_var(LVAR_In_Party)) then begin //added by killap
         set_local_var(LVAR_Hostile,2);
      end
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin

   if (local_var(LVAR_In_Party) == 0) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node001;
       gSay_End;
       end_dialogue;
   end

   else if (local_var(LVAR_Wait) == 1) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node007;
       gSay_End;
       end_dialogue;
   end

   else if (local_var(LVAR_Wait) == 2) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node008;
       gSay_End;
       end_dialogue;
   end

   else if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_ABNORMAL) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node002;
       gSay_End;
       end_dialogue;
   end

   else if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CHIMP) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node003;
       gSay_End;
       end_dialogue;
   end

   else if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_HUMAN) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node004;
       gSay_End;
       end_dialogue;
   end

   else if ((global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) and (global_var(GVAR_SIERRA_BASE_ENEMY) == 1) and (local_var(LVAR_Hostile) == 0)) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node005;
       gSay_End;
       end_dialogue;
   end

   else if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node006;
       gSay_End;
       end_dialogue;
   end

end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

//added by killap
procedure use_obj_on_p_proc begin
   if ( (obj_pid(obj_being_used_with) == PID_MICRO_FUSION_CELL) or (obj_pid(obj_being_used_with) == PID_SMALL_ENERGY_CELL) ) then begin
      script_overrides;
      display_msg(g_mstr(20000));
   end
end
//end added

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   if ((global_var(GVAR_SIERRA_BASE_ENEMY) == 1) and (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC)) then
       Reply(102);
   else if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then
       Reply(mstr(103)+mstr(104)+mstr(105)+mstr(106));
   else
       Reply(306);

   if (global_var(GVAR_SIERRA_BASE_ENEMY) == 0) then begin
       NOption(107,Node001a,004);
       NOption(108,Node011,004);
   end
   if ((global_var(GVAR_SIERRA_BASE_ENEMY) == 1) and (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC)) then
       NOption(109,Node001b,004);
   NLowOption(110,Node999);
end

procedure Node001a begin
// check party size
   ndebug("Checking Party Size");
   if (dude_at_max_party_size) then
       call Node012;
   else
       call Node010;
   ndebug("Finished Checking Party Size");
end

procedure Node001b begin
   party_add(self_obj);
   set_local_var(LVAR_In_Party,1);
end

procedure Node002 begin
   Reply(111);

   NOption(114,Node999,004);
   NLowOption(115,Node999);
end

procedure Node003 begin
   Reply(116);

   NOption(118,Node021,004);
   NOption(120,Node999,004);
   NLowOption(121,Node999);
end

procedure Node004 begin
   Reply(122);

//   NOption(123,Node014,004);
   NOption(124,Node021,004);
   NOption(125,Node022,004);
   NOption(126,Node013,004);
   NOption(128,Node999,004);
   NLowOption(129,Node999);
end

procedure Node005 begin
   Reply(mstr(130)+mstr(131));

   NOption(132,Node999,004);
   NLowOption(133,Node999);
end

procedure Node006 begin
   Reply(134);

   //NOption(135,Node018,004); - No need for this since we have the push command - killap
   NOption(136,Node021,004);
   NOption(137,Node022,004);
   NOption(138,Node017,004);
   NOption(140,Node006a,004);
   NOption(141,Node020,004);
   NOption(142,Node019,004);
   NOption(143,Node999,004);
   NLowOption(144,Node999); // Seraph's Fix: NLowOption only takes 2 args. Thanks Rob!
end

procedure Node006a begin
   variable hp;

   hp:=self_max_hits-self_cur_hits;

   critter_heal(self_obj,hp);
   gfade_out(600);
   gfade_in(600);

   game_time_advance(2*ONE_GAME_HOUR);

   call Node018;
end

procedure Node007 begin
   if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then
       Reply(mstr(145)+mstr(147));
   else
       Reply(mstr(146)+mstr(147));

   NOption(148,Node010,004);
   NOption(149,Node021,004);
   NLowOption(144,Node999); // Seraph's Fix: NLowOption only takes 2 args. Thanks Rob!
end

procedure Node008 begin
   if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then
       Reply(150);
   else
       Reply(151);

   NOption(152,Node008a,004);
   NOption(153,Node999,004);
   NLowOption(144,Node999); // Seraph's Fix: NLowOption only takes 2 args. Thanks Rob!
end

procedure Node008a begin
end

procedure Node010 begin
   if (local_var(LVAR_In_Party) == 0) then begin
       set_local_var(LVAR_In_Party,1);
       party_add(self_obj);
   end

   set_local_var(LVAR_Wait,0);

   if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then
       Reply(154);
   else if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_HUMAN) then
       Reply(155);
   else
       Reply(156);

   NOption(157,Node999,004);
   NLowOption(144,Node999); // Seraph's Fix: NLowOption only takes 2 args. Thanks Rob!
end

procedure Node011 begin
   if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then
       Reply(158);
   else
       Reply(159);

   NOption(160,Node999,004);
end

procedure Node012 begin
   if (dude_at_max_party_size) then
       Reply(161);
   else
       Reply(162);

   NOption(163,Node999,004);
end

procedure Node013 begin
   Reply(mstr(164)+mstr(165)+mstr(166));

//   NOption(167,Node013a,004);
   NOption(400,Node013b,004);
   NOption(168,Node004,004);
   NOption(169,Node999,004);
end

procedure Node013a begin
   // set best weapon
   call Node014;
end

procedure Node013b begin
   inven_unwield(self_obj);
   if (global_var(GVAR_BRAIN_BOT_BRAIN) != BRAIN_CYBERNETIC) then
       call Node014;
   else
       call Node018;
end

procedure Node014 begin
   Reply(170);

   NOption(171,Node004,004);
   NOption(172,Node999,004);
end

procedure Node015 begin
   ndebug("In Node015");
   set_local_var(LVAR_Hostile,2);
   party_remove(self_obj);
   set_local_var(LVAR_In_Party,0);
   set_self_team(TEAM_SIERRA_BASE);
//   attack(dude_obj);
end

procedure Node016 begin
   floater(random(175,177));
end

procedure Node017 begin
   Reply(178);

//   NOption(179,Node017a,004);
   NOption(400,Node013b,004);
   NOption(180,Node006,004);
   NOption(181,Node999,004);
end

procedure Node017a begin
   // set best weapon
   call Node018;
end

procedure Node018 begin
   Reply(182);

   NOption(183,Node006,004);
   NOption(184,Node999,004);
end

procedure Node019 begin
   Reply(185);

   NOption(186,Node006,004);
   NOption(187,Node999,004);
end

procedure Node020 begin
   Reply(188);

   NOption(189,Node020a,004);
   NOption(190,Node020b,004);
   NOption(191,Node020c,004);
   NOption(192,Node006,004);
   NOption(193,Node999,004);
end

procedure Node020a begin
   set_local_var(LVAR_Travel_Distance,Dist_Long);
   call Node018;
end

procedure Node020b begin
   set_local_var(LVAR_Travel_Distance,Dist_Med);
   call Node018;
end

procedure Node020c begin
   set_local_var(LVAR_Travel_Distance,Dist_Short);
   call Node018;
end

procedure Node021 begin
   set_local_var(LVAR_In_Party,0);
   set_local_var(LVAR_Wait,1);
   party_remove(self_obj);

   if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then
       Reply(194);
   else if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_HUMAN) then
       Reply(195);
   else
       Reply(196);

   NOption(197,Node999,004);
end

procedure Node022 begin
   party_remove(self_obj);
   set_local_var(LVAR_Wait,2);
   set_local_var(LVAR_In_Party,0);

   if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then
       Reply(198);
   else
       Reply(199);

   NOption(200,Node999,004);
end

procedure Node023 begin
   set_local_var(LVAR_Wait,0);
   set_local_var(LVAR_In_Party,1);
   party_add(self_obj);

   if (global_var(GVAR_BRAIN_BOT_BRAIN) == BRAIN_CYBERNETIC) then
       Reply(201);
   else
       Reply(202);

   NOption(203,Node999,004);
end

procedure Node024 begin

   if (cur_map_index == MAP_SIERRA_123) then begin
      if ((map_var(MVAR_Security_Level_1) == 1) and (self_elevation == 0)) then begin
          set_global_var(GVAR_SIERRA_BASE_ALERT,0);
          sierra_set_security_off;
          floater(204);
          set_map_var(MVAR_Security_Level_1,0);
      end
      else if ((map_var(MVAR_Security_Level_2) == 1) and (self_elevation == 1)) then begin
          set_global_var(GVAR_SIERRA_BASE_ALERT,0);
          sierra_set_security_off;
          floater(205);
          set_map_var(MVAR_Security_Level_2,0);
      end
      else if ((map_var(MVAR_Security_Level_3) == 1) and (self_elevation == 2)) then begin
          set_global_var(GVAR_SIERRA_BASE_ALERT,0);
          sierra_set_security_off;
          floater(206);
          set_map_var(MVAR_Security_Level_3,0);
      end
   end
   else if (cur_map_index == MAP_SIERRA_4) then begin
      if (map_var(MVAR_Security_Level_4) == 1) then begin
          set_global_var(GVAR_SIERRA_BASE_ALERT,0);
          sierra_set_security_off;
          floater(207);
          set_map_var(MVAR_Security_Level_4,0);
      end
   end
end

procedure Kill_The_Party begin
    variable who;
    who = closest_party_member(self_obj);
    if who then begin
        if tile_distance_objs(self_obj, tile_num(who)) < 2 then begin
           critter_dmg(who, 1000, DMG_explosion);
           call Node015;
        end else begin
            set_local_var(LVAR_Party_Target, 1);
            self_run_to_tile(tile_num_in_direction(tile_num(who), random(0,5),1));
            add_timer_event(self_obj, game_ticks(3), EVENT_KILL_THE_PARTY);
        end
    end else if tile_distance_objs(self_obj, dude_obj) < 2 then begin
       call Node015;
    end else begin
        set_local_var(LVAR_Party_Target, 1);
        self_run_to_tile(tile_num_in_direction(dude_tile,random(0,5),1));
        add_timer_event(self_obj, game_ticks(3), EVENT_KILL_THE_PARTY);
    end
end

//xxxxxxxxxxxxxxxxxxxx
