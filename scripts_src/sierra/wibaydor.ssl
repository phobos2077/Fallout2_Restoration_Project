/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Wood Door
        Locked: NO
        Trapped: NO
        Closing: YES
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/

/* Include Files */
#define SCRIPT_REALNAME "wibaydor"
#include "../headers/depolvz.h"

/* Sets whether the door is locked or trapped or closing */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_METAL
#define LOCK_STATUS                     STATE_ELECTRIC_LOCK
#define CLOSE_STATUS                    STATE_DOOR_CLOSE

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-80)

#define CHECK_REPAIR                    (2)
import variable repair_bot1;
import variable repair_bot2;
import variable repair_bot3;

#define custom_timed_event_p_proc
#define custom_map_enter_p_proc
#include "../headers/doors.h"



procedure timed_event_p_proc begin
   //added by killap - expansion
   if (fixed_param == CHECK_REPAIR) then begin
      if (repair_bot1 > 0 or repair_bot2 > 0 or repair_bot3 > 0) then begin
         if ( (map_var(MVAR_Repair_Request1) > REPAIR_NONE) or (map_var(MVAR_Repair_Request2) > REPAIR_NONE) or (map_var(MVAR_Repair_Request3) > REPAIR_NONE) or
            (map_var(MVAR_Repair_Request4) > REPAIR_NONE) or (map_var(MVAR_Repair_Request5) > REPAIR_NONE) or (map_var(MVAR_Repair_Request6) > REPAIR_NONE) or
            (map_var(MVAR_Repair_Request7) > REPAIR_NONE) or (map_var(MVAR_Repair_Request8) > REPAIR_NONE) or (map_var(MVAR_Repair_Request9) > REPAIR_NONE) or
            (map_var(MVAR_Repair_Request10) > REPAIR_NONE) or (map_var(MVAR_Repair_Request11) > REPAIR_NONE) or (map_var(MVAR_Repair_Request12) > REPAIR_NONE) ) then begin

            if ( (self_elevation == 0 and (map_var(MVAR_Security_Level_1) == 1)) or (self_elevation == 1 and (map_var(MVAR_Security_Level_2) == 1)) or (self_elevation == 2 and ((map_var(MVAR_Security_Level_3) == 1) or (global_var(GVAR_SIERRA_BASE_ENEMY) == 1))) ) then begin


               if ((self_elevation == 0 and ((elevation(repair_bot1) == 0 or elevation(repair_bot2) == 0  or elevation(repair_bot3) == 0)) and
               ((tile_in_box(tile_num(repair_bot1), 19326, 19319, 21119, 21126)) or
               (tile_in_box(tile_num(repair_bot2), 19326, 19319, 21119, 21126)) or
               (tile_in_box(tile_num(repair_bot3), 19326, 19319, 21119, 21126)))) or

               ((self_elevation == 2) and ((elevation(repair_bot1) == 2 or elevation(repair_bot2) == 2  or elevation(repair_bot3) == 2)) and
               ((tile_in_box(tile_num(repair_bot1), 20143, 20137, 21937, 21944)) or
               (tile_in_box(tile_num(repair_bot2), 20143, 20137, 21937, 21944)) or
               (tile_in_box(tile_num(repair_bot3), 20143, 20137, 21937, 21944)))) or

               ((((elevation(repair_bot1) == 1 and self_elevation == 1) or (elevation(repair_bot2) == 1 and self_elevation == 1) or (elevation(repair_bot2) == 1 and self_elevation == 1)) and map_var(MVAR_Security_Level_2) == 1) or ((tile_distance(self_tile,tile_num(repair_bot1)) < 5 and is_visible(repair_bot1) and elevation(repair_bot1) == self_elevation) or (tile_distance(self_tile,tile_num(repair_bot2)) < 5 and is_visible(repair_bot2) and elevation(repair_bot2) == self_elevation) or (tile_distance(self_tile,tile_num(repair_bot3)) < 5 and is_visible(repair_bot3) and elevation(repair_bot3) == self_elevation)))) then begin
                  obj_unlock(self_obj);
               end else begin
                  if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
                     obj_lock(self_obj);
                  end
               end
            end
         end else begin
            if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
               obj_lock(self_obj);
            end
         end
         add_timer_event(self_obj, 1, CHECK_REPAIR);
      end
   end
   //end added

   if (obj_is_open(self_obj)) then begin
     if not combat_is_initialized then begin
       if ((tile_distance_objs(dude_obj, self_obj) > DOOR_CLOSE_DIST) and
       (checkPartyMembersNearDoor == false) and
       ((tile_distance_objs(self_obj, last_source_obj) > DOOR_CLOSE_DIST) or
       (critter_state(last_source_obj) == CRITTER_IS_DEAD))) then begin
         obj_close(self_obj);
       end else begin
         add_timer_event(self_obj, 10, TIMER_CLOSE);
       end
     end else begin
       add_timer_event(self_obj, 10, TIMER_CLOSE);
     end
   end
end

procedure map_enter_p_proc begin
   /* Set up the door state when the player first enters the map */
   if (local_var(LVAR_Set_Door_Status) == 0) then begin
     set_local_var(LVAR_Set_Door_Status,1);
     set_local_var(LVAR_Locked,LOCKED_STATUS);
     set_local_var(LVAR_Trapped,TRAPPED_STATUS);
   end
   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
     obj_lock(self_obj);
   end
   else begin
     obj_unlock(self_obj);
   end
   add_timer_event(self_obj, 1, CHECK_REPAIR); //added by killap
end
