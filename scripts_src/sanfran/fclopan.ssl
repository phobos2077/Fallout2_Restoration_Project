/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Lo Pan
        Location: San Fransico
        Description: He is the Dragon's arch enemy

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "fclopan"
#include "../headers/define.h"
//#include "../headers/sanfran1.h"

#define NAME                    SCRIPT_FCLOPAN
#define TOWN_REP_VAR            (GVAR_TOWN_REP_SAN_FRANCISCO)

#include "../headers/command.h"
#include "../headers/modreact.h"

#include "../headers/sanfran.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure push_p_proc;
procedure timed_event_p_proc;
procedure combat_p_proc;
procedure map_update_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;

procedure DoTest;
procedure DoChallenge;
procedure DoLearn;
procedure endTestFail;
procedure endTestPass;
procedure doFight;
procedure learn1;
procedure learn2;
procedure TakeInven;
procedure ReturnInven;
procedure checkTestObj;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_State                      (7)
#define LVAR_Beaten                     (8)
#define LVAR_Learn_Count                (9)
#define LVAR_Next_Learn_Time            (10)
#define LVAR_Test_Stage                 (11)
#define LVAR_Test_Obj                   (12)
#define LVAR_Old_Self_Tile              (13)
#define LVAR_Old_Dude_Tile              (14)
#define LVAR_Challenge                  (15)
#define LVAR_Container_Obj              (16)
#define LVAR_Node1_Count                (17)

#define STATE_LEARN      1
#define STATE_TEST       2
#define STATE_CHALLENGE  3
#define STATE_FIRSTFIGHT 4
#define STATE_ANGRY      5
#define STATE_DONE       6

#define LEARN_COUNT_MAX  4

#define ATTACK_DIST  5

#define TEST_SHI_PID1 PID_IMBOT
#define TEST_SHI_PID2 PID_WEJUNGH
#define TEST_SHI_PID3 PID_LOOPAL
#define TEST_SHI_PID4 PID_SMITTY
#define TEST_SHI_PID5 PID_MASTER_KRALL
#define TEST_SHI_PID6 PID_MASTER_KHUNG

#define TEST_POS_LOAD         20501
#define TEST_POS_DRAGON_WATCH 19501
#define TEST_POS_DUDE         (tile_num_in_direction(TEST_POS_LOAD, 4, 2))
#define TEST_POS_MIDDLE       (tile_num_in_direction(TEST_POS_LOAD, 4, 1))

#define TIMER_ATTACK 1
#define TIMER_DOTEST 2
#define TIMER_DOENDTESTPASS 3
#define TIMER_DOENDTESTFAIL 4
#define TIMER_FIGHT         5
#define TIMER_LEARN1        6
#define TIMER_LEARN2        7

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */
import variable i_lopan_obj;


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable called := 0;
variable learnCount := 0;
variable rnd := 0;
variable called1 := 0;

procedure map_update_p_proc begin
   // do nothing
end

procedure combat_p_proc begin
   variable obj;
   variable max;
   variable cur;
   variable wepobj;
   variable armor;

   if (local_var(LVAR_Test_Stage)) then
      call checkTestObj;
   if (local_var(LVAR_Test_Obj)) then begin
      obj := local_var(LVAR_Test_Obj);
      script_overrides;
   end

   if (obj and (called == 0)) then begin
      //if ((critter_state(obj) bwand CRITTER_IS_DEAD) or (is_critter_prone(obj))) then begin //added is_critter_prone (knock out code) - killap
      if ( (is_critter_dead(obj)) or (is_critter_prone(obj)) or ((critter_state(obj) bwand DAM_KNOCKED_OUT)) ) then begin //changed by killap
         max := 4;
         cur := 0;
         ndebug("critter was dead..." + max + " cur: " + cur);
      end else begin
         max := get_max_hits(obj);
         cur := get_cur_hits(obj);
         ndebug("critter wasn't dead... " + max + " cur: " + cur);
      end

      if (cur < (max / 4)) then begin
         if (cur > 0) then
            critter_heal(obj, 1 - cur);
 //        called := 1;

         float_msg(self_obj, mstr(226), FLOAT_MSG_WARNING);

         if (local_var(LVAR_Test_Stage) < 6) then begin
            called := 1;   //added by killap
            add_timer_event(self_obj, 2, TIMER_DOTEST);
            ndebug("called dotest");
         end else begin
            called := 1; //added by killap
            add_timer_event(self_obj, 2, TIMER_DOENDTESTPASS);
            ndebug("called do end test pass");
         end
      end else begin
         max := dude_max_hits;
         cur := dude_cur_hits;

         if (cur < (max / 4)) then begin
            called := 1;
            float_msg(self_obj, mstr(227), FLOAT_MSG_WARNING);
            add_timer_event(self_obj, game_ticks(2), TIMER_DOENDTESTFAIL);
         end
      end
   end else if (local_var(LVAR_Challenge) == 1) then begin
      if (self_cur_hits < self_max_hits / 3 and not self_item(PID_223_PISTOL)) then begin
         wepobj := create_object(PID_223_PISTOL, 0,0);
         add_obj_to_inven(self_obj, wepobj);
         add_mult_objs_to_inven(self_obj, create_object(PID_223_FMJ, 0, 0), 2);
         float_msg(self_obj, mstr(229), FLOAT_MSG_YELLOW);
         wield_obj(wepobj);
      end
   end
end

procedure push_p_proc begin
   script_overrides;
   move_to(dude_obj, tile_num_in_direction(self_tile, dude_rotation_to_self, 1), dude_elevation);
   display_msg(mstr(200));
end

procedure timed_event_p_proc begin
   if (fixed_param == TIMER_ATTACK) then begin
      if (not combat_is_initialized) then begin
         if (self_can_see_dude and tile_distance_objs(self_obj, dude_obj) < ATTACK_DIST) then begin
            floater((202));
            set_local_var(LVAR_Hostile, 2);
         end
      end
   end else if (fixed_param == TIMER_DOTEST) then begin
      game_ui_enable;
      call doTest;
   end else if (fixed_param == TIMER_DOENDTESTFAIL) then begin
      game_ui_enable;
      call endTestFail;
   end else if (fixed_param == TIMER_DOENDTESTPASS) then begin
      game_ui_enable;
      call endTestPass;
   end else if (fixed_param == TIMER_FIGHT) then begin
      call doFight;
   end else if (fixed_param == TIMER_LEARN1) then begin
      call learn1;
   end else if (fixed_param == TIMER_LEARN2) then begin
      call learn2;
   end
end

procedure start begin
   i_lopan_obj := self_obj;
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_SAN_FRAN_LOPAN);
   set_self_ai(AI_THE_DRAGON);
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   //added by killap

   variable obj;
   variable max;
   variable cur;
   variable wepobj;

   //end added


   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       self_attack_dude;
   end


   //added by killap

   if (local_var(LVAR_Test_Stage)) then
      call checkTestObj;
   if (local_var(LVAR_Test_Obj)) then begin
      obj := local_var(LVAR_Test_Obj);
      script_overrides;
   end

   if (obj and (called == 0)) then begin
      //if ((critter_state(obj) bwand CRITTER_IS_DEAD) or (is_critter_prone(obj))) then begin //added is_critter_prone (knock out code) - killap
      if ( (is_critter_dead(obj)) or (is_critter_prone(obj)) ) then begin //changed by killap
         max := 4;
         cur := 0;
         ndebug("critter was dead..." + max + " cur: " + cur);
      end else begin
         max := get_max_hits(obj);
         cur := get_cur_hits(obj);
         ndebug("critter wasn't dead... " + max + " cur: " + cur);
      end

      if (cur < (max / 4)) then begin
         if (cur > 0) then
            critter_heal(obj, 1 - cur);
 //        called := 1;

         float_msg(self_obj, mstr(226), FLOAT_MSG_WARNING);

         if (local_var(LVAR_Test_Stage) < 6) then begin
            called := 1;   //added by killap
            add_timer_event(self_obj, 2, TIMER_DOTEST);
            ndebug("called dotest");
         end else begin
            called := 1; //added by killap
            add_timer_event(self_obj, 2, TIMER_DOENDTESTPASS);
            ndebug("called do end test pass");
         end
      end else begin
         max := dude_max_hits;
         cur := dude_cur_hits;

         if (cur < (max / 4)) then begin
            called := 1;
            float_msg(self_obj, mstr(227), FLOAT_MSG_WARNING);
            add_timer_event(self_obj, game_ticks(2), TIMER_DOENDTESTFAIL);
         end
      end
   end else if (local_var(LVAR_Challenge) == 1) then begin
      if (self_cur_hits < self_max_hits / 3 and not self_item(PID_223_PISTOL)) then begin
         wepobj := create_object(PID_223_PISTOL, 0,0);
         add_obj_to_inven(self_obj, wepobj);
         add_mult_objs_to_inven(self_obj, create_object(PID_223_FMJ, 0, 0), 2);
         float_msg(self_obj, mstr(229), FLOAT_MSG_YELLOW);
         wield_obj(wepobj);
      end
   end

   //end added

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin
/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
/*   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
   end
   */
   if (obj_in_party(source_obj)) then begin
      if (not local_var(LVAR_Challenge)) then begin
         set_san_fran_flag(SF_LOPAN_ENEMY);
      end
   end
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_State, STATE_ANGRY);
      floater((201));
      add_timer_event(self_obj, game_ticks(5), TIMER_ATTACK);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=1;
   Slavery_Tolerant:=SLAVE_INTOLERANT;
   Karma_Perception:=KARMA_PERCEPTION4;

   CheckKarma;

   GetReaction;
   //added by killap
   if (local_var(LVAR_Challenge)) then begin
      set_local_var(LVAR_Hostile,1);
      attack(dude_obj);
   //end added
   end else if (san_fran_flag(SF_LOPAN_ENEMY)) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node016;
      gSay_End;
      end_dialogue;
   end else if ((elron_flag_any >= EL_ACCEPTED) and (not (san_fran_flag(SF_ELRON_ENEMY)))) then begin
      call Node019;
   end else if (local_var(LVAR_State) == STATE_DONE) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end else if (local_var(LVAR_State) == STATE_ANGRY) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node020;
      gSay_End;
      end_dialogue;
   end else if (local_var(LVAR_Beaten) and not on_lopan_mission) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node021;
      gSay_End;
      end_dialogue;
   end else if (san_fran_flag(SF_DRAGON_DEAD) and on_lopan_mission) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node024;
      gSay_End;
      end_dialogue;
   end else if (san_fran_flag(SF_DRAGON_DEAD)) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node025;
      gSay_End;
      end_dialogue;
   end else if (badger_flag(BADGER_DEADSHI)) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node023;
      gSay_End;
      end_dialogue;
   end else if (local_var(LVAR_Herebefore) == 1 and dude_iq < 4) then begin
      if (dude_iq == 1) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node002;
         gSay_End;
         end_dialogue;
      end else if (dude_iq > 1 and dude_iq < 4) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node006;
         gSay_End;
         end_dialogue;
      end
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end
   set_local_var(LVAR_Herebefore, 1);
   if (local_var(LVAR_State) == STATE_TEST) then begin
      set_local_var(LVAR_State, 0);
      set_local_var(LVAR_Old_Self_Tile, self_tile);
      set_local_var(LVAR_Old_Dude_Tile, dude_tile);
      call DoTest;
   end else if (local_var(LVAR_State) == STATE_CHALLENGE) then begin
      set_local_var(LVAR_Old_Dude_Tile, dude_tile);
      set_local_var(LVAR_State, 0);
      set_local_var(LVAR_Challenge, 1);
      call DoChallenge;
   end else if (local_var(LVAR_State) == STATE_LEARN) then begin
      set_local_var(LVAR_Old_Dude_Tile, dude_tile);
      set_local_var(LVAR_Old_Self_Tile, self_tile);
      set_local_var(LVAR_State, 0);
      inc_local_var(LVAR_Learn_Count);
      if (local_var(LVAR_Learn_Count) < LEARN_COUNT_MAX) then
         set_local_var(LVAR_Next_Learn_Time, game_time + ONE_GAME_DAY);
      else
         set_local_var(LVAR_Next_Learn_Time, -1);
      call DoLearn;
   end
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/

/* Set global_variable for Enemy status*/
   set_san_fran_flag(SF_LOPAN_DEAD);

   if (local_var(LVAR_Challenge) == 1) then begin
      if (global_var(GVAR_SAN_FRAN_DRAGON_KLOPAN_QST) == 0) then begin
         give_xp(EXP_LOPAN_CHALLENGE_NO_MISSION);
         inc_san_fran_rep(REP_HERO_SAN_FRAN_KILL_LOPAN);
      end
      inc_evil_critter
      fadeout(1);
      move_to(dude_obj, local_var(LVAR_Old_Dude_Tile), dude_elevation);
      call ReturnInven;
      call removeVaultBoxerAppearance; //added by killap - expansion
      fadein(1);
      display_mstr(214);
      if (combat_is_initialized) then
         terminate_combat;

   end else begin
      inc_evil_critter
   end
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE
procedure NodeTest begin
   set_local_var(LVAR_State, STATE_TEST);
   call Node999;
end

procedure Node4_5 begin
   if (check_general_rep < -249) then
      call Node004;
   else
      call Node005;
end

procedure Node001 begin
   Reply(103);
   NLowOption(105, Node003);  //edit by killap
   NLowOption(104, Node002);  //edit by killap
   if (local_var(LVAR_Node1_Count) == 0 and not san_fran_flag(SF_DRAGON_DEAD)) then begin
      inc_local_var(LVAR_Node1_Count);
      NOption(106, Node007, 4);
   end
   if (local_var(LVAR_State) == 0) then
      NOption(107, Node015, 4);
   NOption(108, Node4_5, 4);
   if (local_var(LVAR_State) == 0) then begin
      if (on_dragon_mission) then
         NOption(109, Node013, 4);
      else
         NOption(109, Node012, 4);
   end
   NOption(110, NOde999, 4);
end

procedure Node002 begin
   Reply(111);
   NLowOption(112, Node999);
end

procedure Node003 begin
   Reply(113);
   NLowOption(114, Node4_5);  //killap's fix: was NOption(114, Node4_5,4)
   NLowOption(115, Node999);  //killap's fix: was NOption(114, Node4_5,4)
end

procedure NodeLearn begin
   set_local_var(LVAR_State, STATE_LEARN);
   call Node999;
end

procedure Node004 begin
   if (local_var(LVAR_Beaten) == 0 and local_var(LVAR_Next_Learn_Time) != -1) then begin
      if (has_skill(dude_obj, SKILL_UNARMED_COMBAT) < 100) then begin
         ndebug("Game_Time: " + game_time + " Next_Time: " + local_var(LVAR_Next_Learn_Time));
         if (game_time > local_var(LVAR_Next_Learn_Time)) then begin
            Reply(116);
            NOption(117, NodeLearn, 1);
         end else begin
            Reply(204);
            ENDOPTION;
         end
      end else begin
         Reply(216);
         ENDOPTION;
      end
   end else begin
      Reply(203);
      ENDOPTION;
   end
end

procedure Node005 begin
   set_local_var(LVAR_State, STATE_ANGRY);
   Reply(118);
   NOption(119, Node999, 4);
   NLowOption(121, Node999);  //added by killap
end

procedure Node006 begin
   Reply(120);
   NLowOption(121, Node999); //killap's fix: was NOption(121, Node999,4)
end

procedure Node008a begin
   DownReactMinor;
   call Node008;
end

procedure Node007 begin
   Reply(122);
   GOption(123, Node009, 4);
   BOption(124, Node008a, 4);
   NOption(125, Node001, 4);
end

procedure Node008 begin
   Reply(126);
   NOption(127, Node999, 4);
end

procedure Node010a begin
   UpReactMinor;
   call Node010;
end

procedure Node009 begin
   Reply(128);
   GOption(129, Node010a, 4);
   NOption(130, Node001, 4);
   NOption(131, Node999, 4);
end

procedure Node011a begin
   DownReactMinor;
   call Node011;
end

procedure Node2628 begin
   if (has_skill(dude_obj, SKILL_UNARMED_COMBAT) >= 125) then begin
      call Node026;
   end else begin
      call Node028;
   end
end

procedure Node010 begin
   Reply(132);
   BOption(133, Node011a, 4);
   NOption(134, Node2628, 4);
   NOption(135, Node999, 4);
end

procedure Node011 begin
   Reply(136);
   NOption(137, Node2628, 4);
   NOption(138, Node001, 4);
   NOption(139, Node999, 4);
end

procedure Node012 begin
   Reply(140);
   NOption(141, Node013, 4);
   NOption(142, Node014, 4);
   NOption(143, Node999, 4);
end

procedure NodeAngry begin
   set_local_var(LVAR_State, STATE_ANGRY);
   call Node999;
end

procedure Node013 begin
   Reply(144);
   if (on_dragon_mission) then
      NOption(145, Node017, 4);
   else
      NOption(146, Node018, 4);
end

procedure Node013a begin
   DownReactMinor;
   call Node013;
end

procedure Node014 begin
   if (local_var(LVAR_Beaten) == 0) then begin
      Reply(147);
      NOption(148, NodeTest, 4);
   end else begin
      if (san_fran_flag(SF_DRAGON_DEAD) == 0) then
         Reply(215);
      else
         Reply(220);
      ENDOPTION;
   end
end

procedure NodeAttackNow begin
   call Node998;
end

procedure NodeChallenge begin
   set_local_var(LVAR_State, STATE_CHALLENGE);
   call Node999;
end

procedure Node015 begin
   Reply(149);

   NOption(150, Node2628, 4);
   NOption(151, Node001, 4);
   NOption(152, Node999, 4);
end

procedure Node016 begin
   Reply(153);
   NOption(154, Node998, 4);
end

procedure Node017 begin
   Reply(155);
   NOption(156, NodeAttackNow, 4);
   NOption(157, NodeChallenge, 4);
end

procedure Node018 begin
   Reply(158);
   NOption(159, NodeAttackNow, 4);
   NOption(160, NodeChallenge, 4);
end

procedure Node019 begin
   float_msg(self_obj, mstr(161), FLOAT_MSG_RED);
//   Reply(161);
//   NOption(162, Node999, 4);
end

procedure Node020 begin
   Reply(163);
   NOption(109, Node013, 4);
   NOption(164, Node999, 4);
end

procedure Node021 begin
   set_san_fran_flag(SF_ON_LOPAN_MISSION);
   SHOW_LOPAN_KDRAGON_QUEST;
   Reply(165);
   NOption(166, Node999, 4);
   NOption(167, Node022, 4);
   NOption(168, Node001, 4);
end

procedure Node022 begin
   Reply(169);
   NOption(170, Node001, 4);
   NOption(171, Node999, 4);
end

procedure Node023 begin
   Reply(172);
   NOption(173, Node001, 4);
   NOption(174, Node999, 4);
end

procedure Node024 begin
   //added by killap
   if (global_var(GVAR_SAN_FRAN_DRAGON_KLOPAN_QST) == 1) then
      set_global_var(GVAR_SAN_FRAN_DRAGON_KLOPAN_QST, 3); //set to failure
   //end added

   set_local_var(LVAR_State, STATE_DONE);
   inc_general_rep(REP_BONUS_KILL_DRAGON_ON_MISSION);
   COMPLETE_LOPAN_KDRAGON_QUEST;

   Reply(175);
   NOption(176, Node001, 4);
   NOption(177, Node999, 4);
end

procedure Node025 begin
   //added by killap
   if (global_var(GVAR_SAN_FRAN_DRAGON_KLOPAN_QST) == 1) then
      set_global_var(GVAR_SAN_FRAN_DRAGON_KLOPAN_QST, 3); //set to failure
   //end added

   set_local_var(LVAR_State, STATE_DONE);
   inc_general_rep(REP_BONUS_KILL_DRAGON);
   COMPLETE_LOPAN_KDRAGON_QUEST;

   Reply(221);
   NOption(222, Node999, 4);
   NLowOption(223, Node999);
   NOption(224, Node001, 4);
   NLowOption(225, Node001);
end

procedure Node026 begin
   if (local_var(LVAR_Beaten) == 0) then begin
      Reply(230);
      NOption(231, Node027, 4);
      NOption(232, Node999, 4);
   end else begin
      if (san_fran_flag(SF_DRAGON_DEAD) == 0) then
         Reply(215);
      else
         Reply(220);
      ENDOPTION;
   end
end

procedure Node027 begin
   Reply(233);
   NOption(234, NodeTest, 4);
   NOption(235, Node999, 4);
end

procedure Node028 begin
   Reply(236);
   NOption(237, Node001, 4);
   NOption(238, Node999, 4);
end

procedure SafeDestroy begin
   ndebug("SafeDestroy called"); // Seraph's Code
   if (local_var(LVAR_Test_Obj)) then begin
      //if (not (is_critter_dead(local_var(LVAR_Test_Obj)))) then begin // Commented out by Seraph
         reg_anim_clear(local_var(LVAR_Test_Obj));
         destroy_object(local_var(LVAR_Test_Obj));
      /* Commented out by Seraph
      end else
         ndebug("couldn't delete object already dead");
      //*/
      set_local_var(LVAR_Test_Obj, 0);
   end
end

procedure HideObj begin
   if (local_var(LVAR_Test_Obj)) then begin
      if (not (is_critter_dead(local_var(LVAR_Test_Obj)))) then begin
         set_obj_invisible(local_var(LVAR_Test_Obj));
         move_to(local_var(LVAR_Test_Obj), self_tile, 2);
      end
   end
end

procedure DoTest begin
   variable strnum;
   variable count;

   rm_fixed_timer_event(self_obj, TIMER_DOTEST);
   if (not combat_is_initialized) then begin
      ndebug("in dotest");
      called := 0;
      called1 := 0;
      call TakeInven;
      call SafeDestroy;
      call doVaultBoxerAppearance; //added by killap - expansion

      if (local_var(LVAR_Test_Stage) == 0) then begin
         fadeout(1);
         if (not tile_contains_pid_obj(7635, 0, TEST_SHI_PID1)) then begin
            create_object(TEST_SHI_PID1, 7635, 0);
            count += 1;
         end
         if (not tile_contains_pid_obj(7634, 0, TEST_SHI_PID2)) then begin
            create_object(TEST_SHI_PID2, 7634, 0);
            count += 1;
         end
         if (not tile_contains_pid_obj(7833, 0, TEST_SHI_PID3)) then begin
            create_object(TEST_SHI_PID3, 7833, 0);
            count += 1;
         end
         if (not tile_contains_pid_obj(7832, 0, TEST_SHI_PID4)) then begin
            create_object(TEST_SHI_PID4, 7832, 0);
            count += 1;
         end
         if (not tile_contains_pid_obj(8031, 0, TEST_SHI_PID5)) then begin
            create_object(TEST_SHI_PID5, 8031, 0);
            count += 1;
         end
         if (not tile_contains_pid_obj(8030, 0, TEST_SHI_PID6)) then begin
            create_object(TEST_SHI_PID6, 8030, 0);
            count += 1;
         end
         ndebug("count was at " + count);
      end

      if (local_var(LVAR_Test_Stage) < 6) then begin
         game_ui_disable;
         critter_heal(dude_obj, dude_max_hits - dude_cur_hits);
         move_to(self_obj, TEST_POS_DRAGON_WATCH, self_elevation);
         move_to(dude_obj, TEST_POS_DUDE, dude_elevation);
         if (local_var(LVAR_Test_Stage) == 0) then begin
            set_local_var(LVAR_Test_Obj, tile_contains_pid_obj(7635, 0, TEST_SHI_PID1));
            strnum := 206;
         end else if (local_var(LVAR_Test_Stage) == 1) then begin
            set_local_var(LVAR_Test_Obj, tile_contains_pid_obj(7634, 0, TEST_SHI_PID2));
            float_msg(self_obj, mstr(228), FLOAT_MSG_WARNING);
            strnum := 207;
         end else if (local_var(LVAR_Test_Stage) == 2) then begin
            set_local_var(LVAR_Test_Obj, tile_contains_pid_obj(7833, 0, TEST_SHI_PID3));
            float_msg(self_obj, mstr(228), FLOAT_MSG_WARNING);
            strnum := 208;
         end else if (local_var(LVAR_Test_Stage) == 3) then begin
            set_local_var(LVAR_Test_Obj, tile_contains_pid_obj(7832, 0, TEST_SHI_PID4));
            float_msg(self_obj, mstr(228), FLOAT_MSG_WARNING);
            strnum := 209;
         end else if (local_var(LVAR_Test_Stage) == 4) then begin
            set_local_var(LVAR_Test_Obj, tile_contains_pid_obj(8031, 0, TEST_SHI_PID5));
            float_msg(self_obj, mstr(228), FLOAT_MSG_WARNING);
            strnum := 210;
         end else if (local_var(LVAR_Test_Stage) == 5) then begin
            set_local_var(LVAR_Test_Obj, tile_contains_pid_obj(8030, 0, TEST_SHI_PID6));
            float_msg(self_obj, mstr(228), FLOAT_MSG_WARNING);
            strnum := 205;
         end

         if (local_var(LVAR_Test_Obj)) then
            move_to(local_var(LVAR_Test_Obj), TEST_POS_LOAD, 0);
         ndebug("uhh test obj set at: " + local_var(LVAR_Test_Obj));

         set_ai(local_var(LVAR_Test_Obj),AI_THE_DRAGON);

         reg_anim_clear(self_obj);
         reg_anim_begin();
         self_rotate(3);
         reg_anim_end();

         reg_anim_clear(local_var(LVAR_Test_Obj));
         reg_anim_begin();
         obj_rotate(local_var(LVAR_Test_Obj), 4);
         reg_anim_end();

         reg_anim_clear(dude_obj);
         reg_anim_begin();
         dude_rotate(1);
         reg_anim_end();

         fadein(1);
         game_ui_disable;
         float_msg(local_var(LVAR_Test_Obj), mstr(strnum), FLOAT_MSG_NORMAL);
         add_timer_event(self_obj, game_ticks(3), TIMER_FIGHT);
      end
      inc_local_var(LVAR_Test_Stage);
   end else begin
      if (called1 == 0) then begin
         called1 := 1;
         fadeout(1);
         call HideObj;
      end
      terminate_combat;
      add_timer_event(self_obj, 2, TIMER_DOTEST);
   end
end


procedure doFight begin
   game_ui_enable;
   float_msg(self_obj, mstr(211), FLOAT_MSG_WARNING);
   if (local_var(LVAR_Challenge) == 0) then
      attack_setup(local_var(LVAR_Test_Obj), dude_obj);
   else
      attack(dude_obj);
end

procedure endTestFail begin
   if (not combat_is_initialized) then begin
      called1 := 1;
      call SafeDestroy;
      call ReturnInven;
      call removeVaultBoxerAppearance; //added by killap - expansion

      set_local_var(LVAR_Test_Stage, 0);
      move_to(self_obj, local_var(LVAR_Old_Self_Tile), self_elevation);
      move_to(dude_obj, local_var(LVAR_Old_Dude_Tile), dude_elevation);
      fadein(1);
      float_msg(self_obj, mstr(212), FLOAT_MSG_NORMAL);
   end else begin
      if (called1 == 0) then begin
         called1 := 1;
         fadeout(1);
         call HideObj;
      end
      terminate_combat;
      add_timer_event(self_obj, 2, TIMER_DOENDTESTFAIL);
   end
end

procedure endTestPass begin
   if (not combat_is_initialized) then begin
      call SafeDestroy;
      called1 := 0;
      call ReturnInven;
      call removeVaultBoxerAppearance; //added by killap

      set_local_var(LVAR_Test_Stage, 0);
      critter_heal(dude_obj, dude_max_hits - dude_cur_hits);
      move_to(self_obj, local_var(LVAR_Old_Self_Tile), self_elevation);
      move_to(dude_obj, local_var(LVAR_Old_Dude_Tile), dude_elevation);
      set_local_var(LVAR_Beaten, 1);

      COMP_QUEST(0, 0, EXP_LOPAN_BEAT_TEST)

      if (san_fran_flag(SF_DRAGON_DEAD)) then begin
         set_local_var(LVAR_State, STATE_DONE);
      end

      fadein(1);

      dialogue_system_enter;
   end else begin
      if (called1 == 0) then begin
         called1 := 1;
         fadeout(1);
         call HideObj;
      end
      terminate_combat;
      add_timer_event(self_obj, 2, TIMER_DOENDTESTPASS);
   end
end

procedure DoChallenge begin
   game_ui_disable;
   call TakeInven;
   call doVaultBoxerAppearance; //added by killap - expansion
   fadeout(1);
   critter_heal(dude_obj, dude_max_hits - dude_cur_hits);
   critter_heal(self_obj, self_max_hits - self_cur_hits);
   set_self_team(TEAM_LONER); //edit by killap - was TEAM_SAN_FRAN_SHI

   move_to(self_obj, TEST_POS_LOAD, self_elevation);
   move_to(dude_obj, TEST_POS_DUDE, dude_elevation);
   fadein(1);
   float_msg(self_obj, mstr(213), FLOAT_MSG_NORMAL);
   add_timer_event(self_obj, game_ticks(3), TIMER_FIGHT);
end

procedure DoLearn begin
   game_ui_disable;
   fadeout(1);
   inven_unwield(dude_obj); //added by killap - expansion
   move_to(self_obj, TEST_POS_LOAD, self_elevation);
   move_to(dude_obj, TEST_POS_DUDE, dude_elevation);
   self_rotate(1);
   dude_rotate(1);
   fadein(1);
   float_msg(self_obj, mstr(217), FLOAT_MSG_NORMAL);
   add_timer_event(self_obj, game_ticks(3), TIMER_LEARN1);
end

#define CALL_LEARN_1 6

procedure learn1 begin
   if (learnCount == 0) then learnCount := 1;

   if (learnCount bwand 1) then begin
      if (rnd == 0) then begin
         rnd := Random(0, 1);
         reg_anim_clear(self_obj);
         reg_anim_begin();
         reg_anim_animate(self_obj, ANIM_throw_punch, -1);
         reg_anim_end();
      end else begin
         reg_anim_clear(dude_obj);
         reg_anim_begin();
         reg_anim_animate(dude_obj, ANIM_dodge_anim, -1);
         reg_anim_end();
      end
   end else begin
      if (rnd == 0) then begin
         reg_anim_clear(dude_obj);
         reg_anim_begin();
         reg_anim_animate(dude_obj, ANIM_throw_punch, -1);
         reg_anim_end();
      end else begin
         reg_anim_clear(dude_obj);
         reg_anim_begin();
         reg_anim_animate(dude_obj, ANIM_dodge_anim, -1);
         reg_anim_end();
      end
   end

   if (learnCount < CALL_LEARN_1) then
      add_timer_event(self_obj, game_ticks(2), TIMER_LEARN1);
   else
      add_timer_event(self_obj, game_ticks(2), TIMER_LEARN2);

   learnCount += 1;
end

procedure learn2 begin
   fadeout(1);
   learnCount := 0;
   game_time_advance(ONE_GAME_HOUR * 4);
   game_ui_enable;

   move_to(self_obj, local_var(LVAR_Old_Self_Tile), self_elevation);
   move_to(dude_obj, local_var(LVAR_Old_Dude_Tile), dude_elevation);
   fadein(1);
   float_msg(self_obj, mstr(218), FLOAT_MSG_NORMAL);
   display_msg(mstr(219));
   critter_mod_skill(dude_obj, SKILL_UNARMED_COMBAT, 5);
end

procedure ReturnInven begin
   set_local_var(LVAR_Container_Obj, tile_contains_pid_obj(0, self_elevation, PID_LOCKER_CLEAN_LEFT));
   if (local_var(LVAR_Container_Obj)) then begin
      move_obj_inven_to_obj(local_var(LVAR_Container_Obj), dude_obj);
      destroy_object(local_var(LVAR_Container_Obj));
      set_local_var(LVAR_Container_Obj, 0);
   end
end

procedure TakeInven begin
   if (local_var(LVAR_Container_Obj) == 0) then begin
      set_local_var(LVAR_Container_Obj, create_object(PID_LOCKER_CLEAN_LEFT, 0, self_elevation));
      if (local_var(LVAR_Container_Obj)) then begin
         move_obj_inven_to_obj(dude_obj, local_var(LVAR_Container_Obj));
      end
   end
end

procedure getCurrentPid begin
   if (local_var(LVAR_Test_Stage) == 0) then
      return(TEST_SHI_PID1);
   else if (local_var(LVAR_Test_Stage) == 1) then
      return(TEST_SHI_PID2);
   else if (local_var(LVAR_Test_Stage) == 2) then
      return(TEST_SHI_PID3);
   else if (local_var(LVAR_Test_Stage) == 3) then
      return(TEST_SHI_PID4);
   else if (local_var(LVAR_Test_Stage) == 4) then
      return(TEST_SHI_PID5);
   else if (local_var(LVAR_Test_Stage) == 5) then
      return(TEST_SHI_PID6);
   return(0);
end

procedure checkTestObj begin
   variable TileOffset;
   variable TestObjNum;
   variable StartTile;
   variable obj;
   variable CurrentPid;

   if (local_var(LVAR_Test_Obj)) then begin
      while (TestObjNum < 10) do begin
         if (TestObjNum == 0) then
            StartTile := 19708;
         else if (TestObjNum == 1) then
            StartTile := 19908;
         else if (TestObjNum == 2) then
            StartTile := 20108;
         else if (TestObjNum == 3) then
            StartTile := 20308;
         else if (TestObjNum == 4) then
            StartTile := 20508;
         else if (TestObjNum == 5) then
            StartTile := 20708;
         else if (TestObjNum == 6) then
            StartTile := 20908;
         else if (TestObjNum == 7) then
            StartTile := 21108;
         else if (TestObjNum == 8) then
            StartTile := 21308;
         else if (TestObjNum == 9) then
            StartTile := 21508;
         TileOffset := 0;
         CurrentPid := getCurrentPid;
         while (TileOffset < 10) do begin
            obj := tile_get_next_critter(StartTile-TileOffset, 0, 0);
            if (obj) then begin
               if (obj == dude_obj) then begin
                  obj := 0;
                  ndebug("FYI: found dude");
               end
            end
            if (obj) then begin
               set_local_var(LVAR_Test_Obj, obj);
               ndebug("object re-located at tile " + (StartTile-TileOffset) + " obj set to instance: " + obj);
               TileOffset := 10;
            end else begin
               ndebug("looking for fighter pid: " + CurrentPid + " tile: " + (StartTile-TileOffset));
               TileOffset += 1;
            end
         end
         if (obj) then
            TestObjNum := 10;
         else
            TestObjNum += 1;
      end
   end else
      ndebug("test obj not set");
end

//xxxxxxxxxxxxxxxxxxxx
