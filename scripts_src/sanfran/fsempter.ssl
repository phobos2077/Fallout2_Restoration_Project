/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Emperor Computer Terminal
        Location: San Fran China map
        Description: Uhh you can do stuff with it.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "fsempter"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"

#define NAME                    SCRIPT_FSEMPTER
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_SAN_FR)

#include "../headers/command.h"
//#include "../headers/modreact.h"
#include "../headers/sanfran.h"


/* Standard Script Procedures */
procedure start;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure use_p_proc;
procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;

//added by killap - expansion
procedure Node029a;
procedure Node029;
procedure Node030;
procedure Node031;
procedure Node032;
procedure Node033;
procedure Node034;
procedure Node035;
procedure Node036;
procedure Node037;
procedure Node038;
procedure Node039;
procedure Node040;
procedure Node040a;
procedure Node040b;
procedure Node040c;
procedure Node041;
procedure Node042;
procedure Node043;
procedure Node044;
procedure Node045;
procedure Node046;
procedure Node047;
procedure Node048;
procedure Node049;
procedure Node050;
procedure Node051;
procedure Node052;
procedure Node053;
procedure Node054;
procedure Node055;
procedure Node056;
procedure Node057;
procedure Node058;
procedure Node059;
procedure Node060;
procedure Node061;
procedure Node062;
procedure Node063;
procedure Node064;
procedure Node065;
procedure Node066;
procedure Node067;
procedure Node068;
procedure Node069;
procedure Node070;
procedure Node071;

procedure DoCallGuards;

#define GUARD_TILE_1 17851
#define GUARD_TILE_2 17845

#define TIMER_CALLGUARDS 1

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Denied                     (7)
#define LVAR_Hack_Xp                    (8)

#define LVAR_029_First_Use              (9) //added by killap
#define LVAR_040_First_Use              (10) //added by killap
/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */
import variable i_emperor_ffield_obj;


/* Local variables which do not need to be saved between map changes. */
variable Only_Once   := 0;
variable fromNode001 := 0;
variable callGuards  := 0;
variable turnFieldOn := 0;

procedure start begin
end

procedure timed_event_p_proc begin
   call DoCallGuards;
end

procedure use_p_proc begin
   script_overrides;
   if (not san_fran_flag(SF_EMPEROR_FORMATTED)) then
      dialogue_system_enter;
   else
      display_msg(mstr(215));
end


/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if not combat_is_initialized then begin
      set_san_fran_flag(SF_SHI_ENEMY);
      call DoCallGuards;
   end
end

procedure use_obj_on_p_proc begin
   display_msg(mstr(214));
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   if (local_var(LVAR_Denied) == 1) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node003;
      gSay_End;
      end_dialogue;
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end

   if (callGuards == 1) then begin
      callGuards := 0;
      add_timer_event(self_obj, 0, TIMER_CALLGUARDS);
   end
   if (turnFieldOn == 1) then begin
      turnFieldOn := 0;
      unset_san_fran_flag(SF_EMPEROR_FIELD_OFF);
   end

   set_local_var(LVAR_Herebefore, 1);
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
   call use_p_proc;
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure NodeHack begin
   if (skill_success(dude_obj, SKILL_SCIENCE, 0)) then begin
      if (has_skill(dude_obj, SKILL_SCIENCE) >= 115) then begin
         fromNode001 := 1;
         if (local_var(LVAR_Hack_Xp) == 0) then begin
            set_local_var(LVAR_Hack_Xp, 1);
            COMP_QUEST(0, 0, EXP_SHI_HACK_UNKNOWN)
         end
         call Node002;
      end else begin
         set_shihacked_flag(SHI_TRUE);
         set_san_fran_flag(SF_SHI_ENEMY);
         if (local_var(LVAR_Hack_Xp) == 0) then begin
            set_local_var(LVAR_Hack_Xp, 1);
            COMP_QUEST(REP_BONUS_SAN_FRAN_SHI_HACKED_BAD, REP_HERO_SAN_FRAN_HACKED_SHI_BAD, EXP_SHI_HACK_KNOWN)
         end
         fromNode001 := 1;
         call Node002;
      end
   end else begin
      call Node004;
   end
end

procedure Node001 begin
   Reply(103);
   NLowOption(104, Node999);

   if (san_fran_flag(SF_LEE_OK_FUEL_TANKER)) then begin
      fromNode001 := 1;
      NOption(105, Node002, 4);
   end
   NOption(106, Node003, 4);
   NOption(107, Node003, 4);
   NOption(108, NodeHack, 4);
   NOption(109, Node999, 4);
end

procedure Node002 begin
   if (fromNode001) then begin
      fromNode001 := 0;
      Reply(110);
   end else begin
      Reply(111);
   end

   //if (f2_state_tribe_kidnapped) then begin --worthless check... -killap
      NOption(220, Node027, 4);
   //end
   NOption(112, Node005, 4);
   NOption(113, Node006, 4);
   NOption(114, Node007, 4);
   NOption(115, Node999, 4);
end

procedure Node003 begin
   Reply(116);
   NOption(117, NodeHack, 4);
   NOption(118, Node999, 4);
end

procedure Node004 begin
   set_local_var(LVAR_Denied, 1);
   turnFieldOn := 1;

   set_shihacked_flag(SHI_TRUE);
   set_san_fran_flag(SF_SHI_ENEMY);
   callGuards := 1;

   Reply(119);
   NOption(120, Node999, 4);
end

procedure Node005 begin
   Reply(121);
   NOption(122, Node008, 4);
   NOption(123, Node009, 4);
   NOption(124, Node010, 4);
   NOption(125, Node002, 4);
end

procedure Node006 begin
   Reply(126);
   if (san_fran_flag(SF_EMP_ROOM_BIO)) then
      NOption(127, Node013, 4);
   if (san_fran_flag(SF_EMP_ROOM_CHEM)) then
      NOption(128, Node017, 4);
   if (san_fran_flag(SF_EMP_ROOM_PHY)) then
      NOption(129, Node022, 4);
   NOption(130, Node029a, 4); //unlocked/added by killap
   NOption(131, Node002, 4);
end

procedure Node007 begin
   variable val;

   val := Random(132, 140);
   if (val == 132 and not has_rep_childkiller) then
      val := 133;

   if (val == 133 and check_general_rep > 0) then
      val := 134;

   Reply(val);
   NOption(141, Node007, 4);
   NOption(142, Node002, 4);
end

procedure NodeBioOn begin
   set_san_fran_flag(SF_EMP_ROOM_BIO);
   call Node008;
end

procedure NodeChemOn begin
   set_san_fran_flag(SF_EMP_ROOM_CHEM);
   call Node008;
end

procedure NodePhyOn begin
   set_san_fran_flag(SF_EMP_ROOM_PHY);
   call Node008;
end

procedure NodeBioOff begin
   unset_san_fran_flag(SF_EMP_ROOM_BIO);
   call Node008;
end

procedure NodeChemOff begin
   unset_san_fran_flag(SF_EMP_ROOM_CHEM);
   call Node008;
end

procedure NodePhyOff begin
   unset_san_fran_flag(SF_EMP_ROOM_PHY);
   call Node008;
end

procedure Node008 begin
   variable str;

   if (san_fran_flag(SF_EMP_ROOM_BIO)) then
      str := mstr(143);
   else
      str := mstr(144);

   if (san_fran_flag(SF_EMP_ROOM_CHEM)) then
      str += " - " + mstr(145);
   else
      str += " - " + mstr(146);

   if (san_fran_flag(SF_EMP_ROOM_PHY)) then
      str += " - " + mstr(147);
   else
      str += " - " + mstr(148);

   Reply(str);

   if (san_fran_flag(SF_EMP_ROOM_BIO)) then begin
      NOption(149, NodeBioOff, 4);
      NOption(152, Node013, 4);
   end
   if (san_fran_flag(SF_EMP_ROOM_CHEM)) then begin
      NOption(150, NodeChemOff, 4);
      NOption(153, Node017, 4);
   end
   if (san_fran_flag(SF_EMP_ROOM_PHY)) then begin
      NOption(151, NodePhyOff, 4);
      NOption(154, Node022, 4);
   end

   if (not san_fran_flag(SF_EMP_ROOM_BIO)) then
      NOption(155, NodeBioOn, 4);
   if (not san_fran_flag(SF_EMP_ROOM_CHEM)) then
      NOption(156, NodeChemOn, 4);
   if (not san_fran_flag(SF_EMP_ROOM_PHY)) then
      NOption(157, NodePhyOn, 4);
   NOption(158, Node005, 4);
end

procedure Node009 begin
   Reply(159);
   NOption(160, Node011, 4);
   NOption(161, Node005, 4);
end

procedure Node010 begin
   Reply(162);
   NOption(163, Node005, 4);
end

procedure Node011 begin
   Reply(164);
   NOption(165, Node012, 4);
   NOption(166, Node005, 4);
end

procedure Node012 begin
   set_san_fran_flag(SF_SHI_ENEMY);
   set_san_fran_flag(SF_EMPEROR_FORMATTED);

   //added by killap
   if (global_var(GVAR_SAN_FRAN_KILL_OZ9_QST) == 1) then
      set_global_var(GVAR_SAN_FRAN_KILL_OZ9_QST, 3); //set to failed - killap
   //end added

   callGuards := 1;

   Reply(167);
   NOption(168, Node999, 4);
end

procedure Node013 begin
   Reply(169);
   NOption(170, Node014, 4);
   NOption(171, Node015, 4);
   NOption(172, Node016, 4);
   NOption(173, Node006, 4);
end

procedure Node014 begin
   game_time_advance(ONE_GAME_MINUTE * 20);
   Reply(174);
   NOption(175, Node015, 4);
   NOption(176, Node016, 4);
   NOption(177, Node013, 4);
end

procedure Node015 begin
   game_time_advance(ONE_GAME_MINUTE * 20);
   Reply(178);
   NOption(179, Node014, 4);
   NOption(180, Node016, 4);
   NOption(181, Node013, 4);
end

procedure Node016 begin
   Reply(182);
   NOption(183, Node014, 4);
   NOption(184, Node015, 4);
   NOption(185, Node013, 4);
end

procedure Node017 begin
   Reply(186);
   NOption(187, Node018, 4);
   NOption(188, Node019, 4);
   NOption(189, Node006, 4);
end

procedure NodeTanker2120 begin
   COMPLETE_TANKER_FUEL;
   if (san_fran_flag(SF_LEE_OK_FUEL_TANKER)) then begin
      call Node021;
   end else begin
      call Node020;
   end
end

procedure NodeElron20 begin
   COMPLETE_ELRON_GAS_QUEST;
   call Node020;
end

procedure Node018 begin
   if (skill_success(dude_obj, SKILL_SCIENCE, -100)) then begin
      game_time_advance(ONE_GAME_HOUR);
      Reply(190);
   end else begin
      game_time_advance(ONE_GAME_MINUTE * 15);
      Reply(191);
   end
   if (not tanker_flag(TANK_FUEL) and not san_fran_flag(SF_GAS_ELRONS)) then begin
      if (tanker_flag(TANK_KNOWN)) then
         NOption(192, NodeTanker2120, 4);
      if (san_fran_flag(SF_GAS_BEGUN)) then
         NOption(193, NodeElron20, 4);
   end
   NOption(194, Node017, 4);
end

procedure Node019 begin
   game_time_advance(ONE_GAME_MINUTE * 15);  //added by killap
   Reply(195);
   NOption(196, Node017, 4);
end

procedure Node020 begin
   //COMP_QUEST(REP_BONUS_SAN_FRAN_SHI_HACKED_BAD, REP_HERO_SAN_FRAN_HACKED_SHI_BAD, EXP_SHI_HACK_KNOWN) --comment out by killap - doesn't make sence to get xp twice for hacking in in the event you don't have permission from Ken Lee
   set_shihacked_flag(SHI_TRUE);
   Reply(197);
   NOption(198, Node999, 4);
end

procedure Node021 begin
   Reply(199);
   NOption(200, Node999, 4);
end

procedure Node2324 begin
   if (shi_whirly(SH_WH_GIVEN)) then begin
      call Node023;
   end else begin
      call Node024;
   end
end

procedure Node022 begin
   Reply(201);
   NOption(202, Node2324, 4);
   NOption(203, Node025, 4);
   NOption(204, Node006, 4);
end

procedure NodeCopy begin
   //added by killap
   variable plans;
   plans:=create_object(WHIRLY_PLANS_PID,0,0);
   add_obj_to_inven( dude_obj, plans );
   //end added

   //add_obj_to_inven(self_obj, create_object(WHIRLY_PLANS_PID, self_tile, elevation(self_obj)));
   call Node022;
end

procedure Node023 begin
   Reply(205);
   if (elron_whirly(EL_WH_STEALSHI) or san_fran_flag(SF_BROTHER_PLANS)) then
      NOption(206, NodeCopy, 4);
   NOption(207, Node022, 4);
end

procedure Node024 begin
   Reply(208);
   NOption(209, Node022, 4);
end

procedure Node025 begin
   game_time_advance(ONE_GAME_MINUTE * 20); //added by killap
   Reply(210);
   NOption(211, Node022, 4);
end

procedure Node026 begin
   Reply(212);
   NOption(213, Node008, 4);
end

procedure Node027 begin
   Reply(221);
   //if (Fallout2_tribe_kidnapped) then
   if ((f2_flag_any >= f2_state_tribe_kidnapped) and (f2_flag_any < f2_state_enclave_destroyed)) then //edit by killap
      NOption(222, Node028, 4);
   NOption(213, Node002, 4);
end

procedure Node028 begin
   Reply(223);
   NOption(213, Node002, 4);
end

//added by killap - RP

procedure Node029a begin
   if (local_var(LVAR_029_First_Use) == 0) then begin
      set_local_var(LVAR_029_First_Use,1);
      Reply(230);
      NOption((g_mstr(353)), Node029, 4);
   end else begin
      call Node029;
   end
end

procedure Node029 begin
   Reply(231);
   NOption(232, Node030, 4);
   NOption(233, Node040a, 4);
   NOption(234, Node050, 4);
   NOption(235, Node051, 4);
   NOption(236, Node006, 4);
end

procedure Node030 begin
   Reply(240);
   NOption(241, Node031, 4);
end

procedure Node031 begin
   Reply(250);
   NOption(251, Node032, 4);
end

procedure Node032 begin
   Reply(260);
   NOption(261, Node033, 4);
   NOption(262, Node068, 4);
   NOption(263, Node035, 4);
   NOption(264, Node029, 4);
end

//combat patrols
procedure Node033 begin
   Reply(270);
   NOption(271, Node034, 4);
end

procedure Node034 begin
   Reply(275);
   NOption(276, Node032, 4);
end

//defense sruct
procedure Node035 begin
   Reply(280);
   if (global_var(GVAR_SAN_FRAN_SUB) < SHI_SUB_WITH_CREW) then
      NOption(281, Node036, 4);
   NOption(282, Node032, 4);
end

//maintenance crew info...
procedure Node036 begin
   Reply(290);
   NOption((g_mstr(353)), Node037, 4);
end

procedure Node037 begin
   Reply(291);
   NOption(292, Node038, 4);
   NOption(293, Node032, 4);
end

//add self to crew
procedure Node038 begin
   Reply(300);
   NOption(301, Node039, 4);
   //NOption(302, Node032, 4);
end

//download password
procedure Node039 begin
   Reply(310);
   NOption(311, Node032, 4);
   display_msg(mstr(320));
   give_xp(1000);

   if (global_var(GVAR_SAN_FRAN_SUB) < SHI_SUB_WITH_CREW) then
      set_sub_flag(SHI_SUB_WITH_CREW);
end

//intel network
procedure Node040a begin
   if (dude_item_count(PID_SHI_SUB_CODE_CHART)) then begin
      call Node040b;
   end else begin
      call Node040c;
   end

end

procedure Node040c begin
   Reply(325);
   NOption(236, Node029, 4);
end

procedure Node040b begin
   if (local_var(LVAR_040_First_Use) == 0) then begin
      set_local_var(LVAR_040_First_Use,1);
      Reply(330);
      NOption((g_mstr(353)), Node040, 4);
   end else begin
      call Node040;
   end
end

procedure Node040 begin
   Reply(331);
   NOption(332, Node042, 4);
   NOption(333, Node043, 4);
   NOption(334, Node044, 4);
   NOption(335, Node045, 4);
   NOption(336, Node046, 4);
   NOption(337, Node047, 4);
   NOption(341, Node041, 4);
   NOption(342, Node029, 4);

end

procedure Node041 begin
   Reply(340);
   NOption(338, Node048, 4);
   NOption(339, Node049, 4);
   NOption(342, Node040, 4);
end

procedure Node042 begin
   Reply(345);
   NOption(346, Node040, 4);
end

procedure Node043 begin
   Reply(350);
   NOption(351, Node040, 4);
end

procedure Node044 begin
   Reply(360);
   NOption(361, Node040, 4);
end

procedure Node045 begin
   Reply(370);
   NOption(371, Node040, 4);
end

procedure Node046 begin
   Reply(380);
   NOption(381, Node040, 4);
end

procedure Node047 begin
   Reply(390);
   NOption(391, Node040, 4);
end

procedure Node048 begin
   Reply(400);
   NOption(401, Node041, 4);
end

procedure Node049 begin
   Reply(410);
   NOption(411, Node041, 4);
end

//comm links
procedure Node050 begin
   Reply(420);
   NOption(421, Node029, 4);
end

//personnel logs
procedure Node051 begin
   Reply(430);
   NOption(431, Node052, 4);
end

procedure Node052 begin
   Reply(440);
   NOption(441, Node054, 4);
end

procedure Node053 begin
   //unused
end

procedure Node054 begin
   Reply(450);
   NOption(451, Node055, 4);
   NOption(452, Node029, 4);
end

procedure Node055 begin
   Reply(460);
   NOption(461, Node056, 4);
   NOption(462, Node029, 4);
end

procedure Node056 begin
   Reply(470);
   NOption(471, Node057, 4);
   NOption(472, Node029, 4);
end

procedure Node057 begin
   Reply(480);
   NOption(481, Node058, 4);
   NOption(482, Node029, 4);
end

procedure Node058 begin
   Reply(490);
   NOption(491, Node059, 4);
   NOption(492, Node029, 4);
end

procedure Node059 begin
   Reply(500);
   NOption(501, Node060, 4);
   NOption(502, Node029, 4);
end

procedure Node060 begin
   Reply(510);
   NOption(511, Node061, 4);
   NOption(512, Node029, 4);
end

procedure Node061 begin
   Reply(520);
   NOption(521, Node062, 4);
   NOption(522, Node029, 4);
end

procedure Node062 begin
   Reply(530);
   NOption(531, Node063, 4);
   NOption(532, Node029, 4);
end

procedure Node063 begin
   Reply(540);
   NOption(541, Node064, 4);
   NOption(542, Node029, 4);
end

procedure Node064 begin
   Reply(550);
   NOption(551, Node065, 4);
   NOption(552, Node029, 4);
end

procedure Node065 begin
   Reply(560);
   NOption(561, Node066, 4);
   NOption(562, Node029, 4);
end

procedure Node066 begin
   Reply(570);
   NOption(571, Node067, 4);
   NOption(572, Node029, 4);
end

procedure Node067 begin
   Reply(580);
   NOption(581, Node029, 4);
end

//mission R
procedure Node068 begin
   Reply(590);
   NOption(591, Node069, 4);
end

procedure Node069 begin
   Reply(600);
   NOption(601, Node070, 4);
end

procedure Node070 begin
   Reply(610);
   NOption(611, Node071, 4);
end

procedure Node071 begin
   Reply(620);
   NOption(621, Node032, 4);
   NOption(622, Node999, 4);
end
//end added

procedure DoCallGuards begin
   variable obj;

   obj := tile_contains_pid_obj(GUARD_TILE_1, self_elevation, GUARD_PID);
   ndebug("fsempter: should be attacking: " + obj);
   if (obj) then begin
      float_msg(obj, mstr(Random(216, 219)), FLOAT_MSG_RED);
      attack_setup(obj, dude_obj);
   end
   obj := tile_contains_pid_obj(GUARD_TILE_2, self_elevation, GUARD_PID);
   ndebug("fsempter: should be attacking: " + obj);
   if (obj) then begin
      float_msg(obj, mstr(Random(216, 219)), FLOAT_MSG_RED);
      attack_setup(obj, dude_obj);
   end
end

//xxxxxxxxxxxxxxxxxxxx
