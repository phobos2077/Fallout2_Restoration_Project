/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "fcdokgrd"
#include "../headers/define.h"

#define NAME                    SCRIPT_FCDOKGRD

#include "../headers/command.h"
#include "../headers/sfdock.h"
#include "../headers/sanfran.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Wait_Convince              (7)
#define LVAR_Wait_Tech                  (8)
#define LVAR_Times_Warned               (9)
#define LVAR_Home_Tile                  (10)

#define RIGHT_END_TILE  (15519)
#define LEFT_END_TILE   (15532)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

import variable boatGrd_ptr;

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;

procedure Node999;
procedure Node998;

procedure Node900;

procedure Node990;
procedure Node991;
procedure Node992;
procedure Node993;

/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
   boatGrd_ptr := self_obj;
end

procedure timed_event_p_proc begin
   variable tmp;
   if (fixed_param == 2) then begin
      tmp := random(1,3);
      if (self_tile == RIGHT_END_TILE) then begin
         ndebug("right");
         if (tmp == 1) then begin
            self_walk_to_tile(local_var(LVAR_Home_Tile));
         end else if (tmp == 3) then begin
            self_walk_to_tile(LEFT_END_TILE);
         end
            //else stay
      end else if (self_tile == LEFT_END_TILE) then begin
         ndebug("left");
         if (tmp == 1) then begin
            self_walk_to_tile(local_var(LVAR_Home_Tile));
         end else if (tmp == 3) then begin
            self_walk_to_tile(RIGHT_END_TILE);
         end
            //else stay
      end else if (self_tile == local_var(LVAR_Home_Tile)) then begin
         ndebug("home");
         if (tmp == 1) then begin
            self_walk_to_tile(LEFT_END_TILE);
         end else if (tmp == 3) then begin
            self_walk_to_tile(RIGHT_END_TILE);
         end
            //else stay
      end else begin
         if (tmp == 1) then begin
            self_walk_to_tile(LEFT_END_TILE);
         end else if (tmp == 3) then begin
            self_walk_to_tile(RIGHT_END_TILE);
         end
      end
      flush_add_timer_event(self_obj,game_ticks(random(15,20)),2);
   end else if (fixed_param == 1) then begin
      set_local_var(LVAR_Times_Warned,local_var(LVAR_Times_Warned)+1);
      float_msg(self_obj, mstr(149+local_var(LVAR_Times_Warned)), FLOAT_MSG_RED);
      if (local_var(LVAR_Times_Warned) > 3) then begin
         set_local_var(LVAR_Times_Warned,3);
      end
      if (local_var(LVAR_Times_Warned) == 3) then begin
         call Node998;
      end
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end


procedure description_p_proc begin
   script_overrides;
   if (sub_flag(0)) then begin
      display_msg(mstr(101));
   end else begin
      display_msg(mstr(102));
   end
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin

   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Hostile,2);
      set_map_var(MVAR_Use_Motor_Boat,0);
      set_san_fran_flag(SF_SHI_ENEMY);
   end

end

procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter
   boatGrd_ptr := 0;
   set_map_var(MVAR_Use_Motor_Boat,0);
   if (global_var(GVAR_SAN_FRAN_SUB) < SHI_SUB_DISABLED) then begin
      set_sub_flag(SHI_SUB_ALONE);
   end
/* Set global_variable for Enemy status*/
end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   boatGrd_ptr := self_obj;

   if (map_first_run) then
      set_local_var(LVAR_Home_Tile,self_tile);

   flush_add_timer_event(self_obj,game_ticks(random(10,15)),2);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
   boatGrd_ptr := self_obj;
end

procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if (anim_busy(self_obj) == false) then begin
      if (self_tile == RIGHT_END_TILE and self_cur_rot != 4) then begin
         reg_anim_clear(self_obj);
         self_rotate(4);
      end

      if (self_tile == LEFT_END_TILE and self_cur_rot != 0) then begin
         reg_anim_clear(self_obj);
         self_rotate(0);
      end
   end

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

end


/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin

   if (global_var(GVAR_SAN_FRAN_SUB) >= SHI_SUB_DISABLED) then begin
      call Node010;
   end else if (local_var(LVAR_Wait_Tech) == 1) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node009;
      gSay_End;
      end_dialogue;
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end

end

procedure Node001 begin
   if (local_var(LVAR_Herebefore) == 0) then begin
      set_local_var(LVAR_Herebefore,1);
      Reply(200);
   end else begin
      Reply(201);
   end

   NOption(202, Node002, 4);
   NOption(203, Node900, 4);
   NOption(204, Node999, 4);

end

procedure Node900 begin
   if (local_var(LVAR_Wait_Convince) == 1) then begin
      call Node008;
   end else begin
      call Node004;
   end
end

procedure Node002 begin
   Reply(210);
   NOption(211, Node003, 4);
end

procedure Node003 begin
   Reply(220);
   NOption(221, Node999, 4);
   BOption(222, Node998, 4);
end

procedure Node004 begin
   Reply(230);

   if ( (global_var(GVAR_SAN_FRAN_SUB) < SHI_SUB_HAS_PASSWORD) and (has_skill(dude_obj,SKILL_SPEECH) > 95) and ((f2_flag_any >= f2_state_tribe_kidnapped) and (f2_flag_any < f2_state_enclave_destroyed))) then
      NOption(231, Node005, 4);
   if ( (sub_flag(SHI_SUB_HAS_PASSWORD)) or (sub_flag(SHI_SUB_WITH_CREW) ) ) then
      NOption(232, Node007, 4);
   BOption(233, Node998, 4);
   NOption(234, Node999, 4);
end

procedure Node005 begin
   Reply(240);
   NOption(241, Node006, 4);
   display_msg(mstr(500));
   give_xp(1000);
end

procedure Node006 begin
   Reply(250);
   NOption(251, Node008, 4);
   NOption(252, Node990, 4);
end

procedure Node007 begin
   Reply(260);
   NOption(261, Node993, 4);
   NOption(262, Node991, 4);
end

procedure Node008 begin
   Reply(270);
   NOption(271, Node992, 4);
   NOption(272, Node992, 4);
end

procedure Node009 begin
   Reply(280);
   NOption(281, Node993, 4);
   NOption(282, Node991, 4);
end

procedure Node010 begin
   floater(290);
end

procedure Node990 begin
   set_local_var(LVAR_Wait_Convince,1);
end

procedure Node991 begin
   set_local_var(LVAR_Wait_Tech,1);
end

procedure Node992 begin
   set_local_var(LVAR_Wait_Convince,1);
   set_map_var(MVAR_Use_Motor_Boat,1);
end

procedure Node993 begin
   set_local_var(LVAR_Wait_Convince,1);
   set_local_var(LVAR_Wait_Tech,0);
   party_member_hide_all
   game_time_advance_hour(0);
   game_time_advance(15*ONE_GAME_MINUTE);
   load_map(MAP_SAN_FRAN_SUB,900);
end

procedure Node999 begin

end

procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
   set_san_fran_flag(SF_SHI_ENEMY);
end
