/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Chip
        Location: San Fran
        Description: He lost his spleen

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define NPC_REACTION_TYPE       REACTION_TC
#define NPC_REACTION_VAR        8 /* same as thief variable */
#define SCRIPT_REALNAME "fcchip"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"

#define NAME                    SCRIPT_FCCHIP
#define TOWN_REP_VAR            (GVAR_TOWN_REP_SAN_FRANCISCO)

#include "../headers/command.h"
#include "../headers/modreact.h"

#include "../headers/sanfran.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;

procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;

procedure CheckLoad;

procedure GoGetSpleen;

#define TIMER_WALK_OFF 1
#define TIMER_CHECK_LOAD 2
#define TIMER_WALK_ON 3

#define CHIP_LEAVE_TILE 28502
#define CHIP_LOAD_TILE  23085
#define CHIP_ELEVATION  1

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Return_Time                (7)
#define LVAR_Caught_Thief               (8)
#define LVAR_Node10_Count               (9)
#define LVAR_Xp_Status                  (10)
#define LVAR_Wong_Info                  (11)

#define DID_DEAD_WONG       bit_1

#define xp_status(x)     (lvar_bit(LVAR_Xp_Status, x))
#define set_xp_status(x) set_lvar_bit_on(LVAR_Xp_Status, x)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable callGoGetSpleen := 0;
variable lastWalkTile := 0;

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == TIMER_WALK_OFF) then begin
      ndebug("calling timer_walk_off");
      if (self_tile != CHIP_LEAVE_TILE and not anim_busy(self_obj)) then begin
         if (self_tile != lastWalkTile) then begin
            reg_anim_clear(self_obj);
            reg_anim_begin();
            self_walk_to_tile(CHIP_LEAVE_TILE);
            reg_anim_end();
            lastWalkTile := self_tile;
            add_timer_event(self_obj, game_ticks(1), TIMER_WALK_OFF);
         end else begin
            move_to(self_obj, CHIP_LEAVE_TILE, 0);
            add_timer_event(self_obj, 0, TIMER_WALK_OFF);
         end
      end else if (self_tile == CHIP_LEAVE_TILE and self_visible) then begin
         set_obj_visibility(self_obj, OBJ_INVIS);
         ndebug("invis 1");

         add_timer_event(self_obj, 0, TIMER_CHECK_LOAD);
         ndebug("adding check load in 0");
      end else begin
         add_timer_event(self_obj, game_ticks(1), TIMER_WALK_OFF);
      end
   end else if (fixed_param == TIMER_CHECK_LOAD) then begin
      call CheckLoad;
   end else if (fixed_param == TIMER_WALK_ON) then begin
      if (self_tile != CHIP_LOAD_TILE and not anim_busy(self_obj)) then begin
         ndebug("should be walking to load tile");
         if (not self_visible) then begin
            set_obj_visibility(self_obj, OBJ_VIS);
         end
         reg_anim_clear(self_obj);
         reg_anim_begin();
         self_walk_to_tile(CHIP_LOAD_TILE);
         reg_anim_end();
         add_timer_event(self_obj, game_ticks(1), TIMER_WALK_ON);
      end else if (self_tile != CHIP_LOAD_TILE and anim_busy(self_obj)) then begin
         add_timer_event(self_obj, game_ticks(1), TIMER_WALK_ON);
      //added by killap
      end else if (self_tile == CHIP_LOAD_TILE) then begin
         self_rotate(3);
      end
      //end added
   end

end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_SAN_FRAN_PUNKS);
   set_self_ai(AI_SF_CHIP);
   if (not is_loading_game) then begin
      call CheckLoad;
   end
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       self_attack_dude;
   end

   if (global_var(GVAR_SAN_FRAN_SPLEEN_TIME)) then begin
      if (spleen_elapse >= ONE_GAME_DAY * 5) then begin
         destroy_object(self_obj);
      end
   end

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (obj_in_party(source_obj)) then begin
       set_local_var(LVAR_Personal_Enemy,1);
      set_san_fran_flag(SF_PUNKS_ENEMY);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=0;
   Slavery_Tolerant:=SLAVE_TOLERANT;
   Karma_Perception:=KARMA_PERCEPTION1;

   CheckKarma;

   GetReaction;

   ReactToLevel; //added by killap

   if (san_fran_flag(SF_PUNKS_ENEMY)) then begin
      call Node026;
   end else if (spleen_flag(SP_CHIPTOLD)) then begin
      call Node027;
   end else if (spleen_flag(SP_REINSERTED)) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node021;
      gSay_End;
      end_dialogue;
   end else if (spleen_flag(SP_REJECTED) or spleen_flag(SP_NOFUNG)) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node004;
      gSay_End;
      end_dialogue;
   end else if (spleen_flag(SP_FUNGFREE) or spleen_flag(SP_FUNGCHARGE) or spleen_flag(SP_UNPAID)) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node016;
      gSay_End;
      end_dialogue;
   end else if (spleen_flag_any >= SP_ACCEPTED/* or spleen_flag(SP_FOUND)*/) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node010;
      gSay_End;
      end_dialogue;
   end else if (local_var(LVAR_Herebefore) and dude_iq < 4) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node002;
      gSay_End;
      end_dialogue;
   end else if (local_var(LVAR_Herebefore) and bad_critter_reaction) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node004;
      gSay_End;
      end_dialogue;
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end

   if (callGoGetSpleen == 1) then begin
      callGoGetSpleen := 0;
      call GoGetSpleen;
   end

   set_local_var(LVAR_Herebefore, 1);
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (not spleen_flag(SP_REINSERTED)) then begin
      if (local_var(LVAR_Herebefore) == 0) then
         display_msg(mstr(193));
      else
         display_msg(mstr(194));
   end else begin
      if (local_var(LVAR_Herebefore) == 0) then
         display_msg(mstr(100));
      else
         display_msg(mstr(101));
   end
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   if (not spleen_flag(SP_REINSERTED)) then begin
      display_mstr(195);
   end else begin
      display_msg(mstr(102));
   end
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node004a begin
   DownReactModerate;
   call Node004;
end

procedure NodeWalk begin
   set_spleen_flag(SP_CHIPTOLD); //added by killap
   set_local_var(LVAR_Return_Time, game_time + ONE_GAME_DAY);
   add_timer_event(self_obj, 0, TIMER_WALK_OFF);
   UpReactMinor;
   call Node999; // Seraph's Fix: changed 'Node009' to 'Node999'
end

procedure Node001 begin
   Reply(103);
   NLowOption(104, Node002);
   NLowOption(105, Node002);
   NOption(106, Node003, 4);
   NOption(108, Node008, 4);
   //if (Fallout2_tribe_kidnapped) then //added by killap
   if ((f2_flag_any >= f2_state_tribe_kidnapped) and (f2_flag_any < f2_state_enclave_destroyed)) then //edit by killap
      NOption(109, Node009, 4);
end

procedure Node002 begin
   Reply(110);
   NLowOption(111, Node999);
end

procedure Node004b begin

   DownReactMinor;
   call Node004;
end

procedure Node003 begin
   Reply(112);
   NOption(113, Node005, 4);
   NOption(114, Node006, 4);
   BOption(115, Node004b, 4);
   BOption(116, Node004a, 4);
end

procedure Node007a begin
   UpReactMinor;
   set_spleen_flag(SP_ACCEPTED);
   start_spleen_time;
   call Node007;
end

procedure Node004 begin
   if (not language_filter_is_on) then
      Reply(117);
   else
      Reply(118);
   NOption(119, Node999, 4);
   if (spleen_flag(SP_REJECTED) or spleen_flag(0)) then
      NOption(120, Node007a, 4);
   if (spleen_flag(SP_NOFUNG)) then
      NOption(196, Node012, 4);
end

procedure Node004c begin
   set_spleen_flag(SP_REJECTED);
   DownReactModerate;
   call Node004;
end

procedure Node005 begin
   Reply(121);
   NOption(122, Node004c, 4);
   NOption(123, Node007a, 4);
end

procedure Node006 begin
   Reply(124);
   NOption(125, Node004c, 4);
   NOption(126, Node007a, 4);
end

procedure Node007 begin
   Reply(127);
   NOption(128, Node999, 4);
end

procedure Node999a begin
   DownReactMinor;
   call Node999;
end

procedure Node008 begin
   Reply(129);
   NOption(130, Node003, 4);
   BOption(132, Node999a, 4);
end

procedure Node009 begin
   Reply(133);
   NOption(134, Node003, 4);
//   BOption(135, Node004a, 4);
   BOption(136, Node999a, 4);
end

procedure Node011a begin
   if (not xp_status(DID_DEAD_WONG)) then begin
      set_xp_status(DID_DEAD_WONG);
      COMP_QUEST(REP_BONUS_SAN_FRAN_SPLEEN_DEADWONG, REP_HERO_SAN_FRAN_SPLEEN_DEADWONG, EXP_SPLEEN_DEADWONG)
   end
   call Node011;
end

procedure Node010 begin
   if (local_var(LVAR_Node10_Count) == 0) then begin
      set_local_var(LVAR_Node10_Count, 1);
      Reply(137);
   end else begin
      Reply(197);
   end
   if (spleen_flag(SP_FOUND) and not san_fran_flag(SF_WONG_YI_TZE_DEAD)) then
      NOption(138, Node011, 4);
   if (spleen_flag(SP_FOUND) and san_fran_flag(SF_WONG_YI_TZE_DEAD)) then
      NOption(139, Node011a, 4);
   if (spleen_flag(SP_LOST) and game_time < GET_WONG_EAT_TIME) then
      NOption(140, Node014, 4);
   else if (spleen_flag(SP_LOST)) then
      NOption(141, Node015, 4);
   NOption(142, Node012, 4);
   NOption(143, Node004a, 4);
end

procedure Node011 begin
   set_local_var(LVAR_Wong_Info, 1);
   Reply(144);
   NOption(145, Node012, 4);
   NOption(146, Node013, 4);
end

procedure Node012 begin
   //added by killap
   if (spleen_flag(SP_NOFUNG)) then
      set_spleen_flag(SP_FOUND);
   //end added
   Reply(147);
   NOption(148, Node999, 4);
end

procedure Node004z begin
   set_spleen_flag(SP_NOFUNG);
   call Node004;
end

procedure Node013 begin
   Reply(149);
   NOption(150, Node012, 4);
   NOption(151, Node004z, 4);
end

procedure Node014 begin
   Reply(152);
   NOption(153, Node012, 4);
   NOption(154, Node015, 4);
end

procedure Node015 begin
   Reply(155);
   if (spleen_flag(SP_FOUND)) then
      NOption(156, Node011, 4);
   if (spleen_flag(SP_FUNGCHARGE)) then
      NOption(157, Node019, 4);
   NOption(158, Node999, 4);
end

procedure Node016 begin
   if (local_var(LVAR_Wong_Info)) then begin
      Reply(159);
   end else begin
      set_local_var(LVAR_Wong_Info, 1);
      Reply(200);
   end

   if (spleen_flag(SP_FUNGFREE)) then
      NOption(160, Node017, 4);
   if (spleen_flag(SP_UNPAID)) then
      NOption(161, Node018, 4);
   if (spleen_flag(SP_FUNGCHARGE)) then
      NOption(198, Node019, 4);
end
//162 blank
procedure Node017 begin
   Reply(163);
   NOption(164, NodeWalk, 4);
end

procedure Node019a begin
   UpReactMinor;
   call Node019;
end

procedure Node018 begin
   Reply(165);
   NOption(166, Node012, 4);
//   NOption(166, Node019a, 4);
//   NOption(167, Node020, 4);
end

procedure Node019 begin
   callGoGetSpleen := 1;
   UpReactMinor;
   Reply(168);
   NOption(169, Node999, 4);
end

procedure Node015a begin
   DownReactMinor;
   call Node015;
end

procedure Node020 begin
   Reply(170);
   NOption(171, Node019, 4);
   NOption(172, Node015a, 4);
end

procedure Node2524 begin
   if (badger_dead) then
      call Node025;
   else
      call Node024;
end

procedure Node021 begin
   Reply(173);
   NOption(174, Node022, 4);
   //if (Fallout2_tribe_kidnapped) then //added by killap
   if ((f2_flag_any >= f2_state_tribe_kidnapped) and (f2_flag_any < f2_state_enclave_destroyed)) then //edit by killap
      NOption(175, Node023, 4);
   if (tanker_flag(TANK_KNOWN) or shi_whirly(SH_WH_STEALELE) or elron_whirly(SH_WH_STEALELE)) then
      NOption(176, Node2524, 4);
   NOption(177, Node999, 4);
end

procedure Node022 begin
   Reply(178);
   NOption(179, Node021, 4);
   NOption(180, Node999, 4);
end

procedure Node023 begin
   Reply(181);
   NOption(182, Node021, 4);
   NOption(183, Node999, 4);
end

procedure Node024 begin
   Reply(184);
   NOption(185, Node021, 4);
   NOption(186, Node999, 4);
end

procedure Node025 begin
   Reply(187);
   NOption(188, Node021, 4);
   NOption(189, Node999, 4);
end

procedure Node026 begin
   float_msg(self_obj, mstr(Random(190, 192)), FLOAT_MSG_RED);
   call Node998;
end

procedure Node027 begin
   float_msg(self_obj, mstr(199), FLOAT_MSG_GREEN);
   call Node999;
end


/*procedure CheckLoad begin
   ndebug("CHECKLOAD lvar_return_time: " + local_var(LVAR_Return_Time));
   if (local_var(LVAR_Return_Time)) then begin
      if (game_time >= local_var(LVAR_Return_Time) and not spleen_flag(SP_REINSERTED)) then begin
         set_obj_visibility(self_obj, OBJ_VIS);
         set_spleen_flag(SP_REINSERTED);
         COMP_QUEST(REP_BONUS_SAN_FRAN_SPLEEN_REINSERTED, REP_HERO_SAN_FRAN_SPLEEN_REINSTERTED, EXP_SPLEEN_REINSTERTED);
         add_timer_event(self_obj, 0, TIMER_WALK_ON);
      end else begin
         set_obj_visibility(self_obj, OBJ_INVIS);
         ndebug("invis 2");
         add_timer_event(self_obj, game_ticks(60), TIMER_CHECK_LOAD);
      end
   end
end*/

//new code by killap
procedure CheckLoad begin
   ndebug("CHECKLOAD lvar_return_time: " + local_var(LVAR_Return_Time));
   if (local_var(LVAR_Return_Time)) then begin
      if (game_time >= local_var(LVAR_Return_Time) and not spleen_flag(SP_REINSERTED)) then begin
         set_global_var(GVAR_SAN_FRAN_SPLEEN_TIME, 0);
         set_obj_visibility(self_obj, OBJ_VIS);
         set_spleen_flag(SP_REINSERTED);
         COMP_QUEST(REP_BONUS_SAN_FRAN_SPLEEN_REINSERTED, REP_HERO_SAN_FRAN_SPLEEN_REINSTERTED, EXP_SPLEEN_REINSTERTED)
         add_timer_event(self_obj, 0, TIMER_WALK_ON);
      end else if (not spleen_flag(SP_REINSERTED)) then begin
         set_obj_visibility(self_obj, OBJ_INVIS);
         ndebug("invis 2");
         add_timer_event(self_obj, game_ticks(60), TIMER_CHECK_LOAD);
      end
   end
end
//end

procedure GoGetSpleen begin
   set_spleen_flag(SP_CHIPTOLD);
   set_local_var(LVAR_Return_Time, game_time + ONE_GAME_DAY);
   add_timer_event(self_obj, 0, TIMER_WALK_OFF);
end
//xxxxxxxxxxxxxxxxxxxx
