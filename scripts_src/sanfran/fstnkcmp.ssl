/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Physics Computer station.
        Location: San Fran China map
        Description: Uhh you can do stuff with it.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "fstnkcmp"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"

#define NAME                    SCRIPT_FSTNKCMP
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_SAN_FR)

#include "../headers/command.h"
#include "../headers/sanfran.h"


/* Standard Script Procedures */
procedure start;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure use_p_proc;
procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;

procedure LoadEnclave;

#define NAV_COMP_PID PID_NAV_COMPUTER_PARTS
//#define FORCE_ENCLAVE 1

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Fixed                      (7)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once   := 0;
variable callGuards  := 0;
variable doLoadEnclave := 0;

procedure start begin
end

procedure timed_event_p_proc begin
end

#define NAV_COMPUTER_TILE 13916

procedure use_p_proc begin
   if (self_tile != NAV_COMPUTER_TILE) then begin
      script_overrides;
      dialogue_system_enter;
   end else begin
      script_overrides;
      dialogue_system_enter;
   end
end


/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
end

procedure use_obj_on_p_proc begin
   variable Tool;
   variable obj;
   if (self_tile == NAV_COMPUTER_TILE) then begin
      if (not tanker_flag(TANK_NAVCOMP)) then begin //added check by killap (if you get someone to do this for you (playing a dumb character) you can still put in the nav parts and get xp
         Tool:=obj_pid(obj_being_used_with);

         if (Tool == NAV_COMP_PID) then begin
            obj := dude_item(Tool);
            if (obj) then begin
               rm_obj_from_inven(dude_obj, obj);
               destroy_object(obj);
            end
            COMPLETE_TANKER_NAVCOMP;
         end
         call use_p_proc;
      end
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   if (self_tile == NAV_COMPUTER_TILE) then begin
      if (not tanker_flag(TANK_NAVCOMP)) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
         gSay_End;
         end_dialogue;
      end else begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node004;
         gSay_End;
         end_dialogue;
      end
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node002;
      gSay_End;
      end_dialogue;

      if (doLoadEnclave == 1) then begin
         doLoadEnclave := 0;
         call LoadEnclave;
      end
   end
   set_local_var(LVAR_Herebefore, 1);
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (self_tile == NAV_COMPUTER_TILE) then begin
      display_mstr(119);
   end else begin
      if (local_var(LVAR_Herebefore) == 0) then
         display_msg(mstr(100));
      else
         display_msg(mstr(101));
   end
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
   call use_p_proc;
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   Reply(103);
   NOption(104, Node999, 1);
end

procedure Node002 begin
   Reply(105);
   //added by killap - prevents you from going back to the Encalve after it was destroyed
   if (Fallout2_enclave_destroyed) then begin
      NOption(104, Node999, 1);
   end
   //end code by killap
   else begin
      NOption(106, Node005, 1);
      NOption(107, Node003, 1);
      NOption(108, Node999, 1);
   end
end

procedure Node003 begin
   set_tanker_flag(TANK_KNOWN);
   set_f2(f2_state_tanker_fix_known);

   SHOW_ALL_TANKER_QST;

   if (not tanker_flag(TANK_FUEL) and not tanker_flag(TANK_NAVCOMP)) then
      Reply(109);
   else if (tanker_flag(TANK_FUEL) and not tanker_flag(TANK_NAVCOMP)) then
      Reply(112);
   else if (not tanker_flag(TANK_FUEL) and tanker_flag(TANK_NAVCOMP)) then
      Reply(117);
   else if (tanker_flag(TANK_FUEL) and tanker_flag(TANK_NAVCOMP)) then
      Reply(118);

   NOption(110, Node002, 1);
   NOption(111, Node999, 1);
end

procedure Node004 begin
   Reply(131);
   NOption(114, Node999, 1);
end

procedure NodeMovie begin
   doLoadEnclave := 1;
   call Node999;
end

procedure Node005 begin
#ifdef FORCE_ENCLAVE
      call NodeMovie;
#endif
#ifndef FORCE_ENCLAVE
   if (not tanker_flag(TANK_FUEL)) then begin
      Reply(115);
      NOption(113, Node002, 1);
   end else if (not tanker_flag(TANK_NAVCOMP)) then begin
      Reply(116);
      NOption(113, Node002, 1);
   //added by killap - RP
   end else if (not sub_flag(SHI_SUB_DISABLED)) then begin
      if (sub_flag(0)) then
         set_sub_flag(SHI_SUB_KNOWN);
      Reply(200);
      NOption(113, Node002, 1);
   //end added
   end else begin
      call NodeMovie;
   end
#endif
end

procedure LoadEnclave begin
//HACK HACK HACK HACK yeah.
   fadeout(500);
   move_to(dude_obj, 17134, dude_elevation);
   set_obj_visibility(dude_obj, OBJ_INVIS);
   play_gmovie(TANKER_MOVIE);
   COMP_QUEST(0, 0, EXP_TANKER_GO)
   game_time_advance(ONE_GAME_DAY); //added by killap
   load_map(MAP_ENCLAVE_DOCK, 10);
end
