/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Wood Door
        Locked: NO
        Trapped: NO
        Closing: YES
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "fcshngdr"
#include "../headers/define.h"

#define NAME                    SCRIPT_DOOR

#include "../headers/command.h"

#include "../headers/sfsheng.h"

import variable door_guard;

/* Defines and Macros */

/* Sets whether the door is locked or trapped or closing */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_WOOD
#define LOCK_STATUS                     STATE_STANDARD_LOCK
#define CLOSE_STATUS                    STATE_DOOR_NOCLOSE

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-20)

#define custom_start
#define custom_use_p_proc
#define custom_map_update_p_proc
#define custom_damage_p_proc
#include "../headers/doors.h"


#ifndef WATCHER_OBJ
   #define WATCHER_OBJ                       (door_guard)               // object of script watching locker
#endif
#ifndef DO_CHECK_TAMPER_CONDITION
   #define DO_CHECK_TAMPER_CONDITION         (true)            // setting this to true will always check no matter what
#endif
// general a generic way to deal with each response as one
#ifndef genereral_caught_action
    #define genereral_caught_action \
        if (caught_tamper) then begin \
            if (global_var(GVAR_CLEAR_OUT_DR_SHENG_LAB) == 0) then \
                script_overrides; \
            if (map_var(MVAR_Open_Lab_Door) == 0) then begin \
                add_timer_event(door_guard,1,2); \
            end \
        end
#endif

#ifndef watch_box_conditions
   #define watch_box_conditions              (obj_can_see_obj(WATCHER_OBJ, user_obj))
#endif
// what to do when source is caught using locker
#define caught_use_action                    genereral_caught_action
// what to do when source is caught using an object on the locker
#define caught_use_obj_action                genereral_caught_action
// what to do when source is caught using a skill on the locker
#define caught_use_skill_action              genereral_caught_action
// what to do when locker is damaged
#define damage_action                        genereral_caught_action
#define check_tamper \
    if (caught_tamper == false) then begin \
        if (DO_CHECK_TAMPER_CONDITION) then begin \
            if (WATCHER_OBJ != 0) then begin \
                if ((is_visible(WATCHER_OBJ)) and (is_critter_dead(WATCHER_OBJ) == false)) then begin \
                    if (watch_box_conditions) then begin \
                    caught_tamper := true; \
                    end \
                end \
            end \
        end \
    end

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/
import variable lab_door;

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/

variable caught_tamper;
variable user_obj;

procedure start begin
   lab_door := self_obj;
end


/********************************************************************
   Any time that a critter tries to use this door will call this
   procedure. it will check to see if the door is trapped and locked.
********************************************************************/

procedure use_p_proc begin
   caught_tamper := false;
   user_obj := source_obj;
   check_tamper
   if (caught_tamper) then begin
      caught_use_action
   end else begin
   /* Trap_Roll is a global variable to this script, defined at the beginning
      of the script. */
      Traps_Roll:=roll_vs_skill(source_obj,SKILL_TRAPS,Trap_Bonus);

      if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
          if (is_success(Traps_Roll)) then begin
              script_overrides;
              set_local_var(LVAR_Found_Trap,1);
              reg_anim_clear(source_obj);

              if (source_obj == dude_obj) then begin
                  display_msg(mstr(204));
              end
              else begin
                  display_msg(mstr(205));
              end
          end

          else begin
              if (obj_is_locked(self_obj)) then begin
                  script_overrides;
                  display_msg(mstr(203));
                  call Damage_Critter;
              end
              else begin
                  call Damage_Critter;
              end
          end
      end

      else if (obj_is_locked(self_obj)) then begin
          script_overrides;
          display_msg(mstr(203));
      end

      if (CLOSE_STATUS == STATE_DOOR_CLOSE) then begin
         last_source_obj := source_obj;
         add_timer_event(self_obj, 10, TIMER_CLOSE);
      end
   end
end


/******************************************************************************************
   Should the door sustain damage from anything (ie, dynamite, plastic explosives, rockets,
   or any other forms of damage), this procedure will be called to destroy the door and
   free up the space.
******************************************************************************************/

procedure damage_p_proc begin
   variable Trap_Damage;

  /************ Wood Door ****************/

 if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
   if (DOOR_STATUS == STATE_WOOD) then begin
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           Trap_Damage:=random(MIN_DAMAGE,MAX_DAMAGE);
           explosion(self_tile, self_elevation, Trap_Damage);
           lab_door := -1;
           destroy_object(self_obj);
       end

       else begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           lab_door := -1;
           destroy_object(self_obj);
       end
   end

  /************ Metal Door ****************/

   else if (DOOR_STATUS == STATE_METAL) then begin
       set_local_var(LVAR_Explosion_Attempts,local_var(LVAR_Explosion_Attempts)+1);
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           Trap_Damage:=random(MIN_DAMAGE,MAX_DAMAGE);
           explosion(self_tile, self_elevation, Trap_Damage);
       end

       else if (local_var(LVAR_Explosion_Attempts) > DOOR_STRENGTH) then begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked,STATE_INACTIVE);
           lab_door := -1;
           destroy_object(self_obj);
       end
   end

end

   else begin
       display_msg(mstr(193));
   end
end

/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time. It is used to make
   sure that the door does not lock on it's own and that the player will be able to get
   through once he has unlocked the door. Once more, this is so that locking and
   unlocking do not need to be done in Mapper.
**************************************************************************************/

procedure map_update_p_proc begin
   lab_door := self_obj;

   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       obj_lock(self_obj);
   end

   else begin
       obj_unlock(self_obj);
   end
end
