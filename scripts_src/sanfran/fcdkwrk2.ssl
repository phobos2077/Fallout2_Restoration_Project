/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "fcdkwrk2"
#include "../headers/define.h"

#define NAME                    SCRIPT_FCDKWRK2

#include "../headers/command.h"
#include "../headers/sanfran.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Leave_Map                  (7)
#define LVAR_Done_Talking               (8)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/
procedure Node999;
procedure Node998;
procedure Node900;
procedure Node901;
procedure Node902;
procedure Node903;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;

/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

#define MID_TILE 23306
#define EXIT_TILE 31914

variable kill_self := 0;

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == 1) then begin
      if (self_tile == EXIT_TILE) then begin
         destroy_object(self_obj);
      end else if (self_tile != EXIT_TILE) then begin
         if (self_tile < MID_TILE) then begin
            anim_move_to_point(MID_TILE)
         end else begin
            anim_move_to_point(EXIT_TILE)
         end
      end
      add_timer_event(self_obj, ONE_GAME_SECOND, 1);
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      set_local_var(LVAR_Hostile,2);
   end
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   if (local_var(LVAR_Leave_Map) == 1) then
      destroy_object(self_obj);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end


procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */




   if ( ((local_var(LVAR_Hostile) == 2) or (san_fran_flag(SF_SHI_ENEMY))) and (self_can_see_dude) ) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if (local_var(LVAR_Done_Talking)) then begin
      floater(350);
   end else if (local_var(LVAR_Leave_Map)) then begin
      floater(330);
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end

   if (kill_self) then
      critter_dmg(self_obj, 1000, DMG_normal_dam);

end

procedure Node999 begin

end

procedure Node998 begin
    set_local_var(LVAR_Hostile,2);
end

procedure Node001 begin
   Reply(200+local_var(LVAR_Herebefore));
   NOption(202, Node999, 4);
   NOption(203, Node002, 4);
   NOption(204, Node002, 4);
   set_local_var(LVAR_Herebefore,1);
end

procedure Node002 begin
   Reply(210);
   NOption(211, Node003, 4);
   NOption(212, Node003, 4);
   NOption(213, Node003, 4);
   NOption(214, Node999, 4);
end

procedure Node003 begin
   Reply(220);
   NOption(221, Node004, 4);
end

procedure Node004 begin
   Reply(230);
   NOption(231, Node005, 4);
   NOption(232, Node006, 4);
   if (has_skill(dude_obj,SKILL_SPEECH) > 80) then
      NOption(233, Node007, 4);
end

procedure Node005 begin
   Reply(240);
   NOption(241, Node900, 4);
end

procedure Node006 begin
   Reply(250);
   NOption(251, Node903, 4);
end

procedure Node007 begin
   Reply(260);
   NOption(261, Node902, 4);
   NOption(262, Node008, 4);
end

procedure Node008 begin
   Reply(270);
   NOption(271, Node009, 4);
   NOption(272, Node902, 4);
end

procedure Node009 begin
   Reply(280);
   NOption(281, Node010, 4);
end

procedure Node010 begin
   Reply(290);
   NOption(291, Node011, 4);
end

procedure Node011 begin
   Reply(300);
   NOption(301, Node012, 4);
end

procedure Node012 begin
   Reply(310);
   NOption(311, Node013, 4);
end

procedure Node013 begin
   Reply(320);
   NOption(321, Node901, 4);
end

procedure Node900 begin
   variable knife;
   knife:=create_object(PID_KNIFE,0,0);
   add_obj_to_inven(self_obj, knife);
   kill_self := 1;
end

procedure Node901 begin


   if (sub_flag(0)) then
      set_sub_flag(SHI_SUB_KNOWN);

   call Node902;
end

procedure Node902 begin
   set_local_var(LVAR_Leave_Map,1);
   display_msg(mstr(400));
   give_xp(500);
   add_timer_event(self_obj, ONE_GAME_SECOND, 1);
end

procedure Node903 begin
   set_local_var(LVAR_Done_Talking,1);
end
