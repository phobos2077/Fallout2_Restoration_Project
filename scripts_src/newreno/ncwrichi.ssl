/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Wright Children
        Location: New Reno
        Description:

        Log:

           Created: April 24, 1998

           Updated:
*/

/* Include Files */
#define SCRIPT_REALNAME "ncwrichi"
#include "../headers/define.h"
#define NAME                    SCRIPT_NCWRICHI
#define TOWN_REP_VAR            GVAR_TOWN_REP_NEW_RENO
#include "../headers/command.h"
#include "../headers/modreact.h"
#include "../headers/newreno.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;


/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node029;
procedure Node030;
procedure Node031;
procedure Node032;
procedure Node033;
procedure Node034;
procedure Node035;
procedure Node036;
procedure Node037;
procedure Node038;
procedure Node039;
procedure Node040;
procedure Node041;
procedure Node042;
procedure Node043;
procedure Node044;
procedure Node045;
procedure Node046;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Flags                        (4)
#define LVAR_Last_Loc_Update              (5)
#define LVAR_Home_Tile                    (6)
#define LVAR_Destination_Tile             (7)

#define sleeping_bit                      bit_10

#define sleeping                          lvar_bit(LVAR_Flags, sleeping_bit)
#define set_sleeping                      set_lvar_bit_on(LVAR_Flags, sleeping_bit)
#define off_sleeping                      set_lvar_bit_off(LVAR_Flags, sleeping_bit)
/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */
#define children_sleep_time               ((game_time_hour < 800) or (game_time_hour >= 2000))
#define move_child                        if (anim_busy(self_obj) == false) then begin                                           \
                                             if (children_sleep_time) then begin                                                 \
                                                if (self_tile != local_var(LVAR_Home_Tile)) then begin                           \
                                                   self_walk_to_tile(local_var(LVAR_Home_Tile));                              \
                                                end else if (sleeping == false) then begin                                       \
                                                   set_sleeping;                                                                 \
                                                   reg_anim_clear(self_obj);                                                     \
                                                   reg_anim_begin();                                                             \
                                                      reg_anim_animate(self_obj, random(ANIM_fall_back,ANIM_fall_front), -1);    \
                                                   reg_anim_end();                                                               \
                                                end                                                                              \
                                             end else if (self_tile != local_var(LVAR_Destination_Tile)) then begin              \
                                                off_sleeping;                                                                    \
                                                self_run_to_tile(local_var(LVAR_Destination_Tile));                           \
                                             end                                                                                 \
                                          end
#define check_child_schedule              if (children_sleep_time) then begin                                                                                  \
                                             temp_tile := tile_num_in_direction(child_play_area_heart, random(0,5), random(3,10));                             \
                                             if (tile_wright_richards_room(temp_tile)) then begin                                                              \
                                                temp_tile := 0;                                                                                                \
                                             end else if (tile_wright_orville_room(temp_tile)) then begin                                                      \
                                                temp_tile := 0;                                                                                                \
                                             end else if ((tile_wright_house(temp_tile) == false) and (tile_wright_front_yard(temp_tile) == false)) then begin \
                                                temp_tile := 0;                                                                                                \
                                             end                                                                                                               \
                                             if (temp_tile != 0) then begin                                                                                    \
                                                set_local_var(LVAR_Destination_Tile, temp_tile);                                                               \
                                             end                                                                                                               \
                                          end                                                                                                                  \
                                          move_child

#define self_family                       family_wright

/* Local variables which do not need to be saved between map changes. */

variable last_node;
variable temp_tile;

procedure start begin
end

procedure push_p_proc begin
   if (sleeping) then begin
      script_overrides;
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == float_param) then begin
      if (combat_is_initialized == false) then begin
         if ((self_can_see_dude) and (self_distance_from_dude <= 5)) then begin
            if (children_sleep_time == false) then begin
               Evil_Critter:=0;
               Slavery_Tolerant := SLAVE_VERY_INTOLERANT;
               Karma_Perception := KARMA_PERCEPTION5;
               CheckKarma;
               GetReaction;
               if (enclave_destroyed) then call Node002;
               else if (dude_wearing_power_armor) then call Node003;
               else if ((has_rep_slaver) or (has_rep_childkiller) or ((dude_is_made_man) and (self_family!=dude_family)) or (bad_critter_reaction)) then call Node004;
               else if (dude_is_sneaking) then call Node005;
               else if ((robobrain_is_dude_companion) or (marcus_is_dude_companion)) then call Node006;
               else if ((lenny_is_dude_companion) or (robodog_is_dude_companion)) then call Node007;
               else call Node008;
            end
         end
         check_child_schedule
      end
      nr_add_timer_event_rand(self_obj, 25, 35, float_param);
   end
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
      if (map_first_run) then begin
         set_local_var(LVAR_Home_Tile, self_tile);
         set_local_var(LVAR_Destination_Tile, self_tile);
         set_self_team(TEAM_NEW_RENO_WRIGHT);
         set_self_ai(AI_CHILD);
      end
      check_child_schedule
   end
   nr_add_timer_event_rand(self_obj, 25, 35, float_param);
end

procedure map_update_p_proc begin
   if (combat_is_initialized == false) then begin
      check_child_schedule
   end
end

procedure critter_p_proc begin
   if ((hostile) and (self_can_see_dude)) then begin
      self_attack_dude;
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
      attack_family(self_family) //added by killap
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure talk_p_proc begin
   Evil_Critter:=0;
   Slavery_Tolerant := SLAVE_VERY_INTOLERANT;
   Karma_Perception := KARMA_PERCEPTION5;
   CheckKarma;
   GetReaction;
   ReactToLevel; //added by killap
   if (children_sleep_time) then begin
      floater_rand(800, 802);
   end else if (enclave_destroyed) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node010;
      gSay_End;
      end_dialogue;
   end else if (dude_wearing_power_armor) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         if (random(1,2) == 1) then begin
            call Node015;
         end else begin
            call Node024;
         end
      gSay_End;
      end_dialogue;
   end else if ((has_rep_slaver) or (has_rep_childkiller) or ((dude_is_made_man) and (self_family!=dude_family)) or (bad_critter_reaction)) then call Node004;
   else if (dude_is_sneaking) then call Node005;
   else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         if (robobrain_is_dude_companion) then call Node027;
         else if (marcus_is_dude_companion) then call Node029;
         else if (lenny_is_dude_companion) then call Node041;
         else call Node030;
      gSay_End;
      end_dialogue;
   end
   nr_add_timer_event_rand(self_obj, 25, 35, float_param);
end

procedure destroy_p_proc begin
   inc_good_critter
end

procedure look_at_p_proc begin
   script_overrides;
   display_mstr(100);
end

procedure description_p_proc begin
   script_overrides;
   if (examined) then begin
      if (self_is_female) then begin
         display_msg(mstr(100) + mstr(random(157, 159)));
      end else begin
         display_msg(mstr(100) + mstr(random(155, 156)));
      end
   end else begin
      display_mstr(150+self_is_female);
   end
   set_examined;
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   if (hostile == false) then begin
      set_hostile;
   end
end
procedure Node999 begin
end

#define is_insert_message(x)  ((x == 181) or (x == 296) or        \
                               ((176 <= x) and (x <= 178)) or     \
                               (x == 310) or (x == 311) or        \
                               (x == 315) or (x == 320))

procedure Node002 begin
   floater_rand_with_check(175, 181, dude_name, 1000);
end
procedure Node003 begin
   floater_rand(190, 193);
end
procedure Node004 begin
   floater_rand(200, 202);
end
procedure Node005 begin
   floater_rand(210, 211);
end
procedure Node006 begin
   if (robobrain_is_dude_companion) then begin
      floater_rand(215, 217);
   end else begin
      floater_rand(218, 222);
   end
end
procedure Node007 begin
   if (lenny_is_dude_companion) then begin
      floater_rand(230, 232);
   end else begin
      floater_rand(233, 235);
   end
end
procedure Node008 begin
   floater_rand(908 - (8 * self_is_male), 944 + (3 * self_is_female));
end
procedure Node010 begin
   Reply(random(290,292));
   NOption(293,Node011,-003);
   GOption(mstr(296) + dude_name + mstr(1296),Node012,004);
   GOption(297,Node012,004);
   if (richard_wright_known) then begin
      NOption(298,Node044,004);
   end
   NOption(295,Node999,-003);
   NOption(300+self_is_female,Node999,004);
end
procedure Node011 begin
   Reply(310);
   NOption(mstr(311) + dude_name + mstr(1311),Node999,001);
end
procedure Node012 begin
   Reply(mstr(315) + dude_name + mstr(1315));
   NOption(316,Node013,001);
end
procedure Node013 begin
   Reply(mstr(320) + dude_name + mstr(1320));
   NOption(321,Node014,001);
   NOption(322,Node014,001);
   NOption(323,Node014,001);
   NOption(324,Node014,001);
end
procedure Node014 begin
   Reply(330);
   NOption(331,Node038,001);
   NOption(332,Node038,001);
end
procedure Node015 begin
   Reply(190);
   BOption(341,Node016,-003);
   NOption(344,Node020,004);
   if (richard_wright_known) then begin
      NOption(345,Node044,004);
   end
   NOption(300+self_is_female,Node999,004);
   NOption(295,Node999,-003);
end
procedure Node016 begin
   Reply(355);
   BOption(356,Node018,001);
   BOption(357,Node018,001);
   BOption(358,Node017,001);
   BOption(359,Node018,001);
   BOption(360,Node018,001);
   NOption(361,Node999,001);
   NOption(295,Node999,001);
end
procedure Node017 begin
   Reply(370);
   BOption(356,Node018,001);
   BOption(357,Node018,001);
   BOption(358,Node019,001);
   BOption(359,Node018,001);
   BOption(360,Node018,001);
   NOption(361,Node999,001);
   NOption(295,Node999,001);
end
procedure Node018 begin
   Reply(395);
   NOption(396,Node999,001);
   NOption(295,Node999,001);
end
procedure Node019 begin
   BottomReact;
   Reply(405);
   NOption(406,Node999,001);
   NOption(295,Node999,001);
end
procedure Node020 begin
   Reply(410);
   NOption(411,Node021,001);
   NOption(412,Node999,001);
end
procedure Node021 begin
   Reply(425);
   NOption(426,Node022,001);
   NOption(427,Node999,001);
end
procedure Node022 begin
   Reply(435);
   NOption(436,Node023,001);
end
procedure Node023 begin
   Reply(445);
   NOption(446,Node999,001);
   NOption(427,Node999,001);
end
procedure Node024 begin
   Reply(191);
   NOption(456+(3*(dude_iq>3)),Node025,001);
   if (richard_wright_known) then begin
      NOption(460,Node044,004);
   end
   NOption(295,Node999,-003);
   NOption(300+self_is_female,Node999,004);
end
procedure Node025 begin
   Reply(475 + (dude_iq>3));
   BOption(477,Node016,-003);
   NOption(295,Node999,-003);
   NOption(479,Node026,004);
end
procedure Node026 begin
   Reply(485);
   NOption(486,Node026,001);
   NOption(487,Node999,001);
   NOption(488,Node999,001);
end
procedure Node027 begin
   Reply(495);
   BOption(341,Node016,-003);
   NOption(499,Node028,004);
   NOption(500,Node028,004);
   if (robobrain_skynet) then begin
      NOption(501,Node028,004);
   end
   if (richard_wright_known) then begin
      NOption(502,Node044,004);
   end
   NOption(295,Node999,-003);
   NOption(300+self_is_female,Node999,004);
end
procedure Node028 begin
   Reply(515);
   NOption(344,Node020,004);
   NOption(300+self_is_female,Node999,004);
end
procedure Node029 begin
   last_node := 29;
   Reply(525);
   BOption(526,Node016,-003);
   NOption(529,Node042,004);
   BOption(530,Node043,004);
   BOption(531,Node043,004);
   if (richard_wright_known) then begin
      NOption(532,Node044,004);
   end
   NOption(295,Node999,-003);
   NOption(300+self_is_female,Node999,004);
end
procedure Node030 begin
   Reply(540);
   NOption(541,Node040,-003);
   NOption(544 + self_is_female,Node040,004);
   if (richard_wright_known) then begin
      NOption(546,Node044,004);
   end
   NOption(295,Node999,-003);
   NOption(300+self_is_female,Node999,004);
end
procedure Node031 begin
   Reply(555);
   NOption(556,Node032,001);
end
procedure Node032 begin
   Reply(560);
   NOption(561,Node033,001);
end
procedure Node033 begin
   Reply(565);
   NOption(566,Node034,001);
end
procedure Node034 begin
   Reply(570);
   NOption(571,Node035,001);
end
procedure Node035 begin
   Reply(575);
   NOption(576,Node036,001);
end
procedure Node036 begin
   Reply(580);
   NOption(581,Node037,001);
end
procedure Node037 begin
   Reply(585);
   NOption(586,Node038,001);
end
procedure Node038 begin
   Reply(590);
   NOption(591,Node039,001);
end
procedure Node039 begin
   Reply(595);
   NOption(295,Node999,-003);
   NOption(488,Node999,004);
end
procedure Node040 begin
   Reply(random(908 - (8 * self_is_male), 944 + (3 * self_is_female)));
   NOption(648+(2*(dude_iq>3)), Node040, 001);
   if (richard_wright_known) then begin
      NOption(546,Node044,004);
   end
   NOption(295,Node999,-003);
   NOption(300+self_is_female,Node999,004);
end
procedure Node041 begin
   last_node := 41;
   Reply(665);
   BOption(666,Node016,-003);
   NOption(669,Node042,004);
   BOption(670,Node043,004);
   BOption(671,Node043,004);
   if (richard_wright_known) then begin
      NOption(532,Node044,004);
   end
   NOption(295,Node999,-003);
   NOption(300+self_is_female,Node999,004);
end
procedure Node042 begin
   if (last_node == 29) then begin
      Reply(685);
      NOption(687,Node040,001);
   end else begin
      Reply(686);
      NOption(688,Node040,001);
   end
   NOption(689,Node999,001);
end
procedure Node043 begin
   BottomReact;
   Reply(695);
   if (last_node == 29) then begin
      NOption(696,Node999,001);
      NOption(697,Node999,001);
   end else if (last_node == 41) then begin
      NOption(698,Node999,001);
      NOption(699,Node999,001);
   end
   NOption(488,Node999,001);
end
procedure Node044 begin
   Reply(710);
   NOption(711,Node045,001);
   NOption(712,Node046,001);
   NOption(713,Node999,001);
end
procedure Node045 begin
   Reply(720);
   NOption(712,Node046,001);
   NOption(713,Node999,001);
end
procedure Node046 begin
   Reply(730);
   NOption(711,Node045,001);
   NOption(713,Node999,001);
end
