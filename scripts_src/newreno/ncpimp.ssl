/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Pimp
        Location: New Reno
        Description: Bad Motherfucker

        Log:


           Created: April 23, 1998

           Updated:
*/

/* Include Files */
#define SCRIPT_REALNAME "ncpimp"
#include "../headers/define.h"
#define NAME                    SCRIPT_NCPIMP
#define TOWN_REP_VAR            GVAR_TOWN_REP_NEW_RENO
#include "../headers/command.h"
#include "../headers/newreno.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure timed_event_p_proc;
procedure map_update_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node000;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Flags                        (0)

#define hidden_for_fight_bit              bit_10

#define message_type_float                (1)
#define message_type_click                (2)
#define message_is_float                  (message_type == message_type_float)
#define message_is_click                  (message_type == message_type_click)
#define set_message_float                 message_type := message_type_float
#define set_message_click                 message_type := message_type_click

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

/* Local variables which do not need to be saved between map changes. */

variable message_type := 0;

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == float_param) then begin
      if ((combat_is_initialized == false) and (self_visible)) then begin
         if (tile_distance(self_tile,dude_tile)<=4) then begin
            set_message_float;
            call Node000;
         end
      end
      nr_add_timer_event_rand(self_obj, 25, 35, float_param);
   end
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
      if (map_first_run) then begin
         set_self_ai(AI_PIMP);
         set_team_pimp
      end
      nr_add_timer_event_rand(self_obj, 25, 35, float_param);
   end
end

procedure map_update_p_proc begin
   check_hide_durring_boxing_fight
end
procedure critter_p_proc begin
   if ((hostile) and (self_can_see_dude)) then begin

      self_attack_dude;
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      set_hostile;
   end
end

procedure talk_p_proc begin
   set_message_click;
   call Node000;
   nr_add_timer_event_rand(self_obj, 25, 35, float_param);
end

procedure destroy_p_proc begin
   inc_evil_critter
end

procedure look_at_p_proc begin
   script_overrides;
   display_mstr(100);
end

procedure description_p_proc begin
   script_overrides;
   if (examined) then begin
      display_mstr_rand(152, 155);
   end else begin
      display_mstr_rand(150, 151);
   end
   set_examined;
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   set_hostile;
end
procedure Node999 begin
end

procedure Node000 begin
   //if (message_str(SCRIPT_NCPERSON, 100) == "You see one of the Reno townsfolk.") then begin
      if (dude_is_female) then begin
         if (enclave_destroyed) then begin
            call Node002;
         end else if (dude_is_pornstar) then begin
            call Node004;
         end else if (dude_is_made_man) then begin
            call Node006;
         end else if (dude_is_prizefighter) then begin
            call Node008;
         end else if (myron_is_dude_companion) then begin
            call Node009;
         end else if (has_rep_slaver) then begin
            call Node012;
         end else begin
            call Node014;
         end
      end else begin
         if (enclave_destroyed) then begin
            call Node001;
         end else if (dude_is_pornstar) then begin
            call Node003;
         end else if (dude_is_made_man) then begin
            call Node005;
         end else if (dude_is_prizefighter) then begin
            call Node007;
         end else if (myron_is_dude_companion) then begin
            call Node009;
         end else if (dude_spouse_is_female) then begin
            call Node010;
         end else if (has_rep_slaver) then begin
            call Node011;
         end else begin
            call Node013;
         end
      end
   //end else begin
   //   call Node015;
   //end
end
procedure Node001 begin
   floater_rand(200, 202);
end
procedure Node002 begin
   floater_rand(220, 222);
end
procedure Node003 begin
   floater_rand(234-(4*message_is_float), 244+(message_is_click));
end
procedure Node004 begin
   floater_rand(266-(6*message_is_float),276+(2*message_is_click));
end
procedure Node005 begin
   floater_rand(293-(3*message_is_float),303+(2*message_is_click));
end
procedure Node006 begin
   floater_rand(323-(3*message_is_float),329+(message_is_click));
end
procedure Node007 begin
   floater_rand(353-(3*message_is_float),364+(2*message_is_click));
end
procedure Node008 begin
   floater_rand(383-(3*message_is_float),392+(message_is_click));
end
procedure Node009 begin
   floater_rand(413-(3*message_is_float),434+(message_is_click));
end
procedure Node010 begin
   floater_rand(450-(10*message_is_float),456+(3*message_is_click));
end
procedure Node011 begin
   floater_rand(475-(5*message_is_float),487+(10*message_is_click));
end
procedure Node012 begin
   floater_rand(503-(3*message_is_float),508+(4*message_is_click));
end
procedure Node013 begin
   floater_rand(523-(3*message_is_float),537+(6*message_is_click));
end
procedure Node014 begin
   floater_rand(558-(8*message_is_float),562+(3*message_is_click));
end
procedure Node015 begin
   floater_rand(520,534);
end
