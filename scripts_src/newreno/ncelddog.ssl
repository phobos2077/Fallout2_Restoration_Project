/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location: Den
        Description:

        Log:

           Created: August 22, 1998

           Updated:
*/

/* Include Files */
#define SCRIPT_REALNAME "ncelddog"
#include "../headers/define.h"
#define NAME                     SCRIPT_MCATKDOG
#define TOWN_REP_VAR             GVAR_TOWN_REP_NEW_RENO
#include "../headers/command.h"
#include "../headers/newreno.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure timed_event_p_proc;
procedure combat_p_proc;

procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

#define LVAR_Flags                        (0)
#define LVAR_Home_Tile                    (1)

#define dogs_bark                         if (random(0,2) != 2) then begin                                           \
                                             if (new_reno_eldridge_obj != 0) then begin                              \
                                                nr_add_timer_event_tic(new_reno_eldridge_obj, 5, dogs_bark_param);   \
                                             end                                                                     \
                                             play_sfx("maddogaq");                                                   \
                                          end                                                                        \
                                          new_reno_barking_dog_obj := self_obj;                                      \
                                          Face_Critter(dude_obj,self_obj);                                           \
                                          floater_rand(205, 206)

variable should_attack;
variable temp_move_tile;
import variable new_reno_barking_dog_obj;
import variable new_reno_eldridge_obj;

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == float_param) then begin
      if (combat_is_initialized == false) then begin
         if (self_can_see_dude) then begin
            should_attack := true;
            if (new_reno_eldridge_obj != 0) then begin
               if (obj_can_see_obj(new_reno_eldridge_obj, dude_obj)) then begin
                  should_attack := false;
               end else if (eldridge_open) then begin
                  should_attack := false;
               end
            end

            if (obj_in_eldridge_store_area(dude_obj)) then begin
               if (should_attack) then begin
                  Run_Next_To_Obj_And_Face(dude_obj)
                  if (anim_busy(self_obj)) then begin
                     if (tile_distance_objs(self_obj, dude_obj) < 5) then begin
                        attack(dude_obj);
                     end
                  end
               end else begin
                  dogs_bark;
               end
            end else if (eldridge_bed_time) then begin
               dogs_bark;
            end
         end
      end else if (random(1,10) == 4) then begin
         if (anim_busy(self_obj) == false) then begin
            temp_move_tile := tile_num_in_direction(self_tile, random(0,5), random(1,3));
            if (tile_in_eldridge_store_area(temp_move_tile)) then begin
               if (tile_in_eldridge_front_room(temp_move_tile) == false) then begin
                  set_local_var(LVAR_Home_Tile, temp_move_tile);
               end
            end
            self_walk_to_tile(local_var(LVAR_Home_Tile));
         end
      end
      nr_add_timer_event_rand(self_obj, 3, 6, float_param);
   end else if (fixed_param == attack_param) then begin
      attack(dude_obj);
   end
end

procedure map_enter_p_proc begin
   if (is_loading_game == false) then begin
      if (map_first_run) then begin
         set_local_var(LVAR_Home_Tile, self_tile);
         set_self_team(TEAM_NEW_RENO_ELDRIDGE);
         set_self_ai(AI_DOG_TOUGH);
      end else if (eldridge_dead) then begin
         if (random(1,3) == 2) then begin
            kill_critter(self_obj, random(ANIM_fall_back_sf, ANIM_fall_front_sf));
         end
      end
      nr_add_timer_event_rand(self_obj, 3, 5, float_param);
      new_reno_barking_dog_obj := self_obj; // added by killap - expansion
   end
end

// added by killap - expansion
procedure map_update_p_proc begin
  new_reno_barking_dog_obj := self_obj;
end

procedure map_exit_p_proc begin
end

procedure combat_p_proc begin
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if (hostile) then begin
         self_attack_dude;
      end
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
      call Node998;
   end
end

procedure talk_p_proc begin
   set_herebefore;
   dude_floater(211 + (dude_is_stupid == false));
   nr_add_timer_event_rand(self_obj, 25, 35, float_param);
end

procedure destroy_p_proc begin
   inc_neutral_critter
   new_reno_barking_dog_obj := 0; // added by killap - expansion
end

procedure look_at_p_proc begin
   script_overrides;
   display_mstr(100);
end

procedure description_p_proc begin
   script_overrides;
   display_mstr(250);
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   set_hostile;
end
procedure Node999 begin
end
