/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: President Richardson
        Location: Enclave
        Description: He is the President of the USA

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "qhprzrch"
#include "../headers/define.h"
#include "../headers/encpres.h"

#define NAME                    SCRIPT_QHPRZRCH
#define TOWN_REP_VAR            (GVAR_TOWN_REP_ENCLAVE)

#include "../headers/command.h"
#include "../headers/modreact.h"

#include "../headers/enc.h"
#include "../headers/newreno.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node011a; //added by killap
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node021a; //added by killap
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node029;
procedure Node030;
procedure Node031;
procedure Node032;
procedure Node033;
procedure Node034;
procedure Node035;
procedure Node036;
procedure Node037;
procedure Node038;
procedure Node039;
procedure Node040;
procedure Node041;
procedure Node042;
procedure Node043;
procedure Node044;
procedure Node045;
procedure Node046;
procedure Node047;
procedure Node048;
procedure Node049;
procedure Node050;
procedure Node051;
procedure Node052;
procedure Node053;
procedure Node054;
procedure Node055;
procedure Node056;
procedure Node057;
procedure Node058;
procedure Node059;
procedure Node060;
procedure Node061;
procedure Node062;
procedure Node063;
procedure Node064;
procedure Node065;
procedure Node066;

procedure Node036a;
procedure Node039a;
procedure Node043a;
procedure Node046a;
procedure Node048a;

procedure Node911; //added by killap

#define WEARING_DISGUISE    (dude_wearing_coc_robe)
#define WEARING_MKII        (obj_pid(dude_armor) == PID_ADVANCED_POWER_ARMOR_MK2)


//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Node5_Count                (7)
#define LVAR_Node20_Count               (8)
#define LVAR_Node21_Count               (9)
#define LVAR_Node40_Count               (10)
#define LVAR_Start_Dialog               (11)
#define LVAR_Node4_Count                (12) //added by killap

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable fromNode := 0;

procedure start begin
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_ENCLAVE);
   set_self_ai(AI_TOUGH_CITIZEN);
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

   if ((self_can_see_dude) and (local_var(LVAR_Start_Dialog) == 0)) then begin
       dialogue_system_enter;
   end

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=0;
   Slavery_Tolerant:=SLAVE_TOLERANT;
   Karma_Perception:=KARMA_PERCEPTION1;

   CheckKarma;

   GetReaction;

   inc_local_var(LVAR_Start_Dialog);

// Begin Seraph's Code - expansion
   if (global_var(GVAR_ENDGAME_MOVIE_PRES_RICH) != 1) then
      set_global_var(GVAR_ENDGAME_MOVIE_PRES_RICH,1);
// End Seraph's Code

if (dude_is_stupid) then begin
      if (local_var(LVAR_Herebefore) == 0) then begin
         start_gdialog(NAME,self_obj,4,HEAD_PRESIDENT,BACKGROUND_PRESIDENT);
         gSay_Start;
           call Node001;
         gSay_End;
         end_dialogue;
      end else begin
         call Node003;
      end
   end else begin
      if (dude_wearing_power_armor) then begin
         if (party_size_biped == 0) then begin
            start_gdialog(NAME,self_obj,4,HEAD_PRESIDENT,BACKGROUND_PRESIDENT);
            gSay_Start;
              call Node021;
            gSay_End;
            end_dialogue;
         end else begin
            start_gdialog(NAME,self_obj,4,HEAD_PRESIDENT,BACKGROUND_PRESIDENT);
            gSay_Start;
               call Node022;
            gSay_End;
            end_dialogue;
         end
      end else dude_wearing_vault_suit begin
         if (party_size_biped == 0) then begin
            start_gdialog(NAME,self_obj,4,HEAD_PRESIDENT,BACKGROUND_PRESIDENT);
            gSay_Start;
              call Node004;
            gSay_End;
            end_dialogue;
         end else begin
            start_gdialog(NAME,self_obj,4,HEAD_PRESIDENT,BACKGROUND_PRESIDENT);
            gSay_Start;
               call Node022;
            gSay_End;
            end_dialogue;
         end
    //commented out by killap - unimplemented content
    //end else if (WEARING_DISGUISE) then begin
    //   if (party_size_biped == 0) then begin
    //      start_gdialog(NAME,self_obj,4,HEAD_PRESIDENT,BACKGROUND_PRESIDENT);
    //      gSay_Start;
    //        call Node005;
    //      gSay_End;
    //      end_dialogue;
    //   end else begin
    //      start_gdialog(NAME,self_obj,4,HEAD_PRESIDENT,BACKGROUND_PRESIDENT);
    //      gSay_Start;
    //         call Node022;
    //      gSay_End;
    //      end_dialogue;
    //   end
      end else begin
         start_gdialog(NAME,self_obj,4,HEAD_PRESIDENT,BACKGROUND_PRESIDENT);
         gSay_Start;
            call Node022;
         gSay_End;
         end_dialogue;
      end
   end

   inc_local_var(LVAR_Herebefore);
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_evil_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(101));
   else
      display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end

procedure NodePresDis begin
//PC = President Discoverd
   call Node999;
end

procedure NodeCallGuards begin
   //set flag pc = president discovered
   //call guards
   set_map_var(MVAR_Pres_Ordered,1); //added by killap - the guards should now actually come.
   call Node999;
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   dude_wearing_vault_suit
      Reply(103);
   else if (WEARING_DISGUISE) then
      Reply(104);
   else
      Reply(105);

   NLowOption(106, Node002);
   NLowOption(107, Node002);
   NLowOption(108, Node002);
end

procedure Node002 begin
   dude_wearing_vault_suit
      Reply(109);
   else if (WEARING_DISGUISE) then
      Reply(110);
   else
      Reply(111);
   NLowOption(112, NodeCallGuards);
   NLowOption(113, NodeCallGuards);
end

procedure Node003 begin
   floater(Random(114, 118));
   call NodeCallGuards;
end

procedure Node004 begin
   //added check and else statement - killap
   if (local_var(LVAR_Herebefore) == 0) then begin
      Reply(119);
      BOption(120, Node019, 4);
      NOption(121, Node020, 4);
      NOption(122, Node006, 4);
   end else begin
      Reply(183);
      BOption(125, Node019, 4);
      NOption(188, Node020, 4);
      NOption(191, Node023, 4);
   end
end

procedure Node005 begin
   if (local_var(LVAR_Node5_Count) == 0) then begin
      inc_local_var(LVAR_Node5_Count);
      Reply(123);
   end else begin
      Reply(124);
   end
   NOption(125, Node015, 4);
   NOption(126, Node020, 4);
   NOption(127, Node999, 4);
end

procedure Node006 begin
   Reply(128);
   NOption(129, Node060, 4);
   GOption(130, Node059, 4);
   GOption(131, Node007, 4);
end

procedure Node007 begin
   Reply(132);
   NOption(133, Node008, 4);
   GOption(134, Node008, 4);
end

procedure Node910 begin
   if (skill_success(dude_obj, SKILL_SPEECH, 0)) then
      call Node009;
   else
      call Node010;
end

procedure Node008 begin
   Reply(135);
   GOption(136, NodeCallGuards, 4);
   BOption(137, Node910, 4);
end

procedure Node009 begin
   Reply(138);
   NOption(139, Node020, 4);
   BOption(140, Node013, 4);
   BOption(141, Node011, 4);
end

procedure Node010 begin
   Reply(142);
   //intimidation check
   BOption(143, Node911, 4); //edit by killap - was Node012
   GOption(144, NOde911, 4); //edit by killap - was Node013
end

//added by killap
procedure Node911 begin
   if (skill_success(dude_obj, SKILL_SPEECH, 5)) then
      call Node011;
   else
      call Node011a;
end
//end added

procedure Node011 begin
   //Reply(mstr(145)+" "+mstr(146));
   Reply(145);
   GOption(147, Node013, 4); //edit by killap - was Node012
   NOption(148, Node020, 4);
   BOption(149, Node012, 4);
end

//added by killap
procedure Node011a begin
   Reply(146);
   GOption(147, Node013, 4);
   NOption(148, Node020, 4);
   BOption(149, Node012, 4);
end
//end added

procedure Node012 begin
   Reply(150);
   NOption(151, Node020, 4);
   NOption(152, Node015, 4);
   BOption(153, Node014, 4);
end

procedure Node013 begin
   Reply(154);
   NOption(155, Node020, 4);
   NOption(156, Node999, 4);
   NOption(157, Node999, 4);
end

procedure NodeCombat begin
   //Set flag pc = president discovered
   set_map_var(MVAR_Pres_Ordered,1);
   call Node999;
end

procedure Node014 begin
   Reply(158);
   NOption(159, NodeCombat, 4);
end

procedure Node015 begin
   Reply(160);
   NOption(161, Node019, 4);
   BOption(162, Node018, 4);
   // unlocked by killap - expansion
   if (map_var(MVAR_Met_Vice_Pres)) then
      NOption(163, Node026, 4);
   BOption(164, Node016, 4);
   GOption(165, Node013, 4);
end

procedure Node016 begin
   Reply(166);
   NOption(167, Node017, 4);
   BOption(168, Node012, 4);
end

procedure Node017 begin
   Reply(169);
   BOption(170, NodeCallGuards, 4);
   BOption(171, NodeCallGuards, 4);
end

procedure Node018 begin
   Reply(172);
   NOption(173, Node019, 4);
end

procedure Node019 begin
   Reply(174);
   NOption(175, Node020, 4);
end

procedure Node020 begin
   if (local_var(LVAR_Node20_Count) == 0) then begin
      inc_local_var(LVAR_Node20_Count);
      Reply(176);
   end else
      Reply(177);
   NOption(178, Node024, 4);
   NOption(179, Node045, 4);
   if (secret_trade_disrupted or get_guard_assignment(guard_assignment_success)) then
      NOption(180, Node044, 4);
   BOption(181, Node023, 4);
end

procedure Node021 begin
   Reply(182);
   if (local_var(LVAR_Node21_Count) == 0) then begin
      inc_local_var(LVAR_Node21_Count);
      BOption(120, Node015, 4);
      NOption(185, Node999, 4);
   end else begin
      NOption(338, Node021a, 4);
      NOption(185, Node999, 4);
   end
end

procedure Node021a begin
   Reply(183);
   NOption(184, Node020, 4);
   NOption(165, Node999, 4);
end

procedure Node022 begin
   if (local_var(LVAR_Herebefore) == 0) then begin
      if (party_size_male + party_size_female == 0) then
         Reply(186);
      else
         Reply(187);
   end else
      Reply(183);
   NOption(188, Node020, 4);
   BOption(189, Node012, 4);
   if (local_var(LVAR_Herebefore) == 0) then
      BOption(190, Node019, 4);
   else
      BOption(125, Node019, 4);
   NOption(191, Node023, 4);
end

procedure Node023 begin
   Reply(192);
   NOption(193, Node030, 4);
   NOption(194, Node031, 4);
   BOption(195, Node012, 4);
   BOption(196, NOde013, 4);
end

procedure Node024 begin
   Reply(197);
   NOption(198, Node032, 4);
end

procedure Node025 begin
end

procedure Node026 begin
   Reply(199);
   NOption(200, Node027, 4);
end

procedure Node027 begin
   Reply(201);
   NOption(202, Node028, 4);
end

procedure Node028 begin
   Reply(203);
   NOption(204, Node029, 4);
   NOption(205, Node030, 4);
end

procedure Node029 begin
   Reply(206);
   NOption(207, Node030, 4);
end

procedure Node030 begin
   Reply(208);
   BOption(209, Node012, 4);
   NOption(210, Node061, 4);
   NOption(211, Node057, 7);
end

procedure Node031 begin
   Reply(212);
   NOption(213, Node030, 4);
   BOption(214, Node012, 4);
   BOption(215, Node013, 4);
end

procedure Node032 begin
   Reply(216);
   NOption(217, Node033, 4);
end

procedure Node033 begin
   Reply(218);
   NOption(219, Node034, 4);
end

procedure Node034 begin
   Reply(220);
   NOption(221, Node035, 4);
end

procedure Node035 begin
   Reply(222);
   NOption(223, Node036, 4);
end

procedure Node036 begin
   Reply(224);
   NOption(225, Node036a, 4);
end

procedure Node036a begin
   Reply(226);

   NOption(227,Node037,004);
end

procedure Node037 begin
   Reply(228);
   NOption(229, Node038, 4);
end

procedure Node038 begin
   Reply(230);
   NOption(231, Node039, 4);
end

procedure Node039 begin
   Reply(232);
   NOption(233, Node039a, 4);
end

procedure Node039a begin
   Reply(234);

   NOption(235,Node040,004);
end

procedure Node040 begin
   if (local_var(LVAR_Node40_Count) == 0) then begin
      inc_local_var(LVAR_Node40_Count);
      Reply(236);
   end else begin
      inc_local_var(LVAR_Node40_Count);
      Reply(237);
   end

   if (local_var(LVAR_Node40_Count) == 1) then begin
      NOption(238, Node046, 4);
   end
   NOption(239, Node041, 4);
end

procedure Node041 begin
   Reply(240);
   NOption(241, Node042, 4);
end

procedure Node042 begin
   Reply(242);
   NOption(243, Node043, 4);
end

procedure Node043 begin
   Reply(244);
   NOption(245, Node043a, 4);
end

procedure Node043a begin
   Reply(246);

   NOption(247,Node047,004);
end

procedure Node044 begin
   Reply(248);
   NOption(249, Node020, 4);
end

procedure Node045 begin
   Reply(250);
   NOption(251, Node020, 4);
end

procedure Node046 begin
   Reply(252);
   NOption(253, Node046a, 4);
end

procedure Node046a begin
   Reply(254);

   NOption(255,Node040,004);
end

procedure Node047 begin
   Reply(256);
   NOption(257, Node048, 4);
end

procedure Node048 begin
   Reply(258);
   NOption(259, Node048a, 4);
end

procedure Node048a begin
   Reply(260);

   NOption(261,Node049,004);
end

procedure Node049 begin
   Reply(262);
   NOption(263, Node050, 4);
   NOption(264, Node051, 4);
end

procedure Node050 begin
   Reply(265);
   NOption(266, Node056, 4); //edit by killap - was Node053
end

procedure Node051 begin
   Reply(267);
   NOption(268, Node053, 4);
end

procedure Node052 begin
end

procedure Node053 begin
   Reply(269);
   BOption(270, Node054, 4);
   NOption(271, NodePresDis, 4);
   BOption(272, NodeCombat, 4);
end

procedure Node054 begin
   Reply(273);
   NOption(274, Node055, 4);
end

procedure Node055 begin
   Reply(275);
   BOption(276, Node056, 4);
end

procedure Node056 begin
   Reply(277);
   BOption(278, NodeCombat, 4);
   NOption(279, NodePresDis, 4);
end

procedure Node057 begin
   Reply(280);
   NOption(281, Node058, 4);
end

procedure Node058 begin
   Reply(282);
   NOption(283, Node065, 4);
end

procedure Node059 begin
   Reply(284);
   GOption(285, Node007, 4);
   NOption(286, Node008, 4);
end

procedure Node060 begin
   Reply(287);
   NOption(288, Node020, 4);
   GOption(289, Node007, 4);
   NOption(290, Node008, 4);
end

procedure Node061 begin
   Reply(291);
   NOption(292, Node062, 4);
end

procedure Node062 begin
   Reply(293);
   NOption(294, Node063, 4);
   NOption(295, Node064, 4);
end

procedure Node063 begin
   fromNode := 63;
   Reply(296);
   NOption(297, Node020, 4);
end

procedure Node064 begin
   fromNode := 64;
   Reply(298);
   NOption(299, Node020, 4);
   BOption(300, Node998, 4);
   NOption(301, NodePresDis, 4);
end

procedure Node065 begin
   Reply(302);
   NOption(303, Node066, 4);
end

procedure Node020a begin
   fromNode := 66;
   call Node020;
end

procedure Node066 begin
   Reply(304);
   NOption(305, Node020a, 4);
   BOption(306, Node998, 4);
   NOption(307, NodePresDis, 4);
end



//xxxxxxxxxxxxxxxxxxxx
