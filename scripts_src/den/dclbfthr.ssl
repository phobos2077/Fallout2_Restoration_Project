/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "dclbfthr"
#include "../headers/define.h"
#include "../headers/den.h"
#include "../headers/denres1.h"

#define NAME                    SCRIPT_DCLBFTHR
#define TOWN_REP_VAR            GVAR_TOWN_REP_THE_DEN

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure destroy_p_proc;

procedure Node999;
procedure Node998;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/
#define LVAR_Flags                      (4)
#define LVAR_Herebefore                 (5)
#define LVAR_Hostile                    (6)
#define LVAR_Personal_Enemy             (7)
#define LVAR_Asleep                     (8)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));

end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(101));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if (hostile) then begin
         self_attack_dude;
      end
   end
end

/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
   end
end

procedure destroy_p_proc begin
   inc_neutral_critter
end


/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   variable tmp;

   CHECK_LEVEL

   set_self_team(TEAM_DEN_PEASANT);

   if (map_first_run) then begin
      //do nothing
   end else begin
      tmp := random(1,4);
      if (tmp == 1) then begin
         reg_anim_clear(self_obj);
         reg_anim_begin();
            reg_anim_animate(self_obj,ANIM_fall_front,-1);
         reg_anim_end();
         set_local_var(LVAR_Asleep,1);
      end else begin
         if (is_critter_prone(self_obj)) then begin
            reg_anim_clear(self_obj);
            reg_anim_begin();
               reg_anim_animate(self_obj, ANIM_back_to_standing, -1);
            reg_anim_end();
         end
         set_local_var(LVAR_Asleep,0);
      end
   end
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if (local_var(LVAR_Asleep) == 1) then begin
         call Node006;
   end else
   if (local_var(LVAR_Herebefore) == 1) then begin
         call Node005;
   end else begin
      set_local_var(LVAR_Herebefore,1);
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
   end
end

procedure Node999 begin

end

procedure Node998 begin
   set_hostile;
end

procedure Node001 begin
   Reply(102);
   NOption(103,Node002,004);
end

procedure Node002 begin
   Reply(104);
   if (game_time == 1100) then
      NOption(106,Node003,004);
   else if (game_time >= 1030 and game_time < 1100) then
      NOption(116,Node003,004);
   else if (game_time > 1100 and game_time <= 1130) then
      NOption(117,Node003,004);
   NOption(105,Node003,004);
end

procedure Node003 begin
   Reply(107);
   if (global_var(GVAR_DEN_ORPHANAGE) >= 1) then
      NOption(108,Node004,004);
   else
      NOption(110,Node004,004);
end

procedure Node004 begin
   Reply(109);
   NOption(g_mstr(350),Node999,004);

end

procedure Node005 begin
   floater(random(114,115));
end

procedure Node006 begin
   floater(random(111,113));
end
