/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "dcaddct2"
#include "../headers/define.h"
#include "../headers/den.h"
#include "../headers/denres1.h"

#define NAME                    SCRIPT_DCADDCT2
#define TOWN_REP_VAR            GVAR_TOWN_REP_THE_DEN

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure destroy_p_proc;

procedure Node999;
procedure Node998;
procedure Node990;
procedure Node991;
procedure Node992;
procedure Node993;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/
#define LVAR_Flags                      (4)
#define LVAR_Herebefore                 (5)
#define LVAR_Hostile                    (6)
#define LVAR_Personal_Enemy             (7)
#define LVAR_Gave_Thanks                (8)
#define LVAR_Failed_To_Remove           (9)
#define LVAR_Main_Squatter              (10)

import variable squatter_object;
/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin

end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));

end


procedure description_p_proc begin
   script_overrides;
   if (self_is_male) then begin
      if (global_var(GVAR_DEN_ORPHANAGE) == 7) then
         display_msg(mstr(300));
      else
         display_msg(mstr(101));
   end else begin
      if (global_var(GVAR_DEN_ORPHANAGE) == 7) then
         display_msg(mstr(301));
      else
         display_msg(mstr(102));
   end
end


procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   squatter_object := self_obj;

   if (self_elevation == 1) then begin
      if (self_tile == 16124 or self_tile == 14518) then begin
         reg_anim_clear( self_obj );
         self_rotate(2);
      end
   end

   if ( (map_first_run) and (self_elevation == 0) ) then
      set_map_var(MVAR_Squater_Count,((map_var(MVAR_Squater_Count))+1));

   if ( (self_tile == 14722) or (self_tile == 14518) ) then begin
       set_local_var(LVAR_Main_Squatter,1);
   end

   set_self_team(TEAM_DEN_RES_ADDICTS);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
   squatter_object := self_obj;
end

procedure map_exit_p_proc begin
   if (global_var(GVAR_DEN_ORPHANAGE) == 4) then begin
      destroy_object(self_obj);
   end
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if (local_var(LVAR_Main_Squatter)) then begin
      if (local_var(LVAR_Gave_Thanks) == 1) then begin
         floater(400);
      end else if ( (global_var(GVAR_DEN_ORPHANAGE) == 4) ) then begin
         floater(500);
      end else if ( (global_var(GVAR_DEN_ORPHANAGE) == 5) or (global_var(GVAR_DEN_ORPHANAGE) == 6) ) then begin
         floater(120);
      end else if (global_var(GVAR_DEN_ORPHANAGE) == 7) then begin
         set_local_var(LVAR_Gave_Thanks,1);
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node008;
         gSay_End;
         end_dialogue;
      end
      else begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
         gSay_End;
         end_dialogue;
      end
   end else begin
      if (global_var(GVAR_DEN_ORPHANAGE) == 7) then begin
         floater(random(401,403));
      end else
         floater(random(200,203));
   end
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if ( (hostile) or (map_var(MVAR_Squaters_Unite) == 1) ) then begin
         attack(dude_obj);
      end else begin
         //wander code
      end
   end
end
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure destroy_p_proc begin
   inc_neutral_critter

   set_map_var(MVAR_Squater_Count,((map_var(MVAR_Squater_Count))-1));
   if ( (map_var(MVAR_Squater_Count) == 0) and (global_var(GVAR_DEN_ORPHANAGE) < 6)) then begin
      set_global_var(GVAR_DEN_ORPHANAGE,3);
      display_msg(mstr(600));
   end
end

procedure Node001 begin
   Reply(103);
   if (global_var(GVAR_DEN_ORPHANAGE) == 2) then
      NOption(104,Node002,004);
   NOption(115,Node999,004);
end

procedure Node002 begin
   Reply(105);
   GOption(106,Node003,004);
   BOption(116,Node990,004);
   NOption(117,Node999,004);
end

procedure Node003 begin
   Reply(107);
   NOption(108,Node990,004);

end

procedure Node990 begin
   if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,-5))) then
      call Node004;
   else
      call Node007;
end

procedure Node992 begin
   if (is_success(roll_vs_skill(dude_obj,SKILL_SPEECH,-5))) then
      call Node010;
   else
      call Node011;
end

procedure Node993 begin
   set_local_var(LVAR_Failed_To_Remove,1);
end

procedure Node004 begin
   Reply(110);
   if (has_skill(dude_obj,SKILL_SPEECH) > 65) then
      NOption(112,Node005,004);
   if (has_skill(dude_obj,SKILL_SPEECH) > 55) then
      NOption(350,Node992,004);
   NOption(111,Node006,004);
end

procedure Node005 begin
   Reply(114);
   NOption(g_mstr(350),Node999,004);
   set_global_var(GVAR_DEN_ORPHANAGE,5);
end

procedure Node006 begin
   Reply(113);
   BOption(g_mstr(350),Node991,004);
end

procedure Node007 begin
   Reply(109);
   NOption(360,Node993,004);
   BOption(361,Node991,004);
   //NOption(g_mstr(350),Node991,004);
end

procedure Node008 begin
   Reply(310);
   NOption(311,Node009,004);
end

procedure Node009 begin
   Reply(312);
   NOption(313,Node999,004);
end

procedure Node010 begin
   Reply(351);
   NOption(352,Node999,004);
   set_global_var(GVAR_DEN_ORPHANAGE,4);
   set_map_var(MVAR_Squater_Count,0);
end

procedure Node011 begin
   Reply(353);
   BOption(g_mstr(350),Node991,004);
end

procedure Node999 begin

end

procedure Node998 begin
   set_hostile;
end

procedure Node991 begin
   set_map_var(MVAR_Squaters_Unite,1);
end
