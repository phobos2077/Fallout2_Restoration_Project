/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location: Den
        Description:

        Log:

           Created: August 22, 1998

           Updated:
*/

/* Include Files */
#define SCRIPT_REALNAME "dcrebgrd"
#include "../headers/define.h"
#define NAME                    SCRIPT_DCREBGRD
#define TOWN_REPUTATION         GVAR_TOWN_REP_THE_DEN
#include "../headers/command.h"
#include "../headers/modreact.h"
#include "../headers/den.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node001;
procedure Node002;
procedure Node003;

import variable becky_guard_obj;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Flags                        (4)

#define set_becky_guard                                                                                                    \
         if (becky_guard_obj == 0) then begin                                                                              \
            becky_guard_obj := self_obj;                                                                                   \
         end else if (tile_distance_objs(self_obj, dude_obj) < tile_distance_objs(becky_guard_obj, dude_obj)) then begin   \
            becky_guard_obj := self_obj;                                                                                   \
         end

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

/* Local variables which do not need to be saved between map changes. */

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == timed_event_float) then begin
   end else if (fixed_param == timed_event_door_tamper) then begin
      self_attack_dude;
   end else if (fixed_param == timed_event_attack) then begin
      self_attack_dude;
   end else if (fixed_param == timed_event_thief) then begin
      call Node003;
      self_attack_dude;
   end
end

procedure map_enter_p_proc begin
   if (becky_dead) then begin
      destroy_object(self_obj);
   end else if (is_loading_game == false) then begin
      if (map_first_run) then begin
         set_self_team(TEAM_THE_DEN);
         set_self_ai(AI_TOUGH_GUARD);
      end
   end
end

procedure map_exit_p_proc begin
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if (hostile) then begin
         self_attack_dude;
      end set_becky_guard
   end else if (becky_guard_obj == self_obj) then begin
      becky_guard_obj := 0;
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
   end
end

procedure pickup_p_proc begin
   if ((source_obj == dude_obj) or (obj_in_party(source_obj))) then begin
      check_catch_thief
      if (caught_thief == false) then begin
         call Node998;
      end
   end
end

procedure talk_p_proc begin
   if (hostile) then begin
      call Node001;
   end else begin
      call Node002;
   end
   set_herebefore;
end

procedure destroy_p_proc begin
   if (becky_guard_obj == self_obj) then begin
      becky_guard_obj := 0;
   end
end

procedure look_at_p_proc begin
   script_overrides;
   display_mstr(100 + becky_known);
end

procedure description_p_proc begin
   script_overrides;
   display_mstr(150 + self_is_female);
   set_examined;
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   set_hostile;
end
procedure Node999 begin
end

procedure Node001 begin
   floater_rand(200,201);
   self_attack_dude;
end
procedure Node002 begin
   floater_rand(210,218);
end
procedure Node003 begin
   floater(230);
end
