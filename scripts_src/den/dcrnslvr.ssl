/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location: Den
        Description:

        Log:

           Created: August 22, 1998

           Updated:
*/

/* Include Files */
#define SCRIPT_REALNAME "dcrnslvr"
#include "../headers/define.h"
#define NAME                    SCRIPT_DCRNSLVR
#include "../headers/command.h"
#include "../headers/den.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure timed_event_p_proc;
procedure combat_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Flags                        (0)
#define LVAR_Type                         (1)

#define gave_club_bit                     bit_10
#define on_last_slave_run_bit             bit_11

#define gave_club                         lvar_bit(LVAR_Flags, gave_club_bit)
#define set_gave_club                     if (gave_club == false) then begin                    \
                                             arm_obj(self_obj, PID_CLUB, 1, 0, 0)               \
                                          end                                                   \
                                          set_lvar_bit_on(LVAR_Flags, gave_club_bit)

#define on_last_slave_run                 lvar_bit(LVAR_Flags, on_last_slave_run_bit)
#define set_on_last_slave_run             set_lvar_bit_on(LVAR_Flags, on_last_slave_run_bit)

#define give_slaver_weapon                the_weapon := random(1,4);                            \
                                          if (the_weapon == 1) then begin                       \
                                             arm_obj(self_obj, PID_10MM_PISTOL, 1, 0, 1)        \
                                          end else if (the_weapon == 2) then begin              \
                                             arm_obj(self_obj, PID_HUNTING_RIFLE, 1, 0, 1)      \
                                          end else if (the_weapon == 3) then begin              \
                                             arm_obj(self_obj, PID_SHOTGUN, 1, 0, 1)            \
                                          end else begin                                        \
                                             arm_obj(self_obj, PID_CATTLE_PROD, 1, 0, 0)        \
                                          end                                                   \
                                          the_weapon := random(1,4);                            \
                                          if (the_weapon == 1) then begin                       \
                                             give_pid_qty(self_obj, PID_SPIKED_KNUCKLES, 1)     \
                                          end else if (the_weapon == 2) then begin              \
                                             give_pid_qty(self_obj, PID_COMBAT_KNIFE, 1)        \
                                          end else begin                                        \
                                             give_pid_qty(self_obj, PID_KNIFE, 1)               \
                                          end

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

/* Local variables which do not need to be saved between map changes. */
import variable club_slave_object;
import variable slaver_1_obj;
import variable slaver_2_obj;

variable the_weapon;
variable temp_score;
variable set_attack_slave;
variable the_sound;

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == timed_event_float) then begin
      if ((combat_is_initialized == false) and (not (is_critter_dead(self_obj)))) then begin
         if (random(0,1)) then begin
            if (killed_slave_on_run == false) then begin
               call Node007;
            end else if (global_var(GVAR_HOSTILE_SLAVE_COUNT) > 0) then begin
               call Node008;
            end else if ((global_var(GVAR_SLAVES_LOST) + global_var(GVAR_SLAVERS_LOST)) == 0) then begin
               call Node012;
            end else begin
               temp_score := calc_slaving_score;
               if (temp_score >= slave_score_good) then begin
                  call Node011;
               end else if (temp_score <= slave_score_bad) then begin
                  call Node009;
               end else begin
                  call Node010;
               end
            end
         end
      end
      flush_add_timer_event_sec(self_obj, random(15, 30), timed_event_float);
   end else if (fixed_param == timed_event_wander) then begin
      if ((combat_is_initialized == false) and (not (is_critter_dead(self_obj)))) then begin
         if (hostile == false) then begin
            if (global_var(GVAR_HOSTILE_SLAVE_COUNT) > 0) then begin
               Follow_Dude(4,3)
            end else if (club_slave_object != 0) then begin
               if (gave_club == false) then begin
                  set_gave_club;
               end else
                  Run_Next_To_Obj_And_Face(club_slave_object)
               else if ((anim_busy(self_obj) == false) and (anim_busy(club_slave_object) == false)) then begin
                  if ((critter_state(club_slave_object) bwand DAM_KNOCKED_DOWN) == false) then begin
                     the_sound := sfx_build_char_name(self_obj, ANIM_throw_punch, snd_contact);
                     reg_anim_clear(self_obj);
                     reg_anim_begin();
                     reg_anim_play_sfx(self_obj, the_sound, 1);
                     reg_anim_animate(self_obj,ANIM_swing_anim,-1);
                     reg_anim_end();
                     flush_add_timer_event(club_slave_object, 8, timed_event_clubbed);
                  end else if (slave_tagged == false) then begin
                     set_slave_tagged;
                     use_obj(club_slave_object);
                  end
               end
            end
         end
      end
      flush_add_timer_event_sec(self_obj, random(1, 3), timed_event_wander);
   end
end

procedure combat_p_proc begin
   if (is_critter_dead(self_obj)) then begin
      script_overrides;
   end else if (fixed_param == COMBAT_SUBTYPE_TURN) then begin
      if (self_team == TEAM_PLAYER) then begin
         if (hostile_slavers) then begin
            set_self_team(TEAM_DEN_SLAVER);
            attack(dude_obj);
         end
      end
   end
end

procedure map_enter_p_proc begin
   if (on_last_slave_run) then begin
      destroy_object(self_obj);
   end else if (initialized == false) then begin
      set_initialized;
      off_attacked_slaver_on_run;
      set_local_var(LVAR_Type, random(0,2));
      give_slaver_weapon
      flush_add_timer_event_sec(self_obj, random(15, 30), timed_event_float);
      flush_add_timer_event_sec(self_obj, random(1, 3), timed_event_wander);
   end
end

procedure map_exit_p_proc begin
   set_on_last_slave_run;
   if (global_var(GVAR_HOSTILE_SLAVE_COUNT) > 0) then begin
      inc_global_var(GVAR_SLAVERS_LOST);
      set_abandon_slave_run;
   end
   if (personal_enemy) then begin
      set_attacked_slaver_on_run;
   end
end

procedure map_update_p_proc begin
   if ((slaver_1_obj != self_obj) and (slaver_2_obj != self_obj)) then begin
      if (slaver_1_obj == 0) then begin
         slaver_1_obj := self_obj;
      end else if (slaver_2_obj == 0) then begin
         slaver_2_obj := self_obj;
      end
   end
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if (hostile) then begin
         self_attack_dude;
      end
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_self_team(TEAM_DEN_SLAVER);
      set_personal_enemy;
      set_hostile_slavers;
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure talk_p_proc begin
   script_overrides;
   if (killed_slave_on_run == false) then begin
      call Node001;
   end else if (global_var(GVAR_HOSTILE_SLAVE_COUNT) > 0) then begin
      call Node002;
   end else if ((global_var(GVAR_SLAVES_LOST) + global_var(GVAR_SLAVERS_LOST)) == 0) then begin
      call Node006;
   end else begin
      temp_score := calc_slaving_score;
      if (temp_score >= slave_score_good) then begin
         call Node005;
      end else if (temp_score <= slave_score_bad) then begin
         call Node003;
      end else begin
         call Node004;
      end
   end
   flush_add_timer_event_sec(self_obj, random(15, 30), timed_event_float);
   set_herebefore;
end

procedure destroy_p_proc begin
   if (gave_club == false) then begin
      give_pid_qty(self_obj, PID_CLUB, 1)
   end
   set_lvar_bit_on(LVAR_Flags, gave_club_bit);
   if (slaver_1_obj == self_obj) then begin
      slaver_1_obj := 0;
   end else if (slaver_2_obj == self_obj) then begin
      slaver_2_obj := 0;
   end
   inc_global_var(GVAR_SLAVERS_LOST);
   inc_evil_critter
end

procedure look_at_p_proc begin
   script_overrides;
   display_mstr(100 + local_var(LVAR_Type));
end

procedure description_p_proc begin
   script_overrides;
   display_mstr(150 + local_var(LVAR_Type));
   set_examined;
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   set_hostile;
end
procedure Node999 begin
end

procedure Node001 begin
   floater_rand(225, 230);
end
procedure Node002 begin
   floater_rand(235, 238);
end
procedure Node003 begin
   floater_rand(245, 248);
end
procedure Node004 begin
   floater_rand(255, 257);
end
procedure Node005 begin
   floater_rand(265, 268);
end
procedure Node006 begin
   floater_rand(275, 278);
end
procedure Node007 begin
   floater_rand(285, 288);
end
procedure Node008 begin
   floater_rand(295, 298);
end
procedure Node009 begin
   floater_rand(305, 310);
end
procedure Node010 begin
   floater_rand(320, 324);
end
procedure Node011 begin
   floater_rand(325, 329);
end
procedure Node012 begin
   floater_rand(335, 339);
end
