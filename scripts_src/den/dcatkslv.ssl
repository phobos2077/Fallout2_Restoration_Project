/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location: Den
        Description:

        Log:

           Created: August 22, 1998

           Updated:
*/

/* Include Files */
#define SCRIPT_REALNAME "dcatkslv"
#include "../headers/define.h"
#define NAME                    SCRIPT_DCATKSLV
#include "../headers/command.h"
#include "../headers/den.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure timed_event_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node001;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Flags                        (0)
#define LVAR_Type                         (1)
#define LVAR_Home_Tile                    (2)

#define on_last_slave_run_bit             bit_11

#define on_last_slave_run                 lvar_bit(LVAR_Flags, on_last_slave_run_bit)
#define set_on_last_slave_run             set_lvar_bit_on(LVAR_Flags, on_last_slave_run_bit)

#define self_can_see_slaver(x)                                                        \
            obj_can_see_obj(self_obj, x) and (tile_distance_objs(x, self_obj) <       \
            tile_distance_objs(dude_obj, self_obj))

#define slave_kill_slaver(x)                                                          \
            if (x != 0) then begin                                                    \
               if (self_can_see_slaver(x)) then begin                                 \
                  ndebug("setting slave to attack slaver");                        \
                  set_attack := x;                                                    \
                  attack(x);                                                          \
               end                                                                    \
            end

#define give_slave_weapon(the_slave)                                                  \
            if (self_elevation != 2) then begin                                       \
               if (random(0,1)) then begin                                            \
                  arm_obj(the_slave, PID_SPEAR, 1, 0, 0)                              \
               end else begin                                                         \
                  arm_obj(the_slave, PID_KNIFE, 1, 0, 0)                              \
               end                                                                    \
            end else begin                                                            \
               temp := random(1, 4);                                                  \
               if ((temp == 1) and (self_fid == FID_NFBRLP))then begin                \
                  arm_obj(the_slave, PID_10MM_PISTOL, 1, 0, 1)                        \
               end else if ((temp == 2) and (self_fid != FID_NFPEAS)) then begin      \
                  arm_obj(the_slave, PID_HUNTING_RIFLE, 1, 0, 1)                      \
               end else if ((temp == 3) and (self_fid != FID_NFPEAS)) then begin      \
                  arm_obj(the_slave, PID_SHOTGUN, 1, 0, 1)                            \
               end else if ((temp == 4) and (self_fid != FID_NFBRLP)) then begin      \
                  arm_obj(the_slave, PID_COMBAT_KNIFE, 1, 0, 1)                       \
               end else if (self_fid != FID_NFBRLP) then begin                        \
                  arm_obj(the_slave, PID_KNIFE, 1, 0, 1)                              \
               end else begin                                                         \
                  arm_obj(the_slave, PID_SPIKED_KNUCKLES, 1, 0, 1)                    \
               end                                                                    \
            end

variable temp;
variable set_attack;

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

import variable slaver_1_obj;
import variable slaver_2_obj;

/* Local variables which do not need to be saved between map changes. */

procedure start begin
end

procedure combat_p_proc begin
   if (set_attack == 0) then begin
      slave_kill_slaver(slaver_1_obj)
      if (set_attack == 0) then begin
         slave_kill_slaver(slaver_2_obj)
      end
   end else if ((set_attack != slaver_1_obj) and (set_attack != slaver_2_obj)) then begin
      set_attack := 0;
   end
end

procedure timed_event_p_proc begin
   if (fixed_param == timed_event_float) then begin
      if (combat_is_initialized == false) then begin
         if (random(1,3) == 1) then begin
            if (slave_is_primitive) then begin
               floater_rand(245, 250);
            end else begin
               floater_rand(260, 265);
            end
         end
      end
      flush_add_timer_event_sec(self_obj, random(10, 45), timed_event_float);
   end else if (fixed_param == timed_event_wander) then begin
      if (combat_is_initialized == false) then begin
         if (random(1,3) == 1) then begin
            if (local_var(LVAR_Home_Tile) == 0) then begin
               set_local_var(LVAR_Home_Tile, self_tile);
            end
            if (tile_distance(self_tile, local_var(LVAR_Home_Tile)) > slave_leash_length) then begin
               self_walk_to_tile(tile_num_in_direction(self_tile, (self_cur_rot + random(5,7)) % 6, random(5, 10)));
            end else begin
               self_walk_to_tile(tile_num_in_direction(self_tile, rotation_to_tile(self_tile, local_var(LVAR_Home_Tile)), random(5, 10)));
            end
         end
      end
      flush_add_timer_event_sec(self_obj, random(15, 60), timed_event_wander);
   end
end

procedure map_enter_p_proc begin
   if (on_last_slave_run) then begin
      destroy_object(self_obj);
   end else if (initialized == false) then begin
      set_initialized;
      set_local_var(LVAR_Type, random(0,2));
      give_slave_weapon(self_obj)
   end
   if (is_loading_game == false) then begin
      flush_add_timer_event_sec(self_obj, random(10, 45), timed_event_float);
      flush_add_timer_event_sec(self_obj, random(15, 60), timed_event_wander);
   end
end

procedure map_exit_p_proc begin
   set_on_last_slave_run;
end

procedure map_update_p_proc begin
   //ndebug("hostile slave on elevation + "+self_elevation);
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if (slave_is_primitive) then begin
         floater_rand(300, 308);
      end else begin
         floater_rand(350, 358);
      end
      self_attack_dude;
   end else if (dude_spotted_on_slave_run) then begin
      Follow_Dude_Run_Only(1,1)
   end else if (set_attack == 0) then begin
      slave_kill_slaver(slaver_1_obj)
      if (set_attack == 0) then begin
         slave_kill_slaver(slaver_2_obj)
      end
   end else if ((set_attack != slaver_1_obj) and (set_attack != slaver_2_obj)) then begin
      set_attack := 0;
   end
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure talk_p_proc begin
   call Node001;
   set_herebefore;
end

procedure destroy_p_proc begin
   dec_global_var(GVAR_HOSTILE_SLAVE_COUNT);
   set_killed_slave_on_run;
   ndebug("current hostile slave count is " + global_var(GVAR_HOSTILE_SLAVE_COUNT));
   inc_good_critter
end

procedure look_at_p_proc begin
   script_overrides;
   if (slave_is_primitive) then begin
      display_mstr(100 + self_is_female);
   end else begin
      display_mstr(200 + (10 * self_is_female) + local_var(LVAR_Type));
   end
end

procedure description_p_proc begin
   script_overrides;
   if (slave_is_primitive) then begin
      display_mstr(100 + self_is_female);
   end else begin
      display_mstr(200 + (10 * self_is_female) + local_var(LVAR_Type));
   end
   set_examined;
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   set_hostile;
end
procedure Node999 begin
end

procedure Node001 begin
   // ### floater_rand(,);
end
