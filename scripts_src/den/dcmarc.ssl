/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name:
        Location: Den
        Description:

        Log:

           Created: August 22, 1998

           Updated:
*/

/* Include Files */
#define SCRIPT_REALNAME "dcmarc"
#include "../headers/define.h"
#define NAME                    SCRIPT_DCMARC
#define TOWN_REPUTATION         GVAR_TOWN_REP_THE_DEN
#include "../headers/command.h"
#include "../headers/modreact.h"
#include "../headers/den.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_exit_p_proc;
procedure timed_event_p_proc;
procedure map_update_p_proc;
procedure combat_p_proc;
procedure push_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;

/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Flags                        (4)
#define LVAR_Home_Tile                    (5)
#define LVAR_Home_Rotation                (6)

#define self_gang                         gang_1

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */

/* Local variables which do not need to be saved between map changes. */
import variable gang_1_member_1;
import variable gang_1_member_2;
import variable gang_1_member_3;
import variable gang_1_member_4;
import variable gang_1_member_5;
import variable gang_2_member_1;
import variable gang_2_member_2;
import variable gang_2_member_3;
import variable gang_2_member_4;
import variable gang_2_member_5;
import variable church_door_obj;

procedure start begin
end

procedure push_p_proc begin
   gang_member_push_proc
end

procedure timed_event_p_proc begin
   if (fixed_param == timed_event_float) then begin
   end else if (fixed_param == timed_event_door_tamper) then begin
      if (tyler_dead == false) then begin
         call Node001;
      end
      call Node998;
   end
end

procedure map_update_p_proc begin
   gang_map_update_p_proc
end

procedure map_enter_p_proc begin
   gang_member_map_enter

   ndebug("tyler count: " + global_var(GVAR_DEN_GANG_1_COUNT));
   ndebug("lara count: " + global_var(GVAR_DEN_GANG_2_COUNT));
end

procedure combat_p_proc begin
   gang_combat_p_proc
end

procedure map_exit_p_proc begin
end

procedure critter_p_proc begin
   gang_critter_p_proc
end

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
      gang_member_damage
   end
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure talk_p_proc begin
   if ((hostile) or (gang_hostile)) then begin
      call Node002;
   end else if (gangwar(state_gangwar_1won)) then begin
      call Node003;
   end else if (gang_trap(state_gang_trap_set)) then begin
      call Node005;
   end else if (gang_trap(state_gang_trap_noshow)) then begin
      call Node006;
   end else begin
      call Node004;
   end
   set_herebefore;
end

procedure destroy_p_proc begin
   dest_gang_member;
   ndebug("count: " + (global_var(GVAR_DEN_GANG_1_COUNT)));
end

procedure look_at_p_proc begin
   script_overrides;
   display_mstr(100 + herebefore);
end

procedure description_p_proc begin
   script_overrides;
   display_mstr(102);
   set_examined;
end

procedure use_skill_on_p_proc begin
end

procedure Node998 begin
   set_hostile;
end
procedure Node999 begin
end

procedure Node001 begin
   floater(150);
end
procedure Node002 begin
   floater(200);
end
procedure Node003 begin
   // added by killap - expansion
   if (gang_trap(state_gang_trap_no)) then
      floater_rand(226, 230);
   else
      floater_rand(225, 230);
end
procedure Node004 begin
   floater_rand(251 - dude_is_female, 252 + dude_is_male);
end
procedure Node005 begin
   floater_rand(255, 259);
end
procedure Node006 begin
   floater_rand(260, 264);
end