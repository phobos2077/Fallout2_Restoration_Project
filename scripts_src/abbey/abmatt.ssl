/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "abmatt"
#include "../headers/define.h"
#include "../headers/abbey.h"

#define NAME                    SCRIPT_ABMATT
#define TOWN_REP_VAR            GVAR_TOWN_REP_ABBEY
#define floater(x)		float_msg(self_obj, mstr(x),FLOAT_MSG_BLUE)

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure timed_event_p_proc;
procedure talk_p_proc;

procedure Node999;
procedure Node998;
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure preach;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/
#define LVAR_Flags                      (0)
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/
variable line := 0;
variable speech := 1;
variable speech_end := 999;
variable first_time := 0;

procedure start begin
end

procedure timed_event_p_proc begin
     if (fixed_param == speech) then begin
       if (line == 0) then
          line := 1;
       call preach;
     end else if (fixed_param == speech_end) then begin
       set_map_var(MVAR_Matt_Speeches,0);
       add_timer_event(self_obj,game_ticks(random(500,800)),speech);
     end
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if(first_time == 0) then begin
         first_time := 1;
         rm_fixed_timer_event(self_obj, speech);
         add_timer_event(self_obj,game_ticks(0),speech);
      end
   end

   if ( ( (global_var(GVAR_TOWN_REP_ABBEY) == -30) or (hostile) ) and (self_can_see_dude)) then begin
      attack(dude_obj);
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      call Node998;
   end
end

procedure destroy_p_proc
begin
 inc_good_critter
end
/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/


procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end


procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end



procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
      if (global_var(GVAR_TOWN_REP_ABBEY) != -30) then
         set_global_var(GVAR_TOWN_REP_ABBEY, -30);
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   set_self_team(TEAM_ABBEY);
   add_timer_event(self_obj,game_ticks(random(15,20)),speech);
   set_map_var(MVAR_Matt_Speeches,1);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin


   start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           if (local_var(LVAR_Herebefore) == 0) then
               call Node001;
           else
               call Node007;
       gSay_End;
   end_dialogue;
   set_local_var(LVAR_Herebefore,1);
end

procedure Node999 begin
end

procedure Node998 begin
  set_global_var(GVAR_TOWN_REP_ABBEY, -30);
end

procedure Node001 begin
   Reply(300);
   //NOption(301,Node003,4);

   NOption(mstr(301) + dude_name + mstr(302),Node002,4);
   NOption(303,Node999,4);
end

procedure Node002 begin
   Reply(400);
   NOption(401,Node003,4);
   NOption(402,Node999,4);
end

procedure Node003 begin
   Reply(500);
   NOption(501,Node004,4);
   NOption(502,Node006,4);
   NOption(503,Node999,4);
end

procedure Node004 begin
   Reply(600);
   NOption(601,Node005,4);
end

procedure Node005 begin
   Reply(602);
   NOption(603,Node003,4);
   NOption(604,Node999,4);
end

procedure Node006 begin
   Reply(700);
   NOption(701,Node003,4);
end

procedure Node007 begin
    Reply(mstr(800) + dude_name + mstr(801));
    NOption(802,Node003,4);
    NOption(803,Node999,4);
end

procedure preach begin
   if (line == 1) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(200);
      line := 2;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 2) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(201);
      line := 3;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 3) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(202);
      line := 4;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 4) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(203);
      line := 5;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 5) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(204);
      line := 6;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 6) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(205);
      line := 7;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 7) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(206);
      line := 8;
      add_timer_event(self_obj,game_ticks(9),speech);
   end else if (line == 8) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(207);
      line := 9;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 9) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(208);
      line := 10;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 10) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(209);
      line := 11;
     add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 11)  then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(210);
      line := 12;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 12) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(211);
      line := 13;
      add_timer_event(self_obj,game_ticks(8),speech);
   end else if (line == 13) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(212);
      line := 14;
      add_timer_event(self_obj,game_ticks(6),speech);
   end else if (line == 14) then begin
      rm_fixed_timer_event(self_obj, speech);
      floater(213);
      line := 1;
      add_timer_event(self_obj,game_ticks(6),speech_end);
   end
end
