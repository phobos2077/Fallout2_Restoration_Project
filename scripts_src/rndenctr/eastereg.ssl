/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "eastereg"
#include "../headers/define.h"

#define NAME                    SCRIPT_EASTEREG

#include "../headers/command.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;


procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;
procedure Node023;
procedure Node024;
procedure Node025b;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node029;
procedure Node030;
procedure Node031;
procedure Node032;
procedure Node033;
procedure Node034;
procedure Node034b;
procedure Node035;
procedure Node036;
procedure Node037;

procedure Node999;
procedure Node990;
procedure Node991;
procedure Node992;


/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_MIB88_TALKED_ONCE               (4)
#define LVAR_IVAN_TALKED_ONCE                (5)
#define LVAR_CONTINUUM_TALKED_ONCE           (6)
#define LVAR_DAREK_TALKED_ONCE               (7)
#define LVAR_JOTISZ_TALKED_ONCE              (8)
#define LVAR_QWERTY_TALKED_ONCE              (9)
#define LVAR_CPARKS_TALKED_ONCE              (10)
#define LVAR_JOSAN12_TALKED_ONCE             (11)
#define LVAR_KILLAP_TALKED_ONCE              (12)
#define LVAR_TIMESLIP_TALKED_ONCE            (13)
#define LVAR_SKYNET_TALKED_ONCE              (14)
#define LVAR_MORTICIA_TALKED_ONCE            (15)
#define LVAR_KANHEF_TALKED_ONCE              (16)
#define LVAR_HAWKEYE_TALKED_ONCE             (17)
#define LVAR_DRAVEAN_TALKED_ONCE             (18)
#define LVAR_WOLNA_TALKED_ONCE               (19)
#define LVAR_ENCINODUDE_TALKED_ONCE          (20)
#define LVAR_MINIGUNJIM_TALKED_ONCE          (21)
#define LVAR_BOFAST_TALKED_ONCE              (22)
#define LVAR_PIXOTE_TALKED_ONCE              (23)
#define LVAR_MASH_TALKED_ONCE                (24)
#define LVAR_M_GRIZZLY_TALKED_ONCE           (25)
#define LVAR_XIL_TALKED_ONCE                 (26)
#define LVAR_PER_TALKED_ONCE                 (27)
#define LVAR_MASSES_TALKED_ONCE              (28)

#define LVAR_GAVE_LIGHT_SABER                (30)

#define MIB88_TILE      (18316)
#define IVAN_TILE       (18709)
#define CONTINUUM_TILE  (18707)
#define DAREK_TILE      (19114)
#define JOTISZ_TILE     (20122)
#define QWERTY_TILE     (19511)
#define CPARKS_TILE     (19911)
#define JOSAN12_TILE    (19912)
#define KILLAP_TILE     (20512)
#define TIMESLIP_TILE   (19317)
#define SKYNET_TILE     (20915)
#define MORTICIA_TILE   (20520)
#define KANHEF_TILE     (20918)
#define HAWKEYE_TILE    (19892)
#define DRAVEAN_TILE    (18128)
#define WOLNA_TILE      (21336)
#define ENCINODUDE_TILE (22326)
#define MINIGUNJIM_TILE (22917)
#define BOFAST_TILE     (20505)

#define PIXOTE_TILE     (19327)
#define MASH_TILE       (18901)
#define M_GRIZZLY_TILE  (18521)
#define XIL_TILE        (19708)
#define PER_TILE        (22320)
#define MASSES_1_TILE   (22134)
#define MASSES_2_TILE   (22133)
#define MASSES_3_TILE   (21932)
#define MASSES_4_TILE   (22131)
#define MASSES_5_TILE   (22132)


/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

import variable chris_obj;

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin

   if (self_tile == CPARKS_TILE) then
      chris_obj := self_obj;

end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
   if (self_tile == PER_TILE) then begin
      script_overrides;
      display_msg(mstr(2410));
   end
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   if (self_tile == MIB88_TILE) then
      display_msg(mstr(100));
   else if (self_tile == IVAN_TILE) then
      display_msg(mstr(200));
   else if (self_tile == CONTINUUM_TILE) then
      display_msg(mstr(300));
   else if (self_tile == DAREK_TILE) then
      display_msg(mstr(400));
   else if (self_tile == JOTISZ_TILE) then
      display_msg(mstr(500));
   else if (self_tile == QWERTY_TILE) then
      display_msg(mstr(600));
   else if (self_tile == CPARKS_TILE) then
      display_msg(mstr(700));
   else if (self_tile == JOSAN12_TILE) then
      display_msg(mstr(800));
   else if (self_tile == KILLAP_TILE) then
      display_msg(mstr(900));
   else if (self_tile == TIMESLIP_TILE) then
      display_msg(mstr(1000));
   else if (self_tile == SKYNET_TILE) then
      display_msg(mstr(1100));
   else if (self_tile == MORTICIA_TILE) then
      display_msg(mstr(1200));
   else if (self_tile == KANHEF_TILE) then
      display_msg(mstr(1300));
   else if (self_tile == HAWKEYE_TILE) then
      display_msg(mstr(1400));
   else if (self_tile == DRAVEAN_TILE) then
      display_msg(mstr(1500));
   else if (self_tile == WOLNA_TILE) then
      display_msg(mstr(1600));
   else if (self_tile == ENCINODUDE_TILE) then
      display_msg(mstr(1700));
   else if (self_tile == MINIGUNJIM_TILE) then
      display_msg(mstr(1800));
   else if (self_tile == BOFAST_TILE) then
      display_msg(mstr(1900));
   else if (self_tile == PIXOTE_TILE) then
      display_msg(mstr(2000));
   else if (self_tile == MASH_TILE) then
      display_msg(mstr(2100));
   else if (self_tile == M_GRIZZLY_TILE) then
      display_msg(mstr(2200));
   else if (self_tile == XIL_TILE) then
      display_msg(mstr(2300));
   else if (self_tile == PER_TILE) then
      display_msg(mstr(2400));
   else if (self_tile == MASSES_1_TILE or self_tile == MASSES_2_TILE or self_tile == MASSES_3_TILE or
   self_tile == MASSES_4_TILE or self_tile == MASSES_5_TILE) then
      display_msg(mstr(2500));

end


procedure description_p_proc begin
   script_overrides;
   if (self_tile == MIB88_TILE) then
      display_msg(mstr(101));
   else if (self_tile == IVAN_TILE) then
      display_msg(mstr(201));
   else if (self_tile == CONTINUUM_TILE) then
      display_msg(mstr(301));
   else if (self_tile == DAREK_TILE) then
      display_msg(mstr(401));
   else if (self_tile == JOTISZ_TILE) then
      display_msg(mstr(501));
   else if (self_tile == QWERTY_TILE) then
      display_msg(mstr(601));
   else if (self_tile == CPARKS_TILE) then
      display_msg(mstr(701));
   else if (self_tile == JOSAN12_TILE) then
      display_msg(mstr(801));
   else if (self_tile == KILLAP_TILE) then
      display_msg(mstr(901));
   else if (self_tile == TIMESLIP_TILE) then
      display_msg(mstr(1001));
   else if (self_tile == SKYNET_TILE) then
      display_msg(mstr(1101));
   else if (self_tile == MORTICIA_TILE) then
      display_msg(mstr(1201));
   else if (self_tile == KANHEF_TILE) then
      display_msg(mstr(1301));
   else if (self_tile == HAWKEYE_TILE) then
      display_msg(mstr(1401));
   else if (self_tile == DRAVEAN_TILE) then
      display_msg(mstr(1501));
   else if (self_tile == WOLNA_TILE) then
      display_msg(mstr(1601));
   else if (self_tile == ENCINODUDE_TILE) then
      display_msg(mstr(1701));
   else if (self_tile == MINIGUNJIM_TILE) then
      display_msg(mstr(1801));
   else if (self_tile == BOFAST_TILE) then
      display_msg(mstr(1901));
   else if (self_tile == PIXOTE_TILE) then
      display_msg(mstr(2001));
   else if (self_tile == MASH_TILE) then
      display_msg(mstr(2101));
   else if (self_tile == M_GRIZZLY_TILE) then
      display_msg(mstr(2201));
   else if (self_tile == XIL_TILE) then
      display_msg(mstr(2301));
   else if (self_tile == PER_TILE) then
      display_msg(mstr(2401));
   else if (self_tile == MASSES_1_TILE or self_tile == MASSES_2_TILE or self_tile == MASSES_3_TILE or
   self_tile == MASSES_4_TILE or self_tile == MASSES_5_TILE) then
      display_msg(mstr(2501));
end



procedure use_skill_on_p_proc begin
end


procedure critter_p_proc begin
   if (combat_is_initialized) then begin
      terminate_combat;
      display_msg(mstr(5000));
   end
end

procedure use_obj_on_p_proc begin
end


/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (combat_is_initialized) then begin
      terminate_combat;
      display_msg(mstr(5000));
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin

end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
   if (self_tile == CPARKS_TILE) then
      chris_obj := self_obj;
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if (self_tile == MIB88_TILE) then begin
      display_msg(mstr(110));
   end else if (self_tile == IVAN_TILE) then begin
      if ( (has_skill(dude_obj, SKILL_ENERGY_WEAPONS) > 100) and (local_var(LVAR_IVAN_TALKED_ONCE) == 0) ) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
         gSay_End;
         end_dialogue;
      end else begin
         if (local_var(LVAR_IVAN_TALKED_ONCE) < 2) then begin
            floater(211);
            set_local_var(LVAR_IVAN_TALKED_ONCE,2);
         end else if (local_var(LVAR_IVAN_TALKED_ONCE) == 2) then begin
            floater(212);
            set_local_var(LVAR_IVAN_TALKED_ONCE,3);
         end else begin
            floater(random(213,215));
         end
      end
   end else if (self_tile == CONTINUUM_TILE) then begin
      variable conti;
      conti := random(310,313);
      floater(conti);
      if (conti == 310) then
         float_msg(chris_obj, mstr(315), FLOAT_MSG_GREEN);
      else if (conti == 311) then
         float_msg(chris_obj, mstr(316), FLOAT_MSG_GREEN);
      else if (conti == 312) then
         float_msg(chris_obj, mstr(317), FLOAT_MSG_GREEN);
      else if (conti == 313) then
         float_msg(chris_obj, mstr(318), FLOAT_MSG_GREEN);
      else if (conti == 314) then
         float_msg(chris_obj, mstr(319), FLOAT_MSG_GREEN);
   end else if (self_tile == DAREK_TILE) then begin
      if (local_var(LVAR_DAREK_TALKED_ONCE) == 0) then begin
         set_local_var(LVAR_DAREK_TALKED_ONCE,1);
         floater(410);
      end else begin
         floater(random(411,414));
      end
   end else if (self_tile == JOTISZ_TILE) then begin
      if (local_var(JOTISZ_TILE) == 0) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node002;
         gSay_End;
         end_dialogue;
      end else begin
         floater(random(512,514));
      end
   end else if (self_tile == QWERTY_TILE) then begin
      floater(random(610,613));
   end else if (self_tile == CPARKS_TILE) then begin
      if (local_var(LVAR_CPARKS_TALKED_ONCE) == 0) then begin
         floater(710);
         set_local_var(LVAR_CPARKS_TALKED_ONCE,1);
      end else if (local_var(LVAR_CPARKS_TALKED_ONCE) == 1) then begin
         floater(711);
         set_local_var(LVAR_CPARKS_TALKED_ONCE,2);
      end else begin
         floater(712);
      end
   end else if (self_tile == JOSAN12_TILE) then begin
      if (local_var(LVAR_JOSAN12_TALKED_ONCE) == 0) then begin
         set_local_var(LVAR_JOSAN12_TALKED_ONCE,1);
         floater(810);
      end else begin
         floater(random(811,814));
      end
   end else if (self_tile == KILLAP_TILE) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node003;
      gSay_End;
      end_dialogue;
   end else if (self_tile == TIMESLIP_TILE) then begin
      if (local_var(LVAR_TIMESLIP_TALKED_ONCE) == 2) then begin
         floater(1046);
      end else if (local_var(LVAR_GAVE_LIGHT_SABER) == 1) then begin
         floater(1045);
      end else begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node013;
         gSay_End;
         end_dialogue;
      end
   end else if (self_tile == SKYNET_TILE) then begin
      if (local_var(LVAR_SKYNET_TALKED_ONCE) == 0) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node020;
         gSay_End;
         end_dialogue;
      end else begin
         floater(random(1138,1139));
      end
   end else if (self_tile == MORTICIA_TILE) then begin
      if (local_var(LVAR_MORTICIA_TALKED_ONCE) == 0) then begin
         set_local_var(LVAR_MORTICIA_TALKED_ONCE,1);
         floater(1210);
      end else begin
         floater(random(1211,1213));
      end
   end else if (self_tile == KANHEF_TILE) then begin
      if (local_var(LVAR_KANHEF_TALKED_ONCE) == 0) then begin
         set_local_var(LVAR_KANHEF_TALKED_ONCE,1);
         floater(1310);
      end else begin
         floater(random(1311,1313));
      end
   end else if (self_tile == HAWKEYE_TILE) then begin
      if (local_var(LVAR_HAWKEYE_TALKED_ONCE) == 0) then begin
         set_local_var(LVAR_HAWKEYE_TALKED_ONCE,1);
         floater(1410);
      end else if (local_var(LVAR_HAWKEYE_TALKED_ONCE) == 1) then begin
         set_local_var(LVAR_HAWKEYE_TALKED_ONCE,2);
         floater(1411);
      end else begin
         floater(random(1412,1413));
      end
   end else if (self_tile == WOLNA_TILE) then begin
      if (local_var(LVAR_WOLNA_TALKED_ONCE) == 0) then begin
         set_local_var(LVAR_WOLNA_TALKED_ONCE,1);
         floater(1510);
      end else begin
         floater(random(1511,1514));
      end
   end else if (self_tile == DRAVEAN_TILE) then begin
      if (local_var(LVAR_DRAVEAN_TALKED_ONCE) == 0) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node024;
         gSay_End;
         end_dialogue;
      end else begin
         if (Dex_In_Party) then begin
            floater(random(1670,1672));
         end else begin
            floater(random(1672,1673));
         end
      end
   end else if (self_tile == ENCINODUDE_TILE) then begin
      if (Kitsune_In_Party) then begin
         floater(random(1710,1712));
      end else begin
         floater(random(1713,1714));
      end
   end else if (self_tile == MINIGUNJIM_TILE) then begin
      if (Cat_Jules_In_Party) then begin
         floater(random(1810,1811));
      end else begin
         floater(1812);
      end
   end else if (self_tile == BOFAST_TILE) then begin
      if (raiders_scout_left) then begin
         floater(1910);
      end else begin
         floater(1911);
      end
   end else if (self_tile == PIXOTE_TILE) then begin
      if (local_var(LVAR_PIXOTE_TALKED_ONCE) == 0) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node029;
         gSay_End;
         end_dialogue;
      end else begin
         floater(random(2060,2061));
      end
   end else if (self_tile == MASH_TILE) then begin
      if (local_var(LVAR_MASH_TALKED_ONCE) == 0) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node034;
         gSay_End;
         end_dialogue;
      end else begin
         floater(random(2150,2151));
      end
   end else if (self_tile == M_GRIZZLY_TILE) then begin
      if (local_var(LVAR_M_GRIZZLY_TALKED_ONCE) == 0) then begin
         set_local_var(LVAR_M_GRIZZLY_TALKED_ONCE,1);
         floater(2210);
      end else begin
         floater(random(2211,2212));
      end
   end else if (self_tile == XIL_TILE) then begin
      floater(random(2310,2310+(global_var(GVAR_CHAR_MOD) == HAIR)));
   //end else if (self_tile == PER_TILE) then begin --must be done through use_p_proc
   //   display_msg(2410);
   end else if (self_tile == MASSES_1_TILE or self_tile == MASSES_2_TILE or self_tile == MASSES_3_TILE or
   self_tile == MASSES_4_TILE or self_tile == MASSES_5_TILE) then begin
      display_msg(mstr(2500));
   end

end

//Ivan
procedure Node001 begin
   variable blaster;
   set_local_var(LVAR_IVAN_TALKED_ONCE,1);
   blaster:=create_object(PID_BLASTER,0,0);
   add_obj_to_inven(dude_obj,blaster);
   Reply(210);
   NOption(g_mstr(350),Node999,004);
end

//Jotisz
procedure Node002 begin
   set_local_var(LVAR_JOTISZ_TALKED_ONCE,1);
   Reply(511 - Sulik_In_Party);
   NOption(g_mstr(350),Node999,004);
end

//killap
procedure Node003 begin
   if (local_var(LVAR_KILLAP_TALKED_ONCE) == 0) then
      set_local_var(LVAR_KILLAP_TALKED_ONCE,1);

   Reply(mstr(910) + dude_name + mstr(911));
   if (local_var(LVAR_KILLAP_TALKED_ONCE) < 2) then
      NOption(912,Node004,004);
   NOption(913,Node005,004);
   NOption(914,Node006,004);
end

procedure Node004 begin
   Reply(920);
   NOption(921,Node991,004);
   NOption(922,Node990,004);
   BOption(923,Node990,004);
end

procedure Node005 begin
   Reply(930);
   NOption(931,Node012,004);
   NOption(932,Node011,004);
end

procedure Node006 begin
   Reply(940);
   NOption(941,Node990,004);
end

procedure Node007 begin
   set_local_var(LVAR_KILLAP_TALKED_ONCE,2);
   give_xp(10000);
   Reply(950);
   NOption(g_mstr(350),Node999,004);
end

procedure Node008 begin
   Reply(951);
   NOption(g_mstr(350),Node999,004);
end

procedure Node009 begin
   variable lightsaber;
   lightsaber:=create_object(PID_LIGHTSABER_GREEN,0,0);
   add_obj_to_inven(dude_obj,lightsaber);
   set_local_var(LVAR_GAVE_LIGHT_SABER,1);
   Reply(dude_name + mstr(962));
   NOption(963,Node999,004);
   NOption(964,Node999,004);
end

procedure Node010 begin
   Reply(mstr(960) + dude_name + mstr(961));
   NOption(g_mstr(350),Node999,004);
end

procedure Node011 begin
   Reply(935);
   if (local_var(LVAR_KILLAP_TALKED_ONCE) < 2) then
      NOption(937,Node004,004);
   NOption(938,Node006,004);
end

procedure Node012 begin
   Reply(936);
   if (local_var(LVAR_KILLAP_TALKED_ONCE) < 2) then
      NOption(937,Node004,004);
   NOption(938,Node006,004);
end

procedure Node999 begin

end

procedure Node990 begin
   if ( (check_general_rep > 1000) and (local_var(LVAR_GAVE_LIGHT_SABER) == 0) ) then
      call Node009;
   else
      call Node010;
end

procedure Node991 begin
   if (dude_level > 20) then
      call Node007;
   else
      call Node008;
end

procedure Node992 begin
   if ( (check_general_rep < -1000) and (local_var(LVAR_GAVE_LIGHT_SABER) == 0) ) then
      call Node017;
   else
      call Node016;
end

//Timeslip
procedure Node013 begin
   Reply(1010);
   NOption(1011,Node014,004);
   NOption(1012,Node015,004);
   NOption(1013,Node992,004);
end

procedure Node014 begin
   Reply(1020);
   NOption(1022,Node992,004);
   NOption(1023,Node992,004);
   NOption(1024,Node992,004);
end

procedure Node015 begin
   Reply(1021);
   NOption(1022,Node992,004);
   NOption(1023,Node992,004);
   NOption(1024,Node992,004);
end

procedure Node016 begin
   set_local_var(LVAR_TIMESLIP_TALKED_ONCE,2);
   Reply(1030);
   NOption(g_mstr(350),Node999,004);
end

procedure Node017 begin
   Reply(1040);
   NOption(1041,Node018,004);
   NOption(1042,Node016,004);
end

procedure Node018 begin
   variable lightsaber;
   lightsaber:=create_object(PID_LIGHTSABER_RED,0,0);
   add_obj_to_inven(dude_obj,lightsaber);
   set_local_var(LVAR_GAVE_LIGHT_SABER,1);
   Reply(1050);
   NOption(1051,Node999,004);
   NOption(1052,Node999,004);
   NOption(1053,Node019,004);
end

procedure Node019 begin
   Reply(1060);
   NOption(g_mstr(350),Node999,004);
end

//Skynet
procedure Node020 begin
   set_local_var(LVAR_SKYNET_TALKED_ONCE,1);
   Reply(1110);
   NOption(1111,Node021,004);
   NOption(1112,Node021,004);
   NOption(1113,Node999,004);
end

procedure Node021 begin
   Reply(1120);
   if (abbey_visit) then begin
      NOption(1121,Node022,004);
      NOption(1122,Node022,004);
      NOption(1123,Node022,004);
   end else begin
      NOption(1124,Node023,004);
   end

   NOption(1125,Node999,004);
end

procedure NOde022 begin
   Reply(1130);
   NOption(1131,Node999,004);
   BOption(1132,Node999,004);
end

procedure Node023 begin
   mark_abbey_on_map
   Reply(1135);
   NOption(1131,Node999,004);
   BOption(1132,Node999,004);
end

procedure Node024 begin
   set_local_var(LVAR_DRAVEAN_TALKED_ONCE,1);
   Reply(1610);
   NOption(1611,Node025,004);
   NOption(1612,Node999,004);
end

procedure Node025 begin
   if (Dex_In_Party) then begin
      Reply(1630);
      NOption(1631,Node025b,004);
   end else begin
      Reply(1620);
      NOption(1621,Node025b,004);
   end
end

procedure Node025b begin
   if self_rep_negative then
      call Node026;
   else
      call Node027;
end

procedure Node026 begin
   Reply(1640);
   NOption(1641,Node028,004);
end

procedure Node027 begin
   Reply(1650);
   NOption(1651,Node028,004);
end

procedure Node028 begin
   Reply(1660);
   BOption(1661,Node999,004);
   GOption(1662,Node999,004);
end

//pixote
procedure Node029 begin
   set_local_var(LVAR_PIXOTE_TALKED_ONCE,1);
   Reply(2010);
   NOption(2011,Node030,004);
   NOption(2012,Node031,004);
   BOption(2013,Node999,004);
end

procedure Node030 begin
   Reply(2020);
   NOption(2021,Node032,004);
   BOption(2022,Node033,004);
   BOption(2023,Node999,004);
end

procedure Node031 begin
   Reply(2030);
   NOption(2031,Node032,004);
   BOption(2032,Node033,004);
   BOption(2033,Node999,004);
end

procedure Node032 begin
   Reply(2040);
   NOption(2041,Node999,004);
end

procedure Node033 begin
   Reply(2050);
   NOption(2051,Node999,004);
end

//mash
procedure Node034 begin
   Reply(2110);
   NOption(2111,Node034b,004);
   NOption(2112,Node999,004);
end

procedure Node034b begin
   if (global_var(GVAR_CHAR_MOD) == HAIR) then begin
      call Node035;
   end else begin
      call Node036;
   end
end

procedure Node035 begin
   Reply(2120);
   NOption(2121,Node037,004);
   NOption(2122,Node999,004);
end

procedure Node036 begin
   Reply(2130);
   NOption(2131,Node037,004);
   NOption(2132,Node999,004);
end

procedure Node037 begin
   Reply(2140);
   NOption(2141,Node999,004);
   NOption(2142,Node999,004);
end
