/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Sweet Jesus it is a big head
        Description: Big Head

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "ecbhead"
#include "../headers/define.h"

#define NAME                    SCRIPT_ECBHEAD
#define CUR_COMP_SCRIPT         SCRIPT_ECBHEAD

#include "../headers/command.h"
#include "../headers/specenc.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;

/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/
#define LVAR_Herebefore                              (0)
#define LVAR_Gave_Gift                               (1)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/
procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;

procedure playerStepBack;

variable begin
   n1count;
   n2count;
   n3count;
   n4count;
   n5count;
   n6count;
   n7count;
   n8count;
   talking;
end

#define TIMER_NODE4 1
#define TIMER_NODE5 2
#define TIMER_NODE6 3
#define TIMER_NODE7 4
#define TIMER_NODE8 5
#define TIMER_DUDE_STEP_BACK 6
#define TIMER_FLOAT 7

/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == TIMER_NODE4) then
      call Node004;
   else if (fixed_param == TIMER_NODE5) then
      call Node005;
   else if (fixed_param == TIMER_NODE6) then
      call Node006;
   else if (fixed_param == TIMER_NODE7) then
      call Node007;
   else if (fixed_param == TIMER_NODE8) then
      call Node008;
   else if (fixed_param == TIMER_DUDE_STEP_BACK) then
      call playerStepBack;
   else if (fixed_param == TIMER_FLOAT) then begin
      if (talking == 0) then begin
         if (day) then begin
            if (local_var(LVAR_Gave_Gift) == 1) then
               call Node001;
            else
               call Node003;
         end else
            call Node002;
      end
      add_timer_event(self_obj, game_ticks(Random(7, 10)), TIMER_FLOAT);
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
   script_overrides;
   if (not talking) then begin
      if (local_var(LVAR_Gave_Gift) == 1) then
         call Node007;
      else if (day) then begin
         call Node005;
      end else begin
         call Node004;
      end
   end
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(100));
   else
      display_msg(mstr(102));
end


/**********************************************************************************
**********************************************************************************/

procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(103));
end


/**********************************************************************************
   Make sure the door is working.
**********************************************************************************/

procedure use_skill_on_p_proc begin
   if (talking == 0) then begin
      if (action_being_used == SKILL_STEAL) then begin
         if not (is_skill_tagged(SKILL_STEAL)) then begin
            if (has_skill(dude_obj, SKILL_STEAL) < 95) then begin
               call Node008;
            end
         end
      end
   end else begin
      script_overrides;
   end
end


/**********************************************************************************
   This is called when the player is using an object on the door. When the check is
   made to find out what is being used, obj_pid(obj_being_used_with) will need to
   be checked against a prototype.
**********************************************************************************/

procedure use_obj_on_p_proc begin
   call use_p_proc;
end


/******************************************************************************************
   IF it gets damaged it breaks
******************************************************************************************/

procedure damage_p_proc begin
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   add_timer_event(self_obj, game_ticks(Random(3, 5)), TIMER_FLOAT);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
end

procedure Node001 begin
   float_msg(self_obj, mstr(104 + n1count), FLOAT_MSG_GREEN);
   n1count += 1;
   if (n1count > 3) then n1count := 0;
end

procedure Node002 begin
   float_msg(self_obj, mstr(107 + n2count), FLOAT_MSG_GREEN);
   n2count += 1;
   if (n2count > 5) then n2count := 0;
end

procedure Node003 begin
   float_msg(self_obj, mstr(112 + n3count), FLOAT_MSG_GREEN);
   n3count += 1;
   if (n3count > 9) then n3count := 0;
end

procedure Node004 begin
   talking := 1;
//   if not (game_ui_is_disabled) then
//      game_ui_disable;

   float_msg(self_obj, mstr(121 + n4count), FLOAT_MSG_GREEN);
   n4Count += 1;

   if (n4Count > 2) then begin
      n4count := 0;
      call Node005;
   end else
      add_timer_event(self_obj, game_ticks(3), TIMER_NODE4);
end

procedure Node005 begin
   talking := 1;
//   if not (game_ui_is_disabled) then
//         game_ui_disable;

   if (n5count != 2) then
      float_msg(self_obj, mstr(124 + n5count), FLOAT_MSG_GREEN);
   else
      add_timer_event(self_obj, 0, TIMER_DUDE_STEP_BACK);

   n5Count += 1;
   if (n5Count > 4) then begin
      n5Count := 0;
      add_timer_event(self_obj, game_ticks(5), TIMER_NODE6);
   end else begin
      add_timer_event(self_obj, game_ticks(3), TIMER_NODE5);
   end
end

procedure Node006 begin
   talking := 1;
//   if not (game_ui_is_disabled) then
//         game_ui_disable;

   if (n6count == 0) then
      float_msg(dude_obj, mstr((129 + n6count)+(1000*dude_is_stupid)), FLOAT_MSG_NORMAL); //edit by killap - added (1000*dude_is_stupid)
   else if (n6count > 0 and n6count < 5) then
      float_msg(self_obj, mstr(129 + n6count), FLOAT_MSG_GREEN);
   else if (n6count == 5) then
      float_msg(dude_obj, mstr(129 + n6count), FLOAT_MSG_NORMAL);
   else if (n6count == 6) then
      float_msg(self_obj, mstr(129 + n6count), FLOAT_MSG_GREEN);
   else if (n6count == 7) then
      float_msg(dude_obj, mstr(129 + n6count), FLOAT_MSG_NORMAL);
   else if (n6count == 8) then
      float_msg(self_obj, mstr(129 + n6count), FLOAT_MSG_GREEN);
   else if (n6count == 9) then
      float_msg(dude_obj, mstr(129 + n6count), FLOAT_MSG_NORMAL);
   else if (n6count == 10) then
      float_msg(self_obj, mstr(129 + n6count), FLOAT_MSG_GREEN);
   else if (n6count == 11) then begin
      float_msg(dude_obj, mstr(129 + n6count), FLOAT_MSG_NORMAL);
      fadeout(1);
      game_time_advance(ONE_GAME_HOUR * 12);
      fadein(10);
      display_msg(mstr(200));
   end else if (n6count == 12) then
      float_msg(self_obj, mstr(129 + n6count), FLOAT_MSG_GREEN);
   else if (n6count == 13) then
      float_msg(dude_obj, mstr(129 + n6count), FLOAT_MSG_NORMAL);
   else if (n6count > 13) and (n6count < 19) then
      float_msg(self_obj, mstr(129 + n6count), FLOAT_MSG_GREEN);
   else if (n6count == 19) then begin
      float_msg(dude_obj, mstr(129 + n6count), FLOAT_MSG_NORMAL);
      set_local_var(LVAR_Gave_Gift, 1);
      add_obj_to_inven(dude_obj, create_object(PID_MONUMENT_CHUNCK, self_tile, 0));
   end else if (n6count > 19 and n6count < 22) then
      float_msg(self_obj, mstr(129 + n6count), FLOAT_MSG_GREEN);

   n6count += 1;
   if (n6count > 21) then begin
      n6count := 0;
      talking := 0;
//      if (game_ui_is_disabled) then
//         game_ui_enable;
   end else begin
      add_timer_event(self_obj, game_ticks(3), TIMER_NODE6);
   end
end

procedure Node007 begin
   talking := 1;
   float_msg(self_obj, mstr(151 + n7count), FLOAT_MSG_GREEN);
   n7count += 1;
   if (n7count > 2) then begin
      n7count := 0;
      talking := 0;
   end else begin
      add_timer_event(self_obj, game_ticks(3), TIMER_NODE7);
   end
end

procedure Node008 begin
   talking := 1;
   float_msg(self_obj, mstr(154 + n7count), FLOAT_MSG_RED);
   n8count += 1;
   if (n8count > 1) then begin
      n8count := 0;
      talking := 0;
      critter_dmg(dude_obj, 40000, DMG_plasma); //added by killap - prevent rare occurence of sliding off map and not getting killed
      //critter_damage(dude_obj, 40000); //commented out (see above)
   end else begin
      add_timer_event(self_obj, game_ticks(3), TIMER_NODE8);
   end
end

procedure Node009 begin
end

procedure playerStepBack begin
   reg_anim_clear(dude_obj);
   reg_anim_begin();
   self_walk_to_tile(STANDTILE);
   self_rotate(5);
   reg_anim_end();
end
