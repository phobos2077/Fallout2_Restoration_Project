/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Traveler
        Location: Random Encounter
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "ectravlr"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"

#define NAME                    SCRIPT_ECTRAVLR
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_)

#include "../headers/command.h"
#include "../headers/modreact.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure combat_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE
#define TAUNT_CHANCE 20

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;

procedure NodeFleeing;
procedure NodeFighting;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable n12count;
variable one;
variable two;

procedure start begin
end

procedure combat_p_proc begin
   if (critter_is_fleeing(self_obj)) then begin
      if (Random(1, 100) <= TAUNT_CHANCE) then begin
         call NodeFleeing;
      end
   end else begin
      if (Random(1, 100) <= TAUNT_CHANCE) then begin
         call NodeFighting;
      end
   end
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_RND_TRAVELER);
   set_self_ai(AI_GENERIC_GUARDS);
   one := -1;
   two := -2;
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   if (local_var(LVAR_Herebefore) == 0) then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001;
      gSay_End;
      end_dialogue;
      set_local_var(LVAR_Herebefore,1);
   end else begin
      call Node012;
   end
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   display_msg(mstr(100));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin

   call Node001;
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   Reply(101);
   NOption(102, Node002, 4);
   NOption(103, Node010, 4);
   NOption(104, Node011, 4);
   NLowOption(105, Node999);
end

procedure checkChoiceOne begin
   if (one == 0) then
      call Node003;
   else if (one == 1) then
      call Node004;
   else if (one == 2) then
      call Node005;
   else if (one == 3) then
      call Node006;
   else if (one == 4) then
      call Node007;
   else if (one == 5) then
      call Node008;
   else if (one == 6) then
      call Node009;
   else if (one == 7) then
      call Node013;
end

procedure checkChoiceTwo begin
   if (two == 0) then
      call Node003;
   else if (two == 1) then
      call Node004;
   else if (two == 2) then
      call Node005;
   else if (two == 3) then
      call Node006;
   else if (two == 4) then
      call Node007;
   else if (two == 5) then
      call Node008;
   else if (two == 6) then
      call Node009;
   else if (two == 7) then
      call Node013;
end

procedure Node002 begin
   if (Only_Once == 0) then begin
      one := Random(0, 7);
      two := Random(0, 6);
      if (two >= one) then
         two += 1;

      Only_Once := 1;
   end

   Reply(106);
   NOption(1107 + one, checkChoiceOne, 4);
   NOption(1107 + two, checkChoiceTwo, 4);
   NOption(115, Node999, 4);
end

procedure Node003 begin
   mark_new_reno_on_map
   Reply(116);
   NOption(150, Node002, 4);
   NOption(117, Node999, 4);
end

procedure Node004 begin
   mark_vault_city_on_map
   Reply(118);
   NOption(150, Node002, 4);
   NOption(119, Node999, 4);
end

procedure Node005 begin
   mark_redding_on_map
   Reply(120);
   NOption(150, Node002, 4);
   NOption(121, Node999, 4);
end

procedure Node006 begin
   mark_den_on_map
   Reply(122);
   NOption(150, Node002, 4);
   NOption(123, Node999, 4);
end

procedure Node007 begin
   mark_san_francisco_on_map
   Reply(124);
   NOption(150, Node002, 4);
   NOption(125, Node999, 4);
end

procedure Node008 begin
   mark_new_CA_republic_on_map
   Reply(126);
   NOption(150, Node002, 4);
   NOption(127, Node999, 4);
end

procedure Node009 begin
   mark_military_base_on_map
   Reply(128);
   NOption(150, Node002, 4);
   NOption(129, Node999, 4);
end

procedure Node010 begin
   Reply(132);
   NOption(133, Node002, 4);
   NOption(134, Node011, 4);
   NOption(135, Node999, 4);
end

procedure Node011 begin
   Reply(136);
   NOption(137, Node002, 4);
   NOption(138, Node010, 4);
   NOption(139, Node999, 4);
end

procedure Node012 begin
   float_msg(self_obj, mstr(140 + n12Count), FLOAT_MSG_NORMAL);
   n12Count += 1;
   if (n12Count > 3) then begin
      n12Count := 0;
   end
   if (n12Count == 2 and not day) then n12Count := 3;
end

procedure Node013 begin
   mark_EPA_on_map
   Reply(130);
   NOption(150, Node002, 4);
   NOption(131, Node999, 4);
end

procedure NodeFleeing begin
   float_msg(self_obj, mstr(147 + Random(0, 2)), FLOAT_MSG_YELLOW);
end

procedure NodeFighting begin
   float_msg(self_obj, mstr(144 + Random(0, 2)), FLOAT_MSG_RED);
end
