/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Rave Drunk/Addict
        Location: Random Encounter
        Description: It should always be dark in this encounter

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "ecravpty"
#include "../headers/define.h"
//#include "../headers/<TownName.h>"

#define NAME                    SCRIPT_ECRAVPTY
//#define TOWN_REP_VAR            (GVAR_TOWN_REP_)

#include "../headers/command.h"
#include "../headers/modreact.h"

#include "../headers/specenc.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure combat_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending

procedure Node001A;
procedure Node002A;
procedure Node003A;
procedure Node004A;
procedure Node005A;

procedure Node001D;
procedure Node002D;
procedure Node003D;
procedure Node004D;
procedure Node005D;
procedure Node006D;


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE
#define TIMER_MOVE  1


#define TAUNT_CHANCE 20

#define TYPE_ADDICT 1
#define TYPE_DRUNK  0

#define SEX_NONE    0
#define SEX_PROP    1
#define SEX_DONE    2

#define sex        (local_var(LVAR_Sex))
#define set_sex(x)  set_local_var(LVAR_Sex, x)

#define ADDICT   (local_var(LVAR_Type))

procedure NodeFleeing;
procedure NodeFighting;
procedure checkProp;
procedure chooseType;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Type                       (7)
#define LVAR_Sex                        (8)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable doSex := 0;
variable starttile;

procedure start begin
end

procedure timed_event_p_proc begin
   variable tile;
   if (fixed_param == TIMER_MOVE) then begin
      if (not anim_busy(self_obj)) then begin
         if ADDICT then begin
            reg_anim_clear(self_obj);
            reg_anim_begin();
            tile := tile_num_in_direction(starttile, Random(0, 5), Random(1, 11));
            self_run_to_tile(tile);
            reg_anim_end();
         end else begin
            reg_anim_clear(self_obj);
            reg_anim_begin();
            self_walk_to_tile(tile_num_in_direction(starttile, Random(0, 5), Random(1, 11)));
            reg_anim_end();
         end
      end
      if ADDICT then
         add_timer_event(self_obj, game_ticks(Random(1, 4)), TIMER_MOVE);
      else
         add_timer_event(self_obj, game_ticks(Random(60, 120)), TIMER_MOVE);
   end
end

procedure combat_p_proc begin
   if (critter_is_fleeing(self_obj)) then
      if (Random(1, 100) <= TAUNT_CHANCE) then
         call NodeFleeing;
   else
      if (Random(1, 100) <= TAUNT_CHANCE) then
         call NodeFighting;
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   starttile := self_tile;
   set_self_team(TEAM_RND_RAVE);
   if (not is_loading_game) then
      call chooseType;

   if (local_var(LVAR_Type) == TYPE_ADDICT) then
      set_self_ai(AI_ADDICT);
   else
      set_self_ai(AI_ADDICT);
   add_timer_event(self_obj, 0, TIMER_MOVE);
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
     if (do_check(self_obj, STAT_pe, -2)) then begin
          set_local_var(LVAR_Hostile,2);
      end else begin
         call checkProp;
      end
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   if ADDICT then begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001A;
      gSay_End;
      end_dialogue;
      set_local_var(LVAR_Herebefore, 1);
   end else begin
      start_gdialog(NAME,self_obj,4,-1,-1);
      gSay_Start;
         call Node001D;
      gSay_End;
      end_dialogue;
      set_local_var(LVAR_Herebefore, 1);
   end
   if (doSex == 1) then begin
      doSex := 0;
      fadeout(1);
      do_default_sex;
      set_sex(SEX_DONE);
      fadein(1);
//      display_sex_res;
   end
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter

/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then begin
      if ADDICT then begin
         display_msg(mstr(119));
      end else begin
         display_msg(mstr(100));
      end
   end else begin
      if ADDICT then begin
         display_msg(mstr(120));
      end else begin
         display_msg(mstr(101));
      end
   end
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   if (ADDICT) then begin
      display_msg(mstr(121));
   end else begin
      if (self_is_male) then
          display_msg(mstr(102));
      else
          display_msg(mstr(210)); //edit by killap - was 202
   end
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
   call checkProp;
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure NodeDoSexD begin
   if (dude_sex_rating > self_sex_rating or Random(1, 100) <= (10 * dude_charisma)) then begin
      doSex := 1;
      Reply(161);
   end else begin
      Reply(160);
   end
   ENDOPTION;
end

procedure Node62Da begin
   if (dude_caps >= 6) then begin
      dude_caps_adjust(-6);
      self_caps_adjust(6);
      add_obj_to_inven(dude_obj, create_object(PID_NUKA_COLA, self_tile, 0));
      call Node002D;
   end else
      call Node006D;
end

procedure Node63Da begin
   if (dude_caps >= 15) then begin
      dude_caps_adjust(-15);
      self_caps_adjust(15);
      add_obj_to_inven(dude_obj, create_object(PID_BEER, self_tile, 0));
      call Node003D;
   end else
      call Node006D;
end

procedure Node65Da begin
   if (dude_caps >= 30) then begin
      dude_caps_adjust(-30);
      self_caps_adjust(30);
      add_obj_to_inven(dude_obj, create_object(PID_BOOZE, self_tile, 0));
      call Node005D;
   end else
      call Node006D;
end

procedure Node001D begin
   Reply(103);
   NOption(104, Node62Da, 4);
   NOption(105, Node63Da, 4);
   NOption(106, Node65Da, 4);
   NOption(107, Node999, 4);
   NLowOption(108, Node005D);
   if (not lang_filter_on and sex == SEX_PROP) then begin
      NOption(158, NodeDoSexD, 4);
      NLowOption(159, NodeDoSexD);
   end
end

procedure Node002D begin
   Reply(109);
   NOption(110, Node999, 4);
end

procedure Node003D begin
   Reply(111);
   NOption(112, Node999, 4);
end

procedure Node004D begin
   Reply(113);
   NOption(114, Node999, 4);
end

procedure Node005D begin
   Reply(115);
   ENDOPTION;//116
end

procedure Node006D begin
   Reply(117);
   ENDOPTION;//118
end

procedure NodeFleeing begin
   float_msg(self_obj, mstr(203 + Random(0, 2)), FLOAT_MSG_YELLOW);
end

procedure NodeFighting begin
   float_msg(self_obj, mstr(200 + Random(0, 2)), FLOAT_MSG_RED);
end

//Addict dialog
procedure NodeDoSexA begin
   if (dude_sex_rating > self_sex_rating or Random(1, 100) <= (10 * dude_charisma)) then begin
      doSex := 1;
      Reply(181);
   end else begin
      Reply(180);
   end
   ENDOPTION;
end

procedure Node32Aa begin
   if (dude_caps >= 560) then begin
      dude_caps_adjust(-560);
      self_caps_adjust(560);
      call create_and_use_itempid_on(dude_obj, PID_MENTATS);
      call Node002A;
   end else begin
      call Node003A;
   end
end

procedure Node32Ab begin
   if (dude_caps >= 400) then begin
      dude_caps_adjust(-400);
      self_caps_adjust(400);
      call create_and_use_itempid_on(dude_obj, PID_BUFFOUT);
      call Node002A;
   end else begin
      call Node003A;
   end
end

procedure Node32Ac begin
   if (dude_caps >= 800) then begin
      dude_caps_adjust(-800);
      self_caps_adjust(800);
      call create_and_use_itempid_on(dude_obj, PID_PSYCHO);
      call Node002A;
   end else begin
      call Node003A;
   end
end

procedure Node001A begin
   Reply(122);
   NOption(123, Node32Aa, 4);
   NOption(124, Node32Ab, 4);
   NOption(125, Node32Ac, 4);
   NOption(126, Node999, 4);
   NLowOption(127, Node004D);

   if (not lang_filter_on and sex == SEX_PROP) then begin
      NOption(178, NodeDoSexA, 4);
      NLowOption(179, NodeDoSexA); // Seraph's Fix: NLowOption only takes 2 args. Thanks Rob!
   end
end

procedure Node002A begin
   Reply(128);
   ENDOPTION;//129
end

procedure Node003A begin
   Reply(130);
   ENDOPTION;
end

procedure Node005Aa begin
   dude_caps_adjust(-1000);
   self_caps_adjust(1000);
   call create_and_use_itempid_on(dude_obj, PID_MENTATS);
   call Node005A;
end

procedure Node004A begin
   Reply(131);
   if (dude_caps >= 1000) then
      NLowOption(132, Node005Aa);
   NLowOption(133, Node999);
end

procedure Node005A begin
   Reply(134);
   ENDOPTION;//136
end


procedure chooseType begin
   if (Random(0, 1) == 0) then begin
      ndebug("making addict");
      set_local_var(LVAR_Type, TYPE_ADDICT);
   end else begin
      ndebug("making drunk");
      set_local_var(LVAR_Type, TYPE_DRUNK);
   end
   ndebug("ADDICT: " + ADDICT);
end

procedure checkProp begin
   if ADDICT then begin
      if not lang_filter_on then begin
         if (sex != SEX_DONE) then begin
            float_msg(self_obj, mstr(170 + Random(0, 4)), FLOAT_MSG_GREEN);
            set_sex(SEX_PROP);
         end else begin
            float_msg(self_obj, mstr(175 + Random(0, 2)), Random(FLOAT_MSG_NORMAL, FLOAT_MSG_LIGHT_GREY));
         end
      end else begin
         float_msg(self_obj, mstr(175), Random(FLOAT_MSG_NORMAL, FLOAT_MSG_LIGHT_GREY));
      end
   end else begin
      if not lang_filter_on then begin
         if (sex != SEX_DONE) then begin
            float_msg(self_obj, mstr(150 + Random(0, 4)), FLOAT_MSG_GREEN);
            set_sex(SEX_PROP);
         end else begin
            float_msg(self_obj, mstr(155 + Random(0, 2)), FLOAT_MSG_PURPLE);
         end
      end else begin
         float_msg(self_obj, mstr(156), FLOAT_MSG_PURPLE);
      end
   end
end


//xxxxxxxxxxxxxxxxxxxx
