/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Vdu unit next to the force field on Westin's gate.
        Description:

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/


/* Include Files */
#define SCRIPT_REALNAME "sicmpwes"
#include "../headers/define.h"

#define NAME                    SCRIPT_SICMPWES
#define CUR_COMP_SCRIPT         SCRIPT_SICMPWES

#include "../headers/command.h"
#include "../headers/ncr.h"
#include "../headers/ncr1.h"  //added by killap
#include "../headers/ncr3.h"  //added by killap

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure timed_event_p_proc;



/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/
#define EXPLOSION_DMG                                       (25)
#define TIMER_PLAYER_USE_COMPUTER_SUCCESS 3 //Used in the SCWesGrd.int
#define TIMER_PLAYER_USE_COMPUTER_FAIL    4
#define TIMER_DESTROY 1

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

import variable i_westin_emitter_obj;
import variable i_westin_guard_obj;

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
   variable obj;
   if (fixed_param == TIMER_DESTROY) then begin
      if (i_westin_emitter_obj != -1) then begin
         EMITTER_SET_FIELD_DESTROYED(i_westin_emitter_obj);
         explosion(tile_num(i_westin_emitter_obj), 0, 0);
      end
      obj := create_object(PID_VDU_NOT_WORKING, self_tile, self_elevation);
      if (obj) then
         destroy_object(self_obj);
   end
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
   call use_skill_on_p_proc;
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
end


/**********************************************************************************
**********************************************************************************/

procedure description_p_proc begin
end


/**********************************************************************************
   Make sure the door is working.
**********************************************************************************/

procedure use_skill_on_p_proc begin
   script_overrides;
   if (skill_success(source_obj, SKILL_SCIENCE, 30) or skill_success(source_obj, SKILL_REPAIR, 0)) then begin
      if (i_westin_emitter_obj != -1) then begin
         //EMITTER_SET_FIELD_DELAY(i_westin_emitter_obj);
         set_map_var(MVAR_Emitter_Wes_Control, EMITTER_CONTROL_DELAY); //edit by killap
      end

      if (i_westin_guard_obj != -1) then begin
         if (obj_can_see_obj(i_westin_guard_obj, dude_obj)) then
            add_timer_event(i_westin_guard_obj, 0, TIMER_PLAYER_USE_COMPUTER_SUCCESS);
      end

   end else begin

      if (i_westin_guard_obj != -1) then begin
         if (obj_can_see_obj(i_westin_guard_obj, dude_obj)) then
            add_timer_event(i_westin_guard_obj, 0, TIMER_PLAYER_USE_COMPUTER_FAIL);
      end

      display_msg(mstr(101));
   end
end


/**********************************************************************************
   This is called when the player is using an object on the door. When the check is
   made to find out what is being used, obj_pid(obj_being_used_with) will need to
   be checked against a prototype.
**********************************************************************************/

procedure use_obj_on_p_proc begin
   display_msg(mstr(100));
end


/******************************************************************************************
   IF it gets damaged it breaks
******************************************************************************************/

procedure damage_p_proc begin
   if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
      display_msg(mstr(102));
      explosion(self_tile, 0, EXPLOSION_DMG);
      add_timer_event(self_obj, 3, TIMER_DESTROY);
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
end
