/*
	Script for critter tmplete
*/




/* Include Files */
#define SCRIPT_REALNAME "scrangr"
#include "../headers/define.h"

#define NAME                    SCRIPT_SCRANGR

#include "../headers/command.h"
#include "../headers/den.h"
#include "../headers/ncr.h"
#include "../headers/safehs1.h"
#include "../headers/safehs2.h"
#include "../headers/safehs3.h"

/* Standard Script Procedures */
procedure start;
procedure use_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure use_obj_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure map_update_p_proc;
procedure talk_p_proc;
procedure critter_p_proc;
procedure destroy_p_proc;

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
/*****************************************************************
   Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_
*****************************************************************/

#define LVAR_Flags                      (4)
#define LVAR_Herebefore                 (5)
#define LVAR_Hostile                    (6)
#define LVAR_Personal_Enemy             (7)

/*******************************************************************
   Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_)
*******************************************************************/

/*******************************************************************
   Local variables which do not need to be saved between map changes.
*******************************************************************/


/*******************************************************************
*******                         PROCEDURES                   *******
*******************************************************************/


/*******************************************************************
   The start procedure is the first procedure called when the map is
   first entered. Any initial information that needs to be set up
   should be placed in here.
*******************************************************************/

procedure start begin
end

procedure timed_event_p_proc begin
end

/********************************************************************
********************************************************************/

procedure use_p_proc begin
end

/***************************************************************************
   This is cursory glance description that the player will receive should
   he just pass the Action Cursor over. Examines which give more information
   need to be in the description_p_proc procedure.
***************************************************************************/

procedure look_at_p_proc begin
   script_overrides;
   if (self_is_male) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end


procedure description_p_proc begin
   script_overrides;
   if (self_is_male) then
      display_msg(mstr(102));
   else
      display_msg(mstr(103)); // edit by killap (was 102)
end

procedure critter_p_proc begin
   if (self_can_see_dude) then begin
      if ( (hostile) or (has_rep_slaver) ) then begin
         call Node002;
         self_attack_dude;
      end else if (cur_map_index == MAP_RANGER_SAFE_HOUSE1) then begin
         if (map_var(MVAR_Came_With_Slavers) == 1) then begin
            if (self_tile == 18890) then begin
               set_map_var(MVAR_Came_With_Slavers,2);
               start_dialog_at_node(Node004);
            end else if (map_var(MVAR_Safe_House1_Under_Attack)) then begin
               call Node002;
               self_attack_dude;
            end
         end else if (map_var(MVAR_Safe_House1_Under_Attack)) then begin
            call Node002;
            self_attack_dude;
         end
      end else if (cur_map_index == MAP_RANGER_SAFE_HOUSE2) then begin
         if (map_var(MVAR_Safe_House2_Under_Attack)) then begin
            call Node002;
            self_attack_dude;
         end
      end else if (cur_map_index == MAP_RANGER_SAFE_HOUSE3) then begin
         if (map_var(MVAR_Safe_House3_Under_Attack)) then begin
            call Node002;
            self_attack_dude;
         end
      end
   end
end

procedure use_skill_on_p_proc begin
end


procedure use_obj_on_p_proc begin
end

// added by killap
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
      set_hostile;
   end
end

/******************************************************************************************
   IF it gets damaged
******************************************************************************************/

procedure damage_p_proc begin
   if (source_obj == dude_obj) then begin
      set_personal_enemy;
   end
end

procedure destroy_p_proc begin
   if (cur_map_index == MAP_RANGER_SAFE_HOUSE1) then begin
      set_map_var(MVAR_SH1_RANGERS,(map_var(MVAR_SH1_RANGERS) - 1));
      if (map_var(MVAR_SH1_RANGERS) <= 0) then begin
         display_msg(mstr(600));
         inc_global_var(GVAR_WIPED_OUT_RANGER_SAFE_HOUSES);
         if (global_var(GVAR_LOAD_MAP_INDEX) == 5) then begin
            set_exit_grids(0,MAP_RANGER_SAFE_HOUSE2,0,19694,0);
         end
      end
   end else if (cur_map_index == MAP_RANGER_SAFE_HOUSE2) then begin
      set_map_var(MVAR_SH2_RANGERS,(map_var(MVAR_SH2_RANGERS) - 1));
      if (map_var(MVAR_SH2_RANGERS) <= 0) then begin
         display_msg(mstr(600));
         inc_global_var(GVAR_WIPED_OUT_RANGER_SAFE_HOUSES);
         if (global_var(GVAR_LOAD_MAP_INDEX) == 5) then begin
            set_exit_grids(0,MAP_RANGER_SAFE_HOUSE3,0,19290,0);
         end
      end
   end else if (cur_map_index == MAP_RANGER_SAFE_HOUSE3) then begin
      set_map_var(MVAR_SH3_RANGERS,(map_var(MVAR_SH3_RANGERS) - 1));
      if (map_var(MVAR_SH3_RANGERS) <= 0) then begin
         display_msg(mstr(600));
         inc_global_var(GVAR_WIPED_OUT_RANGER_SAFE_HOUSES);
      end
   end

   inc_good_critter
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called.
***************************************************************************************/

procedure map_enter_p_proc begin
   variable item;

   if ( (global_var(GVAR_NCR_VORTIS_QUEST_STATE) == 2) ) then begin
      kill_critter(self_obj, random(ANIM_fall_back_blood_sf, ANIM_fall_front_blood_sf));
   end

   if (map_first_run) then begin
      item:=create_object(PID_ASSAULT_RIFLE,0,0);
      add_obj_to_inven(self_obj,item);
      wield_obj_critter(self_obj,item);
      item:=create_object(PID_5MM_JHP,0,0);
      add_obj_to_inven(self_obj,item);
      item:=create_object(PID_STIMPAK,0,0);
      add_obj_to_inven(self_obj,item);

      if (cur_map_index == MAP_RANGER_SAFE_HOUSE1) then
         set_map_var(MVAR_SH1_RANGERS,(map_var(MVAR_SH1_RANGERS) + 1));
      else if (cur_map_index == MAP_RANGER_SAFE_HOUSE2) then
         set_map_var(MVAR_SH2_RANGERS,(map_var(MVAR_SH2_RANGERS) + 1));
      else if (cur_map_index == MAP_RANGER_SAFE_HOUSE3) then
         set_map_var(MVAR_SH3_RANGERS,(map_var(MVAR_SH3_RANGERS) + 1));

      item:=create_object(PID_RANGER_PIN,0,0);
      add_mult_objs_to_inven(self_obj,item,1);

   end

   set_self_team(TEAM_NCR_RANGER);
   set_self_ai(AI_TOUGH_GUARD);
end


/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time.
**************************************************************************************/

procedure map_update_p_proc begin
end

/**************************************************************************************
   This is used for any dialogue that may need to occur with the player.
**************************************************************************************/

procedure talk_p_proc begin
   if (dude_is_ranger) then begin
      call Node001;
   end else begin
      call Node003;
   end
end

procedure Node001 begin
   float_msg(self_obj, mstr(random(200,(204 + metzger_dead))), FLOAT_MSG_GREEN);
   //floater(random(200,(204 + metzger_dead)));
end

procedure Node002 begin
   if (has_rep_slaver) then
      float_msg(self_obj, mstr(300), FLOAT_MSG_RED);
   else
      float_msg(self_obj, mstr(301), FLOAT_MSG_RED);
   //floater(300);
end

procedure Node003 begin
   float_msg(self_obj, mstr(random(400,402)), FLOAT_MSG_YELLOW);
   //floater(random(400,402));
end

procedure Node004 begin
   Reply(500);
   NOption(501, Node005, 4);
   NOption(502, Node006, 4);
end

procedure Node005 begin
   variable Critter;

   destroy_object(tile_contains_pid_obj(18298,dude_elevation,PID_MALE_SLAVER));
   destroy_object(tile_contains_pid_obj(20497,dude_elevation,PID_MALE_SLAVER));

   Critter := create_object_sid(PID_MALE_SLAVER,18298,dude_elevation,SCRIPT_SCATKSLV);
   set_team(Critter,TEAM_SLAVERS);
   Critter := create_object_sid(PID_MALE_SLAVER,20497,dude_elevation,SCRIPT_SCATKSLV);
   set_team(Critter,TEAM_SLAVERS);
   attack_setup(Critter,self_obj);
end

procedure Node006 begin
   if (cur_map_index == MAP_RANGER_SAFE_HOUSE1) then begin
      set_map_var(MVAR_Safe_House1_Under_Attack,1);
      //set_exit_grids(0,MAP_RANGER_SAFE_HOUSE2,0,19694,0);
   end else if (cur_map_index == MAP_RANGER_SAFE_HOUSE2) then
      set_map_var(MVAR_Safe_House2_Under_Attack,1);
   else if (cur_map_index == MAP_RANGER_SAFE_HOUSE3) then
      set_map_var(MVAR_Safe_House3_Under_Attack,1);


end
