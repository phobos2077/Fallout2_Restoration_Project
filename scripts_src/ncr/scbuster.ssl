/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Buster
        Location: Ncr Entrance
        Description: He is the gun shop owner there.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "scbuster"
#include "../headers/define.h"
#include "../headers/ncrent.h"

#define NAME                    SCRIPT_SCBUSTER
#define TOWN_REP_VAR         GVAR_TOWN_REP_NCR

#include "../headers/command.h"
#include "../headers/modreact.h"
#include "../headers/ncr.h"

/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending
procedure do_swap;


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure doBarter;
procedure NodeBarter;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Bought_Before              (8)
#define LVAR_Shop_Open                  (9)
#define LVAR_Bought_Scope               (10)
#define LVAR_Restock_Time               (11)
#define LVAR_Caps                       (12)
#define LVAR_Starttile                  (13)

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */
import variable buster_obj;
import variable book_obj1;
import variable book_obj2;
import variable book_obj3;
import variable book_obj_look;


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable Node001Count := 0;
variable Node002Count := 0;
variable tmpItem;
variable lastShelf;
variable use_book_obj;

procedure storeOpen begin
   variable time;

   time := game_time_hour;
   if (time >= 800 and time < 2400) then
      return 1;
   return 0;
end

procedure timed_event_p_proc begin
   if (fixed_param == TIMERATTACK) then begin
      ndebug("in timer attack");
      if (tile_distance_objs(self_obj, dude_obj) < 5 and (local_var(LVAR_Shop_Open) == 0 or local_var(LVAR_Personal_Enemy) == 1)) then begin
         set_local_var(LVAR_Personal_Enemy,1);
         set_local_var(LVAR_Hostile,2);
      end
   end else if (fixed_param == TIMERSHOPOPEN) then begin
      if (storeOpen) then
         set_local_var(LVAR_Shop_Open, 1);
      else
         set_local_var(LVAR_Shop_Open, 0);
      add_timer_event(self_obj, game_ticks(60), TIMERSHOPOPEN);
   end
end

procedure start begin
   buster_obj := self_obj;
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   variable time;

   Only_Once:=0;
   set_self_team(TEAM_NCR_ENTRANCE);
   set_self_ai(AI_STORE_OWNER);

   if (not local_var(LVAR_Starttile)) then begin
      set_local_var(LVAR_Starttile, self_tile);
   end

   time := game_time;

   add_timer_event(self_obj, 0, TIMERSHOPOPEN);

   set_local_var(LVAR_Caps, Random(200, 500));
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       attack(dude_obj);
   end

   CHECK_START_TILE(local_var(LVAR_Starttile))

   if (book_obj_look > 0) then begin
      if (book_obj_look < 4) then begin
         if (storeOpen) then begin
            use_book_obj := book_obj_look;
            dialogue_system_enter;
         end else begin
            call Node014;
         end
      end
      if (book_obj_look == 4) then begin
         set_local_var(LVAR_Hostile, 2);
      end
      book_obj_look := 0;
   end
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end


/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=1;
   Slavery_Tolerant:=SLAVE_TOLERANT;
   Karma_Perception:=KARMA_PERCEPTION1;

   CheckKarma;

   GetReaction;

   book_obj_look := 0;
   if (local_var(LVAR_Shop_Open) == 1 and local_var(LVAR_Personal_Enemy) == 0) then begin
      ndebug("should be talking");

      if (use_book_obj == 0) then begin
         use_book_obj := Random(1, 3);

         call do_swap;

         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
         gSay_End;
         end_dialogue;
         set_local_var(LVAR_Herebefore, 1);
      end else begin
         call do_swap;
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call NodeBarter;
         gSay_End;
         end_dialogue;
      end
   end else begin
      call Node014;
   end

   Node001Count := 0;
   call do_swap; //moved from Node999 - killap
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
//   inc_good_critter
   inc_evil_critter

/* Set global_variable for Enemy status*/
   buster_obj := 0;
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
   //call do_swap; -comment out by killap
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure doBarter begin
   gdialog_barter;
   set_local_var(LVAR_Bought_Before, 1);
   MOREOPTION(Node001);
end

procedure NodeBarter begin
   Reply(149);
   MOREOPTION(doBarter);
end

procedure Node0405a begin
   if (local_var(LVAR_Bought_Before) == 1) then
      call Node004;
   else
      call Node005;
end

procedure Node001 begin
   Node001Count += 1;
   if (local_var(LVAR_Herebefore) == 0) then
      if (Node001Count == 1) then
         Reply(103);
      else
         Reply(105);
   else begin
      if (Node001Count == 1) then
         Reply(104);
      else
         Reply(105);
   end

   NLowOption(106, doBarter);
   NOption(107, doBarter, 4);
   if (local_var(LVAR_Bought_Before)) then
      NOption(108, Node006, 4);
   NOption(109, Node0405a, 4);
   NOption(110, Node999, 1);
end

procedure Node002 begin
   set_local_var(LVAR_Bought_Before, 1);
   if (Node002Count == 0) then
      Reply(111);
   else
      Reply(112);
   NOption(MORESTRING, Node001, 1);

   Node002Count += 1;
end

procedure Node003 begin
   set_local_var(LVAR_Bought_Before, 0);
   Reply(113);
   NOption(MORESTRING, Node001, 1);
end

procedure Node004 begin
   set_local_var(LVAR_Bought_Before, 0);
   Reply(114);
   NOption(115, Node007, 4);
   if (merk_status >= MERK_STATUS_MET) then
      NOption(116, Node008, 4);
   if (global_var(GVAR_NEWRENO_SNUFF_WESTIN)) then
      NOption(117, Node009, 4); // edit by killap - was 010
   if (global_var(GVAR_NEWRENO_SNUFF_CARLSON)) then
      NOption(118, Node010, 4); // edit by killap - was 009
   if( not( dude_found_geck ) ) then //added by killap
      NOption(119, Node011, 4);
end

procedure Node005 begin
   Reply(120);
   NOption(MORESTRING, Node001, 1);
end

procedure tryModify begin
   variable rifle := 0;

   rifle := dude_item(PID_HUNTING_RIFLE);
   if (rifle and dude_caps > 499) then begin
      fadeout(1);
      set_local_var(LVAR_Bought_Scope, 1);
      dude_caps_adjust(-500);
      self_caps_adjust(500);
      rm_obj_from_inven(dude_obj, rifle);
      destroy_object(rifle);
      add_obj_to_inven(dude_obj, create_object(PID_SCOPED_HUNTING_RIFLE, dude_tile, 0));
      game_time_advance(game_ticks(3600));
      fadein(1);
      set_local_var(LVAR_Bought_Before, 1);
      call Node002;
   end else if (not rifle) then begin
      set_local_var(LVAR_Bought_Before, 0);
      call Node012;
   end else if (dude_caps < 500) then begin
      set_local_var(LVAR_Bought_Before, 0);
      call Node005;
   end
end

procedure Node001a begin
   set_local_var(LVAR_Bought_Before, 0);
   call Node001;
end

procedure Node006 begin
   if (local_var(LVAR_Bought_Scope) == 0) then begin
      Reply(121);
      NOption(123, tryModify, 4);
      NOption(124, Node001a, 4);
   end
   else begin
      Reply(122);
      NOption(MORESTRING, Node001, 1);
   end
end

procedure Node007 begin
   Reply(125);
   NOption(126, Node001, 4);
   NOption(127, Node999, 4);
end

procedure Node008 begin
   Reply(128);
   NOption(129, Node001, 4);
   NOption(130, Node999, 4);
end

procedure Node009 begin
   Reply(131);
   NOption(132, Node001, 4);
   NOption(133, Node999, 4);
end

procedure Node010 begin
   Reply(134);
   NOption(135, Node001, 4);
   NOption(136, Node999, 4);
end

procedure Node011 begin
   Reply(137);
   NOption(138, Node001, 4);
   NOption(139, Node999, 4);
end

procedure Node012 begin
   Reply(140);
   NOption(141, Node001, 4);
   NOption(142, Node999, 4);
end

procedure Node013 begin
   float_msg(self_obj, mstr(143 + Random(0, 3)), FLOAT_MSG_NORMAL);
end

procedure Node014 begin
   float_msg(self_obj, mstr(147), FLOAT_MSG_RED);
   add_timer_event(self_obj, game_ticks(10), TIMERATTACK);
end

procedure Node015 begin
   floater((148));
   set_local_var(LVAR_Hostile, 2);
end

procedure do_swap begin
   if ((use_book_obj > 0 and use_book_obj < 4) or (lastShelf > 0 and lastShelf < 4)) then begin
      if (tmpItem == 0) then
         tmpItem := create_object(PID_FOOTLOCKER_CLEAN_LEFT, 9167, 0);
      if (not lastShelf) then begin
         lastShelf := use_book_obj;
         use_book_obj := 0;
         move_obj_inven_to_obj(self_obj, tmpItem);
         if (lastShelf == 1) then
            if (book_obj1) then
               move_obj_inven_to_obj(book_obj1, self_obj);
         if (lastShelf == 2) then
            if (book_obj2) then
               move_obj_inven_to_obj(book_obj2, self_obj);
         if (lastShelf == 3) then
            if (book_obj3) then
               move_obj_inven_to_obj(book_obj3, self_obj);

         if (local_var(LVAR_Caps)) then begin
            self_caps_adjust(local_var(LVAR_Caps));
         end
      end
      else begin
         set_local_var(LVAR_Caps, self_caps);
         self_caps_adjust(-local_var(LVAR_Caps));
         if (lastShelf == 1) then
            if (book_obj1) then
               move_obj_inven_to_obj(self_obj, book_obj1);
         if (lastShelf == 2) then
            if (book_obj2) then
               move_obj_inven_to_obj(self_obj, book_obj2);
         if (lastShelf == 3) then
            if (book_obj3) then
               move_obj_inven_to_obj(self_obj, book_obj3);

         move_obj_inven_to_obj(tmpItem, self_obj);

         destroy_object(tmpItem);
         tmpItem := 0;
         lastShelf := 0;
      end
   end
end

//xxxxxxxxxxxxxxxxxxxx
