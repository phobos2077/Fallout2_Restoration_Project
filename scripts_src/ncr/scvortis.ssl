/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Vortis
        Location: NCR Entrance
        Description: He is a slave baby sitter.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "scvortis"
#include "../headers/define.h"
#include "../headers/den.h" //added by killap
#include "../headers/ncrent.h"

#define NAME                    SCRIPT_SCVORTIS
#define TOWN_REP_VAR         GVAR_TOWN_REP_NCR

#include "../headers/ncr.h"

#include "../headers/command.h"
#include "../headers/modreact.h"


/* Standard Script Procedures */
procedure start;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;
procedure Node008;
procedure Node009;
procedure Node010;
procedure Node011;
procedure Node012;
procedure Node013;
procedure Node014;
procedure Node015;
procedure Node016;
procedure Node017;
procedure Node018;
procedure Node019;
procedure Node020;
procedure Node021;
procedure Node022;

procedure Node023; //added by killap
//added by killap - expansion
procedure Node024;
procedure Node025;
procedure Node026;
procedure Node027;
procedure Node028;
procedure Node029;
procedure Node030;
procedure Node031;
procedure Node032;
//added by killap
procedure Node033;
procedure Node034;
procedure Node035;
procedure Node036;
//end added
procedure Node990;
procedure Node991;
procedure Node992;
procedure Node993; //added by killap
procedure Node019a;
//end added

procedure doLoadStuff;
procedure callGuards;
procedure checkTime;
procedure anim_end_call;

#define TIMER_CLOSE      1
#define TIMER_DOOR_CHECK 2

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Vortis_Location            (7)
#define LVAR_Prepare_For_Attack         (8) //added by killap - expansion
#define LVAR_Got_Slaver_Camp_Location   (9) //added by killap - expansion

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */
import variable i_vortis_obj;
import variable i_vortis_door;

/* Local variables which do not need to be saved between map changes. */
variable Only_Once     :=0;
variable Node1Count    := 0;
variable Node13Count   := 0;
variable warpPlayerOut := 0;
variable anim_flag     := 0;
variable attacked      := 0;
variable warnedPlayer  := 0;

procedure start begin
   i_vortis_obj := self_obj;
end

procedure timed_event_p_proc begin
   if (fixed_param == TIMER_CLOSE) then begin
      call checkTime;
      add_timer_event(self_obj, 5, TIMER_CLOSE);
   end else if (fixed_param == TIMER_DOOR_CHECK) then begin
      if not(warnedPlayer) then begin
        warnedPlayer := 1;
        call Node022;
      end else begin
        call Node021;
      end
      //call Node022;
   end
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   set_self_team(TEAM_NCR_VORTIS);
   set_self_ai(AI_GENERIC_GUARDS);

   if (is_loading_game == FALSE) then
      call doLoadStuff;
   add_timer_event(self_obj, 5, TIMER_CLOSE);
end


/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */

   if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
       set_local_var(LVAR_Hostile,1);
       self_attack_dude;
   end
   do_self_anim_callback

   if (map_var(MVAR_Slavers_Attack) == 1) then begin
      set_local_var(LVAR_Hostile, 2);
   end
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
       set_map_var(MVAR_Slavers_Attack, 1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=1;
   Slavery_Tolerant:=SLAVE_PROUD;
   Karma_Perception:=KARMA_PERCEPTION2;

   CheckKarma;

   GetReaction;

   ReactToLevel; //added by killap

// (tile_distance(tile_num(dude_obj), VORTISBEDPLACE) < 6)
   if (local_var(LVAR_Vortis_Location) == VORTISBEDPLACE) then begin
      if ( (tile_distance(dude_tile, VORTISBEDPLACE) < 9) ) then //added by killap
         call Node021;
      else
         call Node023; //added by killap
   end else begin
      if (global_var(GVAR_NCR_VORTIS_QUEST_STATE) == VORTIS_QUEST_ACCEPTED) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node016;
         gSay_End;
         end_dialogue;
         set_local_var(LVAR_Herebefore, 1);
      //added by killap - expansion
      end else if (global_var(GVAR_NCR_VORTIS_QUEST_STATE) == VORTIS_QUEST2_ACCEPTED) then begin
         if (local_var(LVAR_Prepare_For_Attack) == 1) then begin
            start_gdialog(NAME,self_obj,4,-1,-1);
            gSay_Start;
               call Node032;
            gSay_End;
            end_dialogue;
            set_local_var(LVAR_Herebefore, 1);
         end else begin
            start_gdialog(NAME,self_obj,4,-1,-1);
            gSay_Start;
               call Node027;
            gSay_End;
            end_dialogue;
            set_local_var(LVAR_Herebefore, 1);
         end
      //end added
      end else if (local_var(LVAR_Herebefore) == 0) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node001;
         gSay_End;
         end_dialogue;
      end else begin
         ndebug("local_var(LVAR_reaction_level): " + local_var(LVAR_reaction_level));
         if (horrible_critter_reaction) then begin
            start_gdialog(NAME,self_obj,4,-1,-1);
            gSay_Start;
               call Node002;
            gSay_End;
            end_dialogue;
         end else begin
            start_gdialog(NAME,self_obj,4,-1,-1);
            gSay_Start;
               call Node001;
            gSay_End;
            end_dialogue;
         end
      end
   end
   if (warpPlayerOut == 1) then begin
      ndebug("warp out set");
      warpPlayerOut := 0;
      node1count := 0;
      fdout;
      move_to(dude_obj, VOR_ESCORT_OUT_TILE, 0);
      fdin;
   end
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   //inc_good_critter
   inc_evil_critter

   //added by killap - expansion
   if (global_var(GVAR_NCR_VORTIS_QUEST_STATE) == VORTIS_QUEST2_ACCEPTED) then begin
      set_global_var(GVAR_NCR_VORTIS_QUEST_STATE, 5); //failure
   end
   //end added

/* Set global_variable for Enemy status*/
   i_vortis_obj := -1;
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   if (local_var(LVAR_Herebefore) == 0) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node0405a begin
   if (global_var(GVAR_NCR_VORTIS_QUEST_STATE) == VORTIS_QUEST_ACCEPTED) then
      call Node017;

   if (horrible_critter_reaction) then
      call Node005;
   else
      call Node004;
end

procedure Node001r begin
   Node1Count += 1;
   call Node001;
end

procedure Node001 begin
   variable doOptions := 1;
   if (local_var(LVAR_Herebefore) == 0) then begin
      if (has_rep_slaver) then begin
         UpReactModerate;
         Reply(104);
      end else begin
         DownReactMinor;
         Reply(103);
      end
      set_local_var(LVAR_Herebefore, 1);
   end else begin
      if (Node1Count == 0) then begin
         DownReactMinor;
         GetReaction;
         if (horrible_critter_reaction) then begin
            call Node005;
            doOptions := 0;
         end
         Reply(105);
         doOptions := 1;
      end else if (Node1Count == 1) then begin
         Reply(106);
         doOptions := 1;
      end else if (Node1Count == 2) then begin
         DownReactModerate;
         Reply(107);
         doOptions := 1;
      end else if (Node1Count > 2) then begin
         call Node005;
         doOptions := 0;
      end
   end
   //108 was skipped oops.
   if (doOptions) then begin
      NOption(109, Node003, 4);
      //if (global_var(GVAR_NCR_VORTIS_QUEST_STATE) != VORTIS_QUEST_DONE) then -- edit by killap for expansion pack
      if ( (global_var(GVAR_NCR_VORTIS_QUEST_STATE) != VORTIS_QUEST_DONE) and (global_var(GVAR_NCR_VORTIS_QUEST_STATE) != VORTIS_QUEST2_DONE) ) then
         NOption(110, Node0405a, 4);
      NLowOption(111, Node001r);
      NLowOption(112, Node999);
      NOption(113, Node001r, 4);
      NOption(114, Node999, 1);
   end
end

procedure Node002 begin
   Reply(115);
   NOption(116, Node999, 4); //edit by killap - was NOption(116, Node999, 1);
   NLowOption(111, Node999); //added by killap

   //Note the design had Slavers=leave in it. I am not sure what the hell that means.
   warpPlayerOut := 1;
end

procedure Node91018a begin
   if (global_var(GVAR_NCR_VORTIS_QUEST_STATE) == VORTIS_QUEST_DONE) then begin
      call Node018;
   end
   else begin
      if (global_var(TOWN_REP_VAR) > VORTIS_GREP_THRESH) then //edit by killap: TOWN_REP_VAR, changed to global_var(TOWN_REP_VAR)
         call Node009;
      else
         call Node010;
   end
end

procedure Node003 begin
   if (bad_critter_reaction) then
      call Node005;
   else begin
      Reply(117);
      NOption(118, Node006, 4);
      NOption(119, Node007, 4);
      NOption(120, Node008, 4);
      BOption(121, Node998, 4);
      if (global_var(GVAR_NCR_RANGERS_KNOWN) bwand RANGERS_KNOWN) then
            GOption(122, Node91018a, 4);
      BOption(123, Node011, 4);
      if ( (global_var(GVAR_SULIK_SISTER) == 1) and (local_var(LVAR_Got_Slaver_Camp_Location) == 0) )then
        NOption(241, Node033, 4);
   end
end

procedure Node004 begin
   Reply(124);
   NOption(125, Node012, 4);
   NOption(126, Node013, 4);
end

procedure Node005 begin
   Reply(127);
   NOption(128, Node999, 4);
   warpPlayerOut := 1;
end

procedure Node006 begin
   DownReactMinor;
   Reply(129);
   NOption(130, Node003, 4);
   NOption(131, Node999, 4);
end

procedure Node007 begin
   DownReactMinor;
   Reply(132);
   NOption(133, Node003, 4);
   NOption(134, Node999, 4);
end

procedure Node008 begin
   DownReactMinor;
   Reply(135);
   NOption(136, Node003, 4);
   NOption(137, Node999, 4);
end

procedure Node009 begin
   DownReactMinor;
   Reply(138);
   NOption(139, Node003, 4);
   NOption(140, Node999, 4);
end

procedure Node010 begin
   DownReactMinor;
   Reply(141);
   GOption(142, Node012, 4);
   NOption(143, Node003, 4);
end

procedure Node011 begin
   DownReactModerate;
   Reply(144);
   NOption(145, Node003, 4);
   NOption(146, Node999, 4);
end

procedure Node014a begin
   set_global_var(GVAR_NCR_VORTIS_QUEST_STATE, VORTIS_QUEST_ACCEPTED);
   call Node014;
end

procedure Node012 begin
   Reply(147);
   NOption(148, Node014a, 4);
   NOption(149, Node005, 4);
end

procedure Node013r begin
   Node13Count += 1;
   call Node013;
end

procedure Node013 begin
   set_global_var(GVAR_NCR_RANGERS_KNOWN, global_var(GVAR_NCR_RANGERS_KNOWN) bwor RANGERS_KNOWN);
   if (Node13Count == 0) then begin
      ncr_set_global_state(NCR_VORTIS_REF_RANGERS);
      Reply(150);
   end
   else if (Node13Count == 1) then
      Reply(151);
   else if (Node13Count == 2) then
      Reply(152);
   else
      Reply(153);

   NOption(154, Node013r, 4);
   GOption(155, Node012, 4);
end

procedure Node014 begin
   Reply(156);
   NOption(157, Node015, 4);
   NOption(158, Node003, 4);
   NOption(159, NOde999, 4);
end

procedure Node015 begin
   Reply(160);
   NOption(161, Node003, 4);
   NOption(162, Node999, 4);
end

procedure Node19a begin
   variable obj;

   obj := dude_item(VOTRIS_NCR_MAP);
   rm_obj_from_inven(dude_obj, obj);
   add_obj_to_inven(self_obj, obj);
   dude_caps_adjust(500);

   if has_rep_slaver or (self_rep >= abs(KARMA_BETRAYER)) then
      call Node024;
   else
      call Node019;
end

//added by killap - expansion
procedure Node024 begin
   if (has_rep_slaver) then
      Reply(200);
   else
      Reply(201);

   NOption(202, Node025, 4);
   NOption(203, Node026, 4);
end

procedure Node025 begin
   Reply(204);
   if (has_skill(dude_obj,SKILL_SPEECH) >= 80) then
      NOption(207, Node029, 4);
   NOption(206, Node990, 4);
end

procedure Node026 begin
   Reply(205);
   NOption(206, Node019a, 4);
end

procedure Node027 begin
   Reply(210);
   if (global_var(GVAR_WIPED_OUT_RANGER_SAFE_HOUSES) == 3) then
      NOption(211, Node028, 4);
   NOption(212, Node020, 4);
end

procedure Node028 begin
   dude_caps_adjust(1000);
   display_msg(mstr(240));
   set_global_var(GVAR_NCR_VORTIS_QUEST_STATE, VORTIS_QUEST2_DONE);

   Reply(215);
   NOption(216, Node999, 4);
   NOption(217, Node999, 4);
   NOption(218, Node999, 4);

end

procedure Node029 begin
   if( is_success( roll_vs_skill( dude_obj, SKILL_SPEECH, -10 ) ) ) then
      call Node030;
   else
      call Node031;
end

procedure Node030 begin
   Reply(225);
   NOption(226, Node991, 4);
   NOption(227, Node992, 4);
   NOption(228, Node992, 4);
   NOption(229, Node026, 4);
end

procedure Node031 begin
   Reply(220);
   NOption(221, Node990, 4);
   NOption(222, Node026, 4);
   BOption(223, Node998, 4);
end

procedure Node032 begin
   Reply(230);
   NOption(231, Node999, 4);
   NOption(232, Node992, 4);
end

procedure Node033 begin
   Reply(250);
   NOption(251, Node034, 4);
   if (metzger_dead) then
     BOption(252, Node998, 4);
end

procedure Node034 begin
   Reply(260);
   NOption(261, Node035, 4);
end

procedure Node035 begin
   variable dude_goody_two_shoes;
   if (check_general_rep > KARMA_SHIELD_OF_HOPE) then
     dude_goody_two_shoes := 1;
   else
     dude_goody_two_shoes := 0;
   Reply(270+dude_goody_two_shoes);
   if ((dude_goody_two_shoes and dude_caps >= 2000) or (dude_caps >= 1000)) then
     NOption(272, Node993, 4);
   else
     NOption(275, Node999, 4);
   NOption(273, Node003, 4);
   BOption(274, Node998, 4);
end

procedure Node036 begin
   mark_on_map(AREA_SLAVER_CAMP)
   set_local_var(LVAR_Got_Slaver_Camp_Location,1);
   Reply(280);
   NOption(133, Node003, 4);
   NOption(281, Node999, 4);
end

procedure Node993 begin
  variable price;
  if (check_general_rep > KARMA_SHIELD_OF_HOPE) then
    price := 2000;
  else
    price := 1000;
  dude_caps_adjust(-price);
  call Node036;
end

procedure Node990 begin
   set_global_var(GVAR_NCR_VORTIS_QUEST_STATE, VORTIS_QUEST2_ACCEPTED);
   mark_area_known(0, AREA_RANGER_SAFE1, MARK_STATE_KNOWN);
   mark_area_known(0, AREA_RANGER_SAFE2, MARK_STATE_KNOWN);
   mark_area_known(0, AREA_RANGER_SAFE3, MARK_STATE_KNOWN);
end

procedure Node991 begin
   mark_area_known(0, AREA_RANGER_SAFE1, MARK_STATE_KNOWN);
   mark_area_known(0, AREA_RANGER_SAFE2, MARK_STATE_KNOWN);
   mark_area_known(0, AREA_RANGER_SAFE3, MARK_STATE_KNOWN);
   set_local_var(LVAR_Prepare_For_Attack,1);
   set_global_var(GVAR_NCR_VORTIS_QUEST_STATE, VORTIS_QUEST2_ACCEPTED);
end

procedure Node992 begin
   mark_area_known(0, AREA_RANGER_SAFE1, MARK_STATE_KNOWN);
   mark_area_known(0, AREA_RANGER_SAFE2, MARK_STATE_KNOWN);
   mark_area_known(0, AREA_RANGER_SAFE3, MARK_STATE_KNOWN);
   set_global_var(GVAR_NCR_VORTIS_QUEST_STATE, VORTIS_QUEST2_ACCEPTED);
   set_local_var(LVAR_Prepare_For_Attack,0);
   load_map(MAP_RANGER_SAFE_HOUSE1, 5);
end
//end added


procedure Node016 begin
   Reply(163);
   if (dude_item_count(VOTRIS_NCR_MAP)) then
      NOption(164, Node19a, 4);
   NOption(165, Node020, 4);
end

procedure Node017 begin
   DownReactMinor;
   Reply(166);
   NOption(167, Node001, 4);
end

procedure Node018 begin
   Reply(168);
   NOption(169, Node003, 4);
   NOption(170, Node999, 4);
end

procedure Node019 begin
   set_global_var(GVAR_NCR_VORTIS_QUEST_STATE, VORTIS_QUEST_DONE);
   Reply(171);
   NOption(172, Node999, 4);
end

procedure Node019a begin
   set_global_var(GVAR_NCR_VORTIS_QUEST_STATE, VORTIS_QUEST_DONE);
end

procedure Node020 begin
   Reply(173);
   NOption(174, Node999, 4);
end

procedure Node021 begin
   float_msg(self_obj, mstr(175), FLOAT_MSG_RED);
   call Node998;
   call callGuards;
end

procedure Node022 begin
   float_msg(self_obj, mstr(176), FLOAT_MSG_RED);
end

//added by killap
procedure Node023 begin
   float_msg(self_obj, mstr(177), FLOAT_MSG_RED);
end
//end added by killap

procedure doLoadStuff begin
   variable time;

   time := game_time_hour;
   if (time > 800 and time < 1600) then begin
      set_local_var(LVAR_Vortis_Location, VORTISOFFICEPLACE);
      move_to(self_obj, VORTISOFFICEPLACE, 0);
   end else begin
      set_local_var(LVAR_Vortis_Location, VORTISBEDPLACE);
      move_to(self_obj, VORTISBEDPLACE, 0);
   end
end

procedure callGuards begin
   set_map_var(MVAR_Slavers_Attack, 1); //added by killap
   // Eventually when guards get designed they will do somthing
end

procedure walkToOffice begin
   set_local_var(LVAR_Vortis_Location, VORTISOFFICEPLACE);
   reg_anim_clear(self_obj);
   reg_anim_begin();
      self_walk_to_tile(VORTISOFFICEPLACE);
   reg_anim_end();
end

procedure walkToBed begin
   set_local_var(LVAR_Vortis_Location, VORTISBEDPLACE);
   reg_anim_clear(self_obj);
   reg_anim_begin();
      self_walk_to_tile(VORTISBEDPLACE);
   reg_anim_end();
end

procedure checkTime begin
   variable time;
   time := game_time_hour;
   ndebug("gametime: " + time);
   if (time >= 800 and time <= 1600) then begin
//local_var(LVAR_Vortis_Location)
      if (not anim_busy(self_obj)) then begin
         if (self_tile != VORTISOFFICEPLACE) then begin
            call walkToOffice;
         end
      end
   end
   else begin
   //local_var(LVAR_Vortis_Location)
      if (not anim_busy(self_obj)) then begin
         if (self_tile != VORTISBEDPLACE) then begin
            call walkToBed;
         end
      end
   end
end

procedure anim_end_call begin
   if (self_tile == VORTISOFFICEPLACE) then begin
      self_rotate(VORTISOFFICEDIR);
   end else if (self_tile == VORTISBEDPLACE) then begin
      self_rotate(VORTISBEDDIR);
   end
end
//xxxxxxxxxxxxxxxxxxxx
