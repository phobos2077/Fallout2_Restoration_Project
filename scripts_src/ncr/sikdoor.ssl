/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/******************************************************************************************
        Item: Wood Door
        Locked: NO
        Trapped: NO
        Closing: YES
        Description: This is a generic locked and trapped wooden door.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created: September 26, 1997

           Updated:
******************************************************************************************/

/* Include Files */
#define SCRIPT_REALNAME "sikdoor"

/* Sets whether the door is locked or trapped or closing */
#define LOCKED_STATUS                   STATE_ACTIVE
#define TRAPPED_STATUS                  STATE_INACTIVE
#define DOOR_STATUS                     STATE_METAL
#define LOCK_STATUS                     STATE_STANDARD_LOCK
#define CLOSE_STATUS                    STATE_DOOR_NOCLOSE

/* Penalties for Lock difficulty based on whether or not you are using lockpicks. */
#define Lock_Bonus                      (-50)

#define custom_start
#define custom_damage_p_proc
#define custom_map_enter_p_proc
#define custom_map_update_p_proc
#include "../headers/doors.h"

import variable i_cell_door_obj;

procedure start begin
   i_cell_door_obj := self_obj;
end

/******************************************************************************************
   Should the door sustain damage from anything (ie, dynamite, plastic explosives, rockets,
   or any other forms of damage), this procedure will be called to destroy the door and
   free up the space.
******************************************************************************************/

procedure damage_p_proc begin
   variable Trap_Damage;

  /************ Wood Door ****************/

 if (weapon_dmg_type(target_obj) == DMG_explosion) then begin
   if (DOOR_STATUS == STATE_WOOD) then begin
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           Trap_Damage:=random(MIN_DAMAGE,MAX_DAMAGE);
           explosion(self_tile, self_elevation, Trap_Damage);
           i_cell_door_obj := -1; //added by killap
           destroy_object(self_obj);
       end

       else begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           i_cell_door_obj := -1; //added by killap
           destroy_object(self_obj);
       end
   end

  /************ Metal Door ****************/

   else if (DOOR_STATUS == STATE_METAL) then begin
       set_local_var(LVAR_Explosion_Attempts,local_var(LVAR_Explosion_Attempts)+1);
       if (local_var(LVAR_Trapped) == STATE_ACTIVE) then begin
           set_local_var(LVAR_Locked, STATE_INACTIVE);
           Trap_Damage:=random(MIN_DAMAGE,MAX_DAMAGE);
           explosion(self_tile, self_elevation, Trap_Damage);
       end

       else if (local_var(LVAR_Explosion_Attempts) > DOOR_STRENGTH) then begin
           set_local_var(LVAR_Trapped, STATE_INACTIVE);
           set_local_var(LVAR_Locked,STATE_INACTIVE);
           i_cell_door_obj := -1; //added by killap
           destroy_object(self_obj);
       end
   end
 end
   else begin
       display_msg(mstr(193));
   end
end

/***************************************************************************************
   Whenever the map is first entered, this procedure will be called. The main purpose of
   this procedure is to lock the door from the outset, rather than having to worry about
   it through Mapper. After the door has been unlocked, it will remain as such, unless
   the player locks it once more.
***************************************************************************************/

procedure map_enter_p_proc begin
   i_cell_door_obj := self_obj; //added by killap

/* Set up the door state when the player first enters the map */
   if (local_var(LVAR_Set_Door_Status) == 0) then begin
       set_local_var(LVAR_Set_Door_Status,1);
       set_local_var(LVAR_Locked,LOCKED_STATUS);
       set_local_var(LVAR_Trapped,TRAPPED_STATUS);
   end

   if (local_var(LVAR_Locked) == STATE_ACTIVE) then begin
       obj_lock(self_obj);
   end

   else begin
       obj_unlock(self_obj);
   end
end

/**************************************************************************************
   This procedure gets called roughly every 30 seconds of real time. It is used to make
   sure that the door does not lock on it's own and that the player will be able to get
   through once he has unlocked the door. Once more, this is so that locking and
   unlocking do not need to be done in Mapper.
**************************************************************************************/

procedure map_update_p_proc begin
   i_cell_door_obj := self_obj;
end
