/*
	Copyright 1998-2003 Interplay Entertainment Corp.  All rights reserved.
*/

/*
        Name: Hal, Drive Leader in NCR
        Location: NCR Map 3 and Some map in Redding.
        Description: He is the leader of the cattle drive.

        Log:
           Please note any changes that have been made to the file in Updated. Then comment
           the code which you have changed/altered/commented out. Please, do not delete any
           code which was written.

           Created:

           Updated:
*/

/* Include Files */

/* Note, the Following Lines need to be in this order so that
   the script will be compilable. The define Name is referenced
   in a module from define.h and used in command.h. Please do
   not change the ordering.
        -rwh2   11/13/97
*/
#define SCRIPT_REALNAME "schal"
#include "../headers/define.h"
//#include "../headers/ncr3.h"

#define NAME                    SCRIPT_SCHAL
#define TOWN_REP_VAR         GVAR_TOWN_REP_NCR

#include "../headers/command.h"
#include "../headers/modreact.h"
#include "../headers/caravan.h"
#include "../headers/bhrnddst.h" //added by killap
#include "../headers/ncr.h"


/* Standard Script Procedures */
procedure start;
procedure map_update_p_proc;
procedure timed_event_p_proc;
procedure critter_p_proc;
procedure pickup_p_proc;
procedure talk_p_proc;
procedure destroy_p_proc;
procedure look_at_p_proc;
procedure description_p_proc;
procedure use_skill_on_p_proc;
procedure damage_p_proc;
procedure map_enter_p_proc;
procedure combat_p_proc;

/* Script Specific Procedure Calls */
procedure Node998;                                      // This Node is Always Combat
procedure Node999;                                      // This Node is Always Ending


// The next lines are added in by the Designer Tool.
// Do NOT add in any lines here.
//~~~~~~~~~~~~~~~~ DESIGNER TOOL STARTS HERE

procedure Node001;
procedure Node002;
procedure Node003;
procedure Node004;
procedure Node005;
procedure Node006;
procedure Node007;

procedure checkLoadConditions;
procedure checkNextDay;

//~~~~~~~~~~~~~~~~ DESIGN TOOL ENDS HERE
// The Following lines are for anything that is not needed to be
// seen by the design Tool


/* Local Variables which are saved. All Local Variables need to be
   prepended by LVAR_ */
#define LVAR_Herebefore                 (4)
#define LVAR_Hostile                    (5)
#define LVAR_Personal_Enemy             (6)
#define LVAR_Vis                        (7)
#define LVAR_Called_Clear               (8) //added by killap

/* Imported variables from the Map scripts. These should only be
   pointers and variables that need not be saved. If a variable
   Needs to be saved, make it a map variable (MVAR_) */


/* Local variables which do not need to be saved between map changes. */
variable Only_Once:=0;
variable Node1Rep := 0;

#define TIMER_APPEAR    1
#define TIMER_DISAPPEAR 2
#define TIMER_ALL_CLEAR 3

procedure combat_p_proc begin
   if (not self_visible) then
      script_overrides;
end

procedure start begin
end

procedure timed_event_p_proc begin
   if (fixed_param == TIMER_APPEAR) then begin
      ndebug("timer appear: game_time:" + game_time + " appear: " + global_var(GVAR_NCR_CATTLE_TIME_MIN) + " disappear: " + global_var(GVAR_NCR_CATTLE_TIME_MAX));
      if (game_time >= global_var(GVAR_NCR_CATTLE_TIME_MIN) and game_time <= global_var(GVAR_NCR_CATTLE_TIME_MAX)) then begin
         set_self_visible;
         set_local_var(LVAR_Vis, 1);
         add_timer_event(self_obj, game_ticks(60), TIMER_DISAPPEAR);
      end else begin
         if (not cattle_drive(CATTLE_FINISHED)) then
            add_timer_event(self_obj, game_ticks(60), TIMER_APPEAR);
      end
   end else if (fixed_param == TIMER_DISAPPEAR) then begin
      if cattle_drive(HAL_DEAD) then destroy_self;
      if (game_time > global_var(GVAR_NCR_CATTLE_TIME_MAX)) then begin
         set_self_invisible;
         set_local_var(LVAR_Vis, 0);
         if (not cattle_drive(CATTLE_ON1) or not cattle_drive(CATTLE_FINISHED)) then begin
            set_cattle_drive(CATTLE_MISSED);
            set_global_var(GVAR_NCR_BRAHMN_QST, 2);
         end
      end
   //added by killap
   end else if( fixed_param == TIMER_ALL_CLEAR ) then begin
      float_msg(self_obj,g_mstr(450),FLOAT_COLOR_NORMAL);
      add_timer_event( self_obj, game_ticks(10), TIMER_ALL_CLEAR );
   end
   //end added
end

/* This procedure will get called each time that the map is first entered. It will
   set up the Team number and AI packet for this critter. This will override the
   default from the prototype, and needs to be set in scripts. */
procedure map_enter_p_proc begin
   Only_Once:=0;
   //edits by killap
   if (cur_map_index == MAP_NCR_DOWNTOWN) then set_self_team(TEAM_NCR);
   else if (cur_map_index == MAP_NCR_BAZAAR) then set_self_team(TEAM_NCR_ENTRANCE);
   else if (cur_map_index == MAP_REDDING_MINE_ENT) then set_self_team(TEAM_REDDING);
   else set_self_team(TEAM_PLAYER);
   //end edits

   set_self_ai(AI_TOUGH_GUARD);
   if (is_loading_game == FALSE) then begin
      call checkLoadConditions;
      add_timer_event(self_obj, game_ticks(1), TIMER_APPEAR);
      if ( (cur_map_index == MAP_NCR_DOWNTOWN)
            and not cattle_drive(CATTLE_FINISHED)
            and cattle_drive(CATTLE_ACCEPT)
            and local_var(LVAR_Vis) == 1
         ) then
         add_timer_event(self_obj, game_ticks(1), TIMER_DISAPPEAR);
   end
end

//added by killap
procedure map_update_p_proc begin
   if not (is_loading_game or combat_is_initialized) then begin
      if (cur_map_index == MAP_BH_RND_DESERT) then begin
         if ((local_var(LVAR_Called_Clear) == 0) and (map_var(MVAR_Hostile_Total) <= 0)) then begin //edit by killap (incase you drop below zero, things will still run)
           set_local_var(LVAR_Called_Clear,1);
           add_timer_event( self_obj, game_ticks(10), TIMER_ALL_CLEAR );
         end
      end
   end
end
//end added
procedure map_exit_p_proc begin
   if (cur_map_index == MAP_BH_RND_DESERT) then begin
      if map_var(MVAR_Hostile_Total) > 0 then begin
         set_cattle_drive(CATTLE_ABANDON);
         ndebug("abandoned caravan");
      end
   end
end

/* Every heartbeat that the critter gets, this procedure will be called. Anything from
   Movement to attacking the player on sight can be placed in here.*/
procedure critter_p_proc begin

/* If the critter is mad at the player for any reason, it will attack and remember to attack
   the player should the game be saved and loaded repeatedly. Additionally, if any special
   actions need to be taken by the critter based on previous combat, the critter will remember
   this as well. */
   if (self_visible) then begin
      if ((local_var(LVAR_Hostile) == 2) and (self_can_see_dude)) then begin
         set_local_var(LVAR_Hostile,1);
         self_attack_dude;
      end
   end
   if (cur_map_index == MAP_NCR_DOWNTOWN) then begin
      call checkLoadConditions;
   end
end

/* Whenever the critter takes damage of any type, this procedure will be called. Things
   like setting ENEMY_ and LVAR_Personal_Enemy can be set here. */
procedure damage_p_proc begin

/* If the player causes damage to this critter, then he will instantly consider the player
   his personal enemy. In Critter_Proc or through dialog, actions will be taken against
   the player for his evil acts. */
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Personal_Enemy,1);
   end

end

/* Any time that the player is caught stealing from this critter, Pickup_proc will be called.
   In here, various things can happen. The most common response is instant hostility which
   will be remembered. */
procedure pickup_p_proc begin
   if (source_obj == dude_obj) then begin
       set_local_var(LVAR_Hostile,2);
   end
end

/* The dialog system is setup and prepares the player to talk to this NPC. Where To Go
   written by designers are placed in here. Additionally, Reactions are generated and
   stored which affects player interactions. */
procedure talk_p_proc begin
   Evil_Critter:=0;
   Slavery_Tolerant:=SLAVE_TOLERANT;
   Karma_Perception:=KARMA_PERCEPTION2;
   CheckKarma;
   GetReaction;

   if (cur_map_index == MAP_NCR_DOWNTOWN) then begin
       start_gdialog(NAME,self_obj,4,-1,-1);
       gSay_Start;
           call Node001;
       gSay_End;
       end_dialogue;
       set_local_var(LVAR_Herebefore, 1);
   end else if (cur_map_index == MAP_REDDING_MINE_ENT) then begin
      if (cattle_drive(CATTLE_ABANDON)) then begin
         float_msg(self_obj, mstr(118), FLOAT_MSG_RED);
         set_cattle_drive(CATTLE_FINISHED);
      end else if not cattle_drive(CATTLE_FINISHED) then begin
         start_gdialog(NAME,self_obj,4,-1,-1);
         gSay_Start;
            call Node006;
         gSay_End;
         end_dialogue;
      end else call Node007;
   end else if ((cattle_drive(CATTLE_ON)) or (cur_map_index == MAP_BH_RND_DESERT)) then begin
      call Node002;
   end else if (cur_map_index == MAP_RND_DESERT_1/* Redding */ and cattle_drive(CATTLE_FINISHED)) then
      call Node007;
end

/* This procedure gets called only on the death of this NPC. Special things like
   incrementing the death count for reputation purposes and Enemy Counters are placed
   in here. */
procedure destroy_p_proc begin

/* Increment the aligned critter counter*/
   inc_good_critter
   set_cattle_drive(HAL_DEAD);
   if (cattle_drive(CATTLE_ON) and not cattle_drive(CATTLE_FINISHED)) then rm_caravan_masters(1);
/* Set global_variable for Enemy status*/
end

/* Look_at_p_proc gets called any time that the player passes the cursor over any object.
   This should only hold the most cursory of glances for the player. */
procedure look_at_p_proc begin
   script_overrides;
   //if (local_var(LVAR_Herebefore) == 0) then
   if (cur_map_index == MAP_NCR_DOWNTOWN) then
      display_msg(mstr(100));
   else
      display_msg(mstr(101));
end

/* The player will see more indepth descriptions from this procedure. They are actively
   looking at the critter and want more information. Things like names can be added here
   if the critter is known to the player. */
procedure description_p_proc begin
   script_overrides;
   display_msg(mstr(102));
end

/* Any time a skill is used on a critter this call is made. This can be to give examinations
   for things like Doctor skill or messages for various other skills. */
procedure use_skill_on_p_proc begin
end

/* Should the Player ever cause the NPC too much discomfort that he desires to attack the player,
   this call will be made. Essentially, it stores the Hostile vaule so that the critter remembers
   he was once hostile towards the player.*/
procedure Node998 begin
   set_local_var(LVAR_Hostile,2);
end

/* Anytime that there is a need for an ending to dialog, this node is to be called. It will just
   exit from the dialog system without any reprisals from the NPC. */
procedure Node999 begin
end


// Not lines are allowed to be added below here
// The Following lines are from the Design Tool
//~~~~~~~~~~~~~~~~ DESIGN TOOL STARTS HERE

procedure Node001 begin
   Reply(103);
   NOption(105, Node003, 1);
   NOption(106, Node004, 1);
end

procedure Node002 begin
   float_msg(self_obj, mstr(107 + Random(0, 2)), FLOAT_MSG_NORMAL);
end

procedure Node003 begin
   variable rnd;
   variable grds;

   set_cattle_drive(CATTLE_ON);
   set_cattle_drive(CATTLE_ON1);
   //Don't forget to do raider stuff
   Reply(110);

   if (cattle_drive(CATTLE_ON) and not cattle_drive(CATTLE_FINISHED)) then begin //moved from talk_p_pro to here - killap
      //Don't forget to do raider stuff
      set_caravan_start(CARAVAN_NCR);
      set_caravan_masters(1);
      grds := 7 - party_size;
      set_caravan_guards(grds);
      set_caravan_brahmin(10);
      set_caravan_carts(1);
      rnd := Random(1, 4);
      set_caravan_encounters(rnd);
      set_caravan_end(CARAVAN_REDDING);
      load_map(MAP_BH_RND_DESERT, 7);
   end

   ENDOPTION;
end

procedure Node004 begin
   Reply(111);
   ENDOPTION;
end

procedure Node005 begin
   Reply(112);
   ENDOPTION;
end

procedure Node006 begin
   variable amount;

   set_global_var(GVAR_NCR_BRAHMN_QST, 2);
   call calc_cattle_drive_status;

   if (cattle_drive(CATTLE_SCREWED)) then begin
      amount := 0;
      Reply(113);
   end else if (cattle_drive(CATTLE_FAIL)) then begin
      amount := 1000;
      Reply(114);
   end
   else if (cattle_drive(CATTLE_AVERAGE)) then begin
      amount := 2000;
      Reply(115);
   end
   else if (cattle_drive(CATTLE_SUCCESS)) then begin
      amount := 3000;
      Reply(116);
   end
   set_cattle_drive(CATTLE_FINISHED);
   dude_caps_adjust(amount);
   ENDOPTION;
end

procedure Node007 begin
   float_msg(self_obj, mstr(117), FLOAT_MSG_NORMAL);
end

procedure checkLoadConditions begin
   if (cur_map_index == MAP_NCR_DOWNTOWN) then begin
      if (not cattle_drive(CATTLE_FINISHED) and cattle_drive(CATTLE_ACCEPT) and not cattle_drive(CATTLE_MISSED)) then begin
         if (checkNextDay) then begin
            set_self_visible;
            set_local_var(LVAR_Vis, 1);
         end
      end else begin
         set_self_invisible;
         set_local_var(LVAR_Vis, 0);
      end
   end else if (cur_map_index == MAP_REDDING_MINE_ENT) then begin
      if cattle_drive(HAL_DEAD) then begin
         destroy_self;
         return;
      end

      if cattle_drive(CATTLE_ON1) and repeatable_brahmin_drive and not cattle_drive(CATTLE_FINISHED) then begin
         set_self_visible;
         set_local_var(LVAR_Vis, 1);
         dialogue_system_enter;
      end else begin
         set_self_invisible;
         set_local_var(LVAR_Vis, 0);
      end
   end
end

procedure checkNextDay begin
   variable val;

   val := game_time;
   if (val >= global_var(GVAR_NCR_CATTLE_TIME_MIN) and val <= global_var(GVAR_NCR_CATTLE_TIME_MAX)) then begin
      return 1;
   end else if (val > global_var(GVAR_NCR_CATTLE_TIME_MAX)) then begin
      set_cattle_drive(CATTLE_MISSED);
   end
   return 0;
end
//xxxxxxxxxxxxxxxxxxxx
